
RtConcepts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000936c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b0  080097b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080097b0  080097b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097b8  080097b8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080097c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ee8  20000080  08009840  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f68  08009840  00024f68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002165c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f17  00000000  00000000  0004170c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00045628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d8  00000000  00000000  00046e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056ee  00000000  00000000  00048550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8c8  00000000  00000000  0004dc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106802  00000000  00000000  00068506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ed08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007198  00000000  00000000  0016ed5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00175ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00175f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009524 	.word	0x08009524

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08009524 	.word	0x08009524

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <__io_putchar>:

#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)

#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005b0:	1d39      	adds	r1, r7, #4
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	2201      	movs	r2, #1
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <__io_putchar+0x20>)
 80005ba:	f002 fe81 	bl	80032c0 <HAL_UART_Transmit>
	return ch;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200049b4 	.word	0x200049b4

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fe2e 	bl	8001232 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8e5 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f9d1 	bl	8000980 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005de:	f000 f971 	bl	80008c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e2:	f000 f99f 	bl	8000924 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e6:	f003 fd73 	bl	80040d0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dispatcherQueue */
  dispatcherQueueHandle = osMessageQueueNew (16, sizeof(request_t), &dispatcherQueue_attributes);
 80005ea:	4a62      	ldr	r2, [pc, #392]	; (8000774 <main+0x1a8>)
 80005ec:	210c      	movs	r1, #12
 80005ee:	2010      	movs	r0, #16
 80005f0:	f004 f9c8 	bl	8004984 <osMessageQueueNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a60      	ldr	r2, [pc, #384]	; (8000778 <main+0x1ac>)
 80005f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fa:	4a60      	ldr	r2, [pc, #384]	; (800077c <main+0x1b0>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	4860      	ldr	r0, [pc, #384]	; (8000780 <main+0x1b4>)
 8000600:	f003 fdd0 	bl	80041a4 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a5f      	ldr	r2, [pc, #380]	; (8000784 <main+0x1b8>)
 8000608:	6013      	str	r3, [r2, #0]

  /* creation of dispatcher */
  dispatcherHandle = osThreadNew(dispatch, NULL, &dispatcher_attributes);
 800060a:	4a5f      	ldr	r2, [pc, #380]	; (8000788 <main+0x1bc>)
 800060c:	2100      	movs	r1, #0
 800060e:	485f      	ldr	r0, [pc, #380]	; (800078c <main+0x1c0>)
 8000610:	f003 fdc8 	bl	80041a4 <osThreadNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a5e      	ldr	r2, [pc, #376]	; (8000790 <main+0x1c4>)
 8000618:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  srand(time(NULL));
 800061a:	2000      	movs	r0, #0
 800061c:	f008 f84c 	bl	80086b8 <time>
 8000620:	4602      	mov	r2, r0
 8000622:	460b      	mov	r3, r1
 8000624:	4613      	mov	r3, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f007 ffc8 	bl	80085bc <srand>
  	for (int i = 0; i < TOTAL_SERVICES; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
 8000630:	e098      	b.n	8000764 <main+0x198>
  		osMessageQueueAttr_t* serviceQueueAttr = malloc(sizeof(osMessageQueueAttr_t));
 8000632:	2018      	movs	r0, #24
 8000634:	f007 fe64 	bl	8008300 <malloc>
 8000638:	4603      	mov	r3, r0
 800063a:	623b      	str	r3, [r7, #32]
  		memset(serviceQueueAttr, 0, sizeof(*serviceQueueAttr));
 800063c:	2218      	movs	r2, #24
 800063e:	2100      	movs	r1, #0
 8000640:	6a38      	ldr	r0, [r7, #32]
 8000642:	f007 fe7b 	bl	800833c <memset>
  		serviceQueueAttr -> name = names[i];
 8000646:	4a53      	ldr	r2, [pc, #332]	; (8000794 <main+0x1c8>)
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800064e:	6a3b      	ldr	r3, [r7, #32]
 8000650:	601a      	str	r2, [r3, #0]
  		osMessageQueueId_t* serviceQueue = osMessageQueueNew(16, sizeof(request_t), serviceQueueAttr);
 8000652:	6a3a      	ldr	r2, [r7, #32]
 8000654:	210c      	movs	r1, #12
 8000656:	2010      	movs	r0, #16
 8000658:	f004 f994 	bl	8004984 <osMessageQueueNew>
 800065c:	61f8      	str	r0, [r7, #28]
  		free(serviceQueueAttr);
 800065e:	6a38      	ldr	r0, [r7, #32]
 8000660:	f007 fe56 	bl	8008310 <free>

  		osMutexAttr_t* serviceLockAttributes = malloc(sizeof(osMutexAttr_t));
 8000664:	2010      	movs	r0, #16
 8000666:	f007 fe4b 	bl	8008300 <malloc>
 800066a:	4603      	mov	r3, r0
 800066c:	61bb      	str	r3, [r7, #24]
  		memset(serviceLockAttributes, 0, sizeof(*serviceLockAttributes));
 800066e:	2210      	movs	r2, #16
 8000670:	2100      	movs	r1, #0
 8000672:	69b8      	ldr	r0, [r7, #24]
 8000674:	f007 fe62 	bl	800833c <memset>
  		serviceLockAttributes -> name = names[i];
 8000678:	4a46      	ldr	r2, [pc, #280]	; (8000794 <main+0x1c8>)
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	601a      	str	r2, [r3, #0]
  		osMutexId_t serviceLock = osMutexNew(serviceLockAttributes);
 8000684:	69b8      	ldr	r0, [r7, #24]
 8000686:	f003 fedb 	bl	8004440 <osMutexNew>
 800068a:	6178      	str	r0, [r7, #20]
  		free(serviceLockAttributes);
 800068c:	69b8      	ldr	r0, [r7, #24]
 800068e:	f007 fe3f 	bl	8008310 <free>

  		osSemaphoreAttr_t* semaphoreAttr = malloc(sizeof(osSemaphoreAttr_t));
 8000692:	2010      	movs	r0, #16
 8000694:	f007 fe34 	bl	8008300 <malloc>
 8000698:	4603      	mov	r3, r0
 800069a:	613b      	str	r3, [r7, #16]
  		memset(semaphoreAttr, 0, sizeof(*semaphoreAttr));
 800069c:	2210      	movs	r2, #16
 800069e:	2100      	movs	r1, #0
 80006a0:	6938      	ldr	r0, [r7, #16]
 80006a2:	f007 fe4b 	bl	800833c <memset>
  		semaphoreAttr -> name = names[i];
 80006a6:	4a3b      	ldr	r2, [pc, #236]	; (8000794 <main+0x1c8>)
 80006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	601a      	str	r2, [r3, #0]
  		osSemaphoreId_t semaphore = osSemaphoreNew(teams[i], teams[i], semaphoreAttr);
 80006b2:	4a39      	ldr	r2, [pc, #228]	; (8000798 <main+0x1cc>)
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ba:	4618      	mov	r0, r3
 80006bc:	4a36      	ldr	r2, [pc, #216]	; (8000798 <main+0x1cc>)
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c4:	693a      	ldr	r2, [r7, #16]
 80006c6:	4619      	mov	r1, r3
 80006c8:	f004 f802 	bl	80046d0 <osSemaphoreNew>
 80006cc:	60f8      	str	r0, [r7, #12]
  		free(semaphoreAttr);
 80006ce:	6938      	ldr	r0, [r7, #16]
 80006d0:	f007 fe1e 	bl	8008310 <free>

  		service_attr_t* attrs = malloc(sizeof(service_attr_t));
 80006d4:	2014      	movs	r0, #20
 80006d6:	f007 fe13 	bl	8008300 <malloc>
 80006da:	4603      	mov	r3, r0
 80006dc:	60bb      	str	r3, [r7, #8]
  		attrs -> name = names[i];
 80006de:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <main+0x1c8>)
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	60da      	str	r2, [r3, #12]
  		attrs -> queue = serviceQueue;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	69fa      	ldr	r2, [r7, #28]
 80006ee:	601a      	str	r2, [r3, #0]
  		attrs -> mutex = serviceLock;
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	605a      	str	r2, [r3, #4]
  		attrs -> semaphore = semaphore;
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	609a      	str	r2, [r3, #8]

  		osThreadAttr_t* serviceTaskAttrs = malloc(sizeof(osThreadAttr_t));
 80006fc:	2024      	movs	r0, #36	; 0x24
 80006fe:	f007 fdff 	bl	8008300 <malloc>
 8000702:	4603      	mov	r3, r0
 8000704:	607b      	str	r3, [r7, #4]
  		memset(serviceTaskAttrs, 0, sizeof(*serviceTaskAttrs));
 8000706:	2224      	movs	r2, #36	; 0x24
 8000708:	2100      	movs	r1, #0
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f007 fe16 	bl	800833c <memset>
  		serviceTaskAttrs -> name = names[i];
 8000710:	4a20      	ldr	r2, [pc, #128]	; (8000794 <main+0x1c8>)
 8000712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000714:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]
  		serviceTaskAttrs -> stack_size = 128 * 4;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000722:	615a      	str	r2, [r3, #20]
  		serviceTaskAttrs -> priority = (osPriority_t) osPriorityLow;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2208      	movs	r2, #8
 8000728:	619a      	str	r2, [r3, #24]
  		osThreadId_t serviceTaskId = osThreadNew(serviceTask, attrs, serviceTaskAttrs);
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	481b      	ldr	r0, [pc, #108]	; (800079c <main+0x1d0>)
 8000730:	f003 fd38 	bl	80041a4 <osThreadNew>
 8000734:	6038      	str	r0, [r7, #0]
  		free(serviceTaskAttrs);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f007 fdea 	bl	8008310 <free>

  		attrs -> task = serviceTaskId;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	611a      	str	r2, [r3, #16]
  		services[i] = *attrs;
 8000742:	4917      	ldr	r1, [pc, #92]	; (80007a0 <main+0x1d4>)
 8000744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000746:	4613      	mov	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	18ca      	adds	r2, r1, r3
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4614      	mov	r4, r2
 8000754:	461d      	mov	r5, r3
 8000756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075a:	682b      	ldr	r3, [r5, #0]
 800075c:	6023      	str	r3, [r4, #0]
  	for (int i = 0; i < TOTAL_SERVICES; i++) {
 800075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000760:	3301      	adds	r3, #1
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	2b02      	cmp	r3, #2
 8000768:	f77f af63 	ble.w	8000632 <main+0x66>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800076c:	f003 fce4 	bl	8004138 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x1a4>
 8000772:	bf00      	nop
 8000774:	08009634 	.word	0x08009634
 8000778:	20004ec4 	.word	0x20004ec4
 800077c:	080095ec 	.word	0x080095ec
 8000780:	08000c21 	.word	0x08000c21
 8000784:	200049b0 	.word	0x200049b0
 8000788:	08009610 	.word	0x08009610
 800078c:	08000ccd 	.word	0x08000ccd
 8000790:	20004e78 	.word	0x20004e78
 8000794:	20000000 	.word	0x20000000
 8000798:	080095e0 	.word	0x080095e0
 800079c:	08000ac5 	.word	0x08000ac5
 80007a0:	20004e3c 	.word	0x20004e3c

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b0b4      	sub	sp, #208	; 0xd0
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f007 fdc2 	bl	800833c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2284      	movs	r2, #132	; 0x84
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fdb3 	bl	800833c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d6:	f001 f96d 	bl	8001ab4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <SystemClock_Config+0x114>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <SystemClock_Config+0x114>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <SystemClock_Config+0x114>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <SystemClock_Config+0x118>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007fa:	4a30      	ldr	r2, [pc, #192]	; (80008bc <SystemClock_Config+0x118>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <SystemClock_Config+0x118>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080e:	2301      	movs	r3, #1
 8000810:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000814:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081c:	2302      	movs	r3, #2
 800081e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800082a:	2304      	movs	r3, #4
 800082c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000830:	2348      	movs	r3, #72	; 0x48
 8000832:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800083c:	2303      	movs	r3, #3
 800083e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f944 	bl	8001ad4 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000852:	f000 faa9 	bl	8000da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2302      	movs	r3, #2
 800085e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000876:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800087a:	2102      	movs	r1, #2
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fbcd 	bl	800201c <HAL_RCC_ClockConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000888:	f000 fa8e 	bl	8000da8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <SystemClock_Config+0x11c>)
 800088e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000890:	2300      	movs	r3, #0
 8000892:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fdf0 	bl	8002484 <HAL_RCCEx_PeriphCLKConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80008aa:	f000 fa7d 	bl	8000da8 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	37d0      	adds	r7, #208	; 0xd0
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000
 80008c0:	00200100 	.word	0x00200100

080008c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <MX_USART3_UART_Init+0x5c>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART3_UART_Init+0x58>)
 8000908:	f002 fc8c 	bl	8003224 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000912:	f000 fa49 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200049b4 	.word	0x200049b4
 8000920:	40004800 	.word	0x40004800

08000924 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800092e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2206      	movs	r2, #6
 8000934:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2202      	movs	r2, #2
 800093a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2202      	movs	r2, #2
 8000946:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2201      	movs	r2, #1
 800094c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2201      	movs	r2, #1
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	f000 ff5b 	bl	8001822 <HAL_PCD_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000972:	f000 fa19 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20004a38 	.word	0x20004a38

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <MX_GPIO_Init+0x130>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a45      	ldr	r2, [pc, #276]	; (8000ab0 <MX_GPIO_Init+0x130>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a39      	ldr	r2, [pc, #228]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b34      	ldr	r3, [pc, #208]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a33      	ldr	r2, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x130>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <MX_GPIO_Init+0x130>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <MX_GPIO_Init+0x130>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x130>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0x130>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a2c:	4821      	ldr	r0, [pc, #132]	; (8000ab4 <MX_GPIO_Init+0x134>)
 8000a2e:	f000 fedf 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <MX_GPIO_Init+0x138>)
 8000a38:	f000 feda 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_GPIO_Init+0x13c>)
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481b      	ldr	r0, [pc, #108]	; (8000ac0 <MX_GPIO_Init+0x140>)
 8000a52:	f000 fd21 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a56:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_GPIO_Init+0x134>)
 8000a70:	f000 fd12 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <MX_GPIO_Init+0x138>)
 8000a8c:	f000 fd04 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_GPIO_Init+0x138>)
 8000aa4:	f000 fcf8 	bl	8001498 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40021800 	.word	0x40021800
 8000abc:	10110000 	.word	0x10110000
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <serviceTask>:

/* USER CODE BEGIN 4 */
void serviceTask(void *argument) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	osThreadSuspend(osThreadGetId());
 8000acc:	f003 fc10 	bl	80042f0 <osThreadGetId>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 fc18 	bl	8004308 <osThreadSuspend>

	service_attr_t* settings = (service_attr_t*) argument;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
	struct request req;
	for(;;) {
		osStatus_t mResult = osMutexAcquire(settings -> mutex, 0);
 8000adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 fd46 	bl	8004574 <osMutexAcquire>
 8000ae8:	6278      	str	r0, [r7, #36]	; 0x24
		if (mResult == osOK) {
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d158      	bne.n	8000ba2 <serviceTask+0xde>
			osStatus_t result = osMessageQueueGet(settings -> queue, &req, NULL, 0);
 8000af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	f107 0108 	add.w	r1, r7, #8
 8000af8:	2300      	movs	r3, #0
 8000afa:	2200      	movs	r2, #0
 8000afc:	f004 f83c 	bl	8004b78 <osMessageQueueGet>
 8000b00:	6238      	str	r0, [r7, #32]
			osMutexRelease(settings -> mutex);
 8000b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fd92 	bl	8004630 <osMutexRelease>

			if (result == osOK) {
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d147      	bne.n	8000ba2 <serviceTask+0xde>
				printf("Handle\r\n");
 8000b12:	4827      	ldr	r0, [pc, #156]	; (8000bb0 <serviceTask+0xec>)
 8000b14:	f007 fd4a 	bl	80085ac <puts>

				for (int i = 0; i < req.groups; i++) {
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b1c:	e03d      	b.n	8000b9a <serviceTask+0xd6>
					osThreadAttr_t* teamTaskAttrs = malloc(sizeof(osThreadAttr_t));
 8000b1e:	2024      	movs	r0, #36	; 0x24
 8000b20:	f007 fbee 	bl	8008300 <malloc>
 8000b24:	4603      	mov	r3, r0
 8000b26:	61fb      	str	r3, [r7, #28]
					memset(teamTaskAttrs, 0, sizeof(*teamTaskAttrs));
 8000b28:	2224      	movs	r2, #36	; 0x24
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	69f8      	ldr	r0, [r7, #28]
 8000b2e:	f007 fc05 	bl	800833c <memset>
					teamTaskAttrs -> name = NULL;
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
					teamTaskAttrs -> stack_size = 128 * 4;
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3e:	615a      	str	r2, [r3, #20]
					teamTaskAttrs -> priority = (osPriority_t) osPriorityLow;
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	2208      	movs	r2, #8
 8000b44:	619a      	str	r2, [r3, #24]

					task_params_t* params = malloc(sizeof(task_params_t));
 8000b46:	200c      	movs	r0, #12
 8000b48:	f007 fbda 	bl	8008300 <malloc>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	61bb      	str	r3, [r7, #24]
					memset(params, 0, sizeof(*params));
 8000b50:	220c      	movs	r2, #12
 8000b52:	2100      	movs	r1, #0
 8000b54:	69b8      	ldr	r0, [r7, #24]
 8000b56:	f007 fbf1 	bl	800833c <memset>
					params -> semaphore = settings -> semaphore;
 8000b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	605a      	str	r2, [r3, #4]
					params -> time = req.task_time;
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	601a      	str	r2, [r3, #0]
					params -> name = settings -> name;
 8000b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	609a      	str	r2, [r3, #8]

					osThreadId_t id = osThreadNew(teamTask, params, teamTaskAttrs);
 8000b70:	69fa      	ldr	r2, [r7, #28]
 8000b72:	69b9      	ldr	r1, [r7, #24]
 8000b74:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <serviceTask+0xf0>)
 8000b76:	f003 fb15 	bl	80041a4 <osThreadNew>
 8000b7a:	6178      	str	r0, [r7, #20]
					if (id == NULL) {
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d105      	bne.n	8000b8e <serviceTask+0xca>
						printf("Failed to launch teamTask\n\r");
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <serviceTask+0xf4>)
 8000b84:	f007 fc8c 	bl	80084a0 <iprintf>
						free(params);
 8000b88:	69b8      	ldr	r0, [r7, #24]
 8000b8a:	f007 fbc1 	bl	8008310 <free>
					}
					free(teamTaskAttrs);
 8000b8e:	69f8      	ldr	r0, [r7, #28]
 8000b90:	f007 fbbe 	bl	8008310 <free>
				for (int i = 0; i < req.groups; i++) {
 8000b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b96:	3301      	adds	r3, #1
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	dbbd      	blt.n	8000b1e <serviceTask+0x5a>
				 // printf("Error receiving message\r\n");
			}
		} else {
			 // printf("Failed to acquire lock\r\n");
		}
		osThreadSuspend(osThreadGetId());
 8000ba2:	f003 fba5 	bl	80042f0 <osThreadGetId>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 fbad 	bl	8004308 <osThreadSuspend>
	for(;;) {
 8000bae:	e795      	b.n	8000adc <serviceTask+0x18>
 8000bb0:	08009584 	.word	0x08009584
 8000bb4:	08000bbd 	.word	0x08000bbd
 8000bb8:	0800958c 	.word	0x0800958c

08000bbc <teamTask>:
	}
}

void teamTask(void *argument) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	printf("Exec\n\r");
 8000bc4:	4814      	ldr	r0, [pc, #80]	; (8000c18 <teamTask+0x5c>)
 8000bc6:	f007 fc6b 	bl	80084a0 <iprintf>
	task_params_t* params = (task_params_t*) argument;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]
	for(;;) {
		osStatus_t result = osSemaphoreAcquire(params -> semaphore, 0);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fe17 	bl	8004808 <osSemaphoreAcquire>
 8000bda:	60b8      	str	r0, [r7, #8]
		if (result == osOK) {
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f5      	bne.n	8000bce <teamTask+0x12>
			osDelay(pdMS_TO_TICKS(params -> time));
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bea:	fb02 f303 	mul.w	r3, r2, r3
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <teamTask+0x60>)
 8000bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf4:	099b      	lsrs	r3, r3, #6
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fbf4 	bl	80043e4 <osDelay>
			osSemaphoreRelease(params -> semaphore);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 fe67 	bl	80048d4 <osSemaphoreRelease>
			free(params);
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f007 fb82 	bl	8008310 <free>
			params = NULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
			break;
 8000c10:	bf00      	nop
		}
	}
	osThreadExit();
 8000c12:	f003 fbe1 	bl	80043d8 <osThreadExit>
 8000c16:	bf00      	nop
 8000c18:	080095a8 	.word	0x080095a8
 8000c1c:	10624dd3 	.word	0x10624dd3

08000c20 <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;) {
	  int service_num = rand() % TOTAL_SERVICES;
 8000c28:	f007 fcf6 	bl	8008618 <rand>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <StartDefaultTask+0x98>)
 8000c30:	fb83 3102 	smull	r3, r1, r3, r2
 8000c34:	17d3      	asrs	r3, r2, #31
 8000c36:	1ac9      	subs	r1, r1, r3
 8000c38:	460b      	mov	r3, r1
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	440b      	add	r3, r1
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
	  int team_num = rand() % 4 + 1;
 8000c42:	f007 fce9 	bl	8008618 <rand>
 8000c46:	4603      	mov	r3, r0
 8000c48:	425a      	negs	r2, r3
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	f002 0203 	and.w	r2, r2, #3
 8000c52:	bf58      	it	pl
 8000c54:	4253      	negpl	r3, r2
 8000c56:	3301      	adds	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
	  int time_ms = rand() % 10;
 8000c5a:	f007 fcdd 	bl	8008618 <rand>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <StartDefaultTask+0x9c>)
 8000c62:	fb83 1302 	smull	r1, r3, r3, r2
 8000c66:	1099      	asrs	r1, r3, #2
 8000c68:	17d3      	asrs	r3, r2, #31
 8000c6a:	1ac9      	subs	r1, r1, r3
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	440b      	add	r3, r1
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	61fb      	str	r3, [r7, #28]

	  struct request req = {
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	617b      	str	r3, [r7, #20]
			  .service = service_num,
			  .groups = team_num,
			  .task_time = time_ms,
	  };

	  osStatus_t qResult = osMessageQueuePut(dispatcherQueueHandle, &req, 0, 0);
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <StartDefaultTask+0xa0>)
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	f107 010c 	add.w	r1, r7, #12
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f003 fefe 	bl	8004a90 <osMessageQueuePut>
 8000c94:	61b8      	str	r0, [r7, #24]
	  if (qResult == osOK) {
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d107      	bne.n	8000cac <StartDefaultTask+0x8c>
		  printf("Generated\r\n");
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <StartDefaultTask+0xa4>)
 8000c9e:	f007 fc85 	bl	80085ac <puts>
		  osThreadResume(dispatcherHandle);
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <StartDefaultTask+0xa8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 fb62 	bl	8004370 <osThreadResume>
	  } else {
		  // printf("Failed to send dispatcher request\r\n");
	  }
	  osDelay(pdMS_TO_TICKS(DELAY));
 8000cac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cb0:	f003 fb98 	bl	80043e4 <osDelay>
  for (;;) {
 8000cb4:	e7b8      	b.n	8000c28 <StartDefaultTask+0x8>
 8000cb6:	bf00      	nop
 8000cb8:	55555556 	.word	0x55555556
 8000cbc:	66666667 	.word	0x66666667
 8000cc0:	20004ec4 	.word	0x20004ec4
 8000cc4:	080095b0 	.word	0x080095b0
 8000cc8:	20004e78 	.word	0x20004e78

08000ccc <dispatch>:
* @brief Function implementing the dispatcher thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispatch */
void dispatch(void *argument) {
 8000ccc:	b5b0      	push	{r4, r5, r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispatch */
  /* Infinite loop */
	osThreadSuspend(osThreadGetId());
 8000cd4:	f003 fb0c 	bl	80042f0 <osThreadGetId>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f003 fb14 	bl	8004308 <osThreadSuspend>

	struct request req;
	osStatus_t mResult = osOK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
	osStatus_t putResult = osOK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
	for(;;) {
		osStatus_t getResult = osOK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (mResult == osOK && putResult == osOK) {
 8000cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10b      	bne.n	8000d0a <dispatch+0x3e>
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d108      	bne.n	8000d0a <dispatch+0x3e>
			getResult = osMessageQueueGet(dispatcherQueueHandle, &req, NULL, 0);
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <dispatch+0xac>)
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	f107 0120 	add.w	r1, r7, #32
 8000d00:	2300      	movs	r3, #0
 8000d02:	2200      	movs	r2, #0
 8000d04:	f003 ff38 	bl	8004b78 <osMessageQueueGet>
 8000d08:	62f8      	str	r0, [r7, #44]	; 0x2c
		}
		if (getResult == osOK) {
 8000d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1eb      	bne.n	8000ce8 <dispatch+0x1c>
		  service_attr_t serviceData = services[req.service];
 8000d10:	6a3a      	ldr	r2, [r7, #32]
 8000d12:	491a      	ldr	r1, [pc, #104]	; (8000d7c <dispatch+0xb0>)
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	f107 040c 	add.w	r4, r7, #12
 8000d22:	461d      	mov	r5, r3
 8000d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d28:	682b      	ldr	r3, [r5, #0]
 8000d2a:	6023      	str	r3, [r4, #0]
		  mResult = osMutexAcquire(serviceData.mutex, 0);
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fc1f 	bl	8004574 <osMutexAcquire>
 8000d36:	6378      	str	r0, [r7, #52]	; 0x34
		  if (mResult == osOK) {
 8000d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1d4      	bne.n	8000ce8 <dispatch+0x1c>
			  putResult = osMessageQueuePut(serviceData.queue, &req, 0, 0);
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f107 0120 	add.w	r1, r7, #32
 8000d44:	2300      	movs	r3, #0
 8000d46:	2200      	movs	r2, #0
 8000d48:	f003 fea2 	bl	8004a90 <osMessageQueuePut>
 8000d4c:	6338      	str	r0, [r7, #48]	; 0x30
			  if (putResult == osOK) {
 8000d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <dispatch+0x8e>
				  printf("Dispatched\r\n");
 8000d54:	480a      	ldr	r0, [pc, #40]	; (8000d80 <dispatch+0xb4>)
 8000d56:	f007 fc29 	bl	80085ac <puts>
			  }
			  osMutexRelease(serviceData.mutex);
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fc67 	bl	8004630 <osMutexRelease>
			  osThreadResume(serviceData.task);
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 fb03 	bl	8004370 <osThreadResume>
			  osThreadSuspend(osThreadGetId());
 8000d6a:	f003 fac1 	bl	80042f0 <osThreadGetId>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fac9 	bl	8004308 <osThreadSuspend>
	for(;;) {
 8000d76:	e7b7      	b.n	8000ce8 <dispatch+0x1c>
 8000d78:	20004ec4 	.word	0x20004ec4
 8000d7c:	20004e3c 	.word	0x20004e3c
 8000d80:	080095bc 	.word	0x080095bc

08000d84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d96:	f000 fa59 	bl	800124c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40010000 	.word	0x40010000

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <Error_Handler+0x8>
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	210f      	movs	r1, #15
 8000dee:	f06f 0001 	mvn.w	r0, #1
 8000df2:	f000 fb27 	bl	8001444 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0x7c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d128      	bne.n	8000e78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_UART_MspInit+0x80>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <HAL_UART_MspInit+0x80>)
 8000e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_UART_MspInit+0x80>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_UART_MspInit+0x80>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_UART_MspInit+0x80>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_UART_MspInit+0x80>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_UART_MspInit+0x84>)
 8000e74:	f000 fb10 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40004800 	.word	0x40004800
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020c00 	.word	0x40020c00

08000e8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eac:	d141      	bne.n	8000f32 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ec6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ed8:	230a      	movs	r3, #10
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4817      	ldr	r0, [pc, #92]	; (8000f40 <HAL_PCD_MspInit+0xb4>)
 8000ee4:	f000 fad8 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4810      	ldr	r0, [pc, #64]	; (8000f40 <HAL_PCD_MspInit+0xb4>)
 8000efe:	f000 facb 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f06:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6353      	str	r3, [r2, #52]	; 0x34
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_PCD_MspInit+0xb0>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	; 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000

08000f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	2019      	movs	r0, #25
 8000f5a:	f000 fa73 	bl	8001444 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f5e:	2019      	movs	r0, #25
 8000f60:	f000 fa8c 	bl	800147c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_InitTick+0x9c>)
 8000f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f68:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <HAL_InitTick+0x9c>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_InitTick+0x9c>)
 8000f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f7c:	f107 0210 	add.w	r2, r7, #16
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 fa4a 	bl	8002420 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f8c:	f001 fa34 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 8000f90:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <HAL_InitTick+0xa0>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	0c9b      	lsrs	r3, r3, #18
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_InitTick+0xa8>)
 8000fa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fc2:	f001 fe4f 	bl	8002c64 <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d104      	bne.n	8000fd6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fcc:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <HAL_InitTick+0xa4>)
 8000fce:	f001 feab 	bl	8002d28 <HAL_TIM_Base_Start_IT>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	431bde83 	.word	0x431bde83
 8000fe8:	20004ec8 	.word	0x20004ec8
 8000fec:	40010000 	.word	0x40010000

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001022:	f001 fef9 	bl	8002e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20004ec8 	.word	0x20004ec8

08001030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	return 1;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_kill>:

int _kill(int pid, int sig)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800104a:	f007 f92f 	bl	80082ac <__errno>
 800104e:	4603      	mov	r3, r0
 8001050:	2216      	movs	r2, #22
 8001052:	601a      	str	r2, [r3, #0]
	return -1;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <_exit>:

void _exit (int status)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffe7 	bl	8001040 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001072:	e7fe      	b.n	8001072 <_exit+0x12>

08001074 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00a      	b.n	800109c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001086:	f3af 8000 	nop.w
 800108a:	4601      	mov	r1, r0
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	b2ca      	uxtb	r2, r1
 8001094:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf0      	blt.n	8001086 <_read+0x12>
	}

return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e009      	b.n	80010d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa6d 	bl	80005a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf1      	blt.n	80010c0 <_write+0x12>
	}
	return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_close>:

int _close(int file)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
	return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110e:	605a      	str	r2, [r3, #4]
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_isatty>:

int _isatty(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	return 1;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <_sbrk+0x5c>)
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_sbrk+0x60>)
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <_sbrk+0x64>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <_sbrk+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d207      	bcs.n	8001190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001180:	f007 f894 	bl	80082ac <__errno>
 8001184:	4603      	mov	r3, r0
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800118e:	e009      	b.n	80011a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20050000 	.word	0x20050000
 80011b0:	00000400 	.word	0x00000400
 80011b4:	2000009c 	.word	0x2000009c
 80011b8:	20004f68 	.word	0x20004f68

080011bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e6:	490e      	ldr	r1, [pc, #56]	; (8001220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011fc:	4c0b      	ldr	r4, [pc, #44]	; (800122c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800120a:	f7ff ffd7 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120e:	f007 f853 	bl	80082b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff f9db 	bl	80005cc <main>
  bx  lr    
 8001216:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001218:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001224:	080097c0 	.word	0x080097c0
  ldr r2, =_sbss
 8001228:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800122c:	20004f68 	.word	0x20004f68

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>

08001232 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001236:	2003      	movs	r0, #3
 8001238:	f000 f8f9 	bl	800142e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fe81 	bl	8000f44 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001242:	f7ff fdb7 	bl	8000db4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000014 	.word	0x20000014
 8001270:	20004f14 	.word	0x20004f14

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20004f14 	.word	0x20004f14

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000014 	.word	0x20000014

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <__NVIC_SetPriorityGrouping+0x40>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x40>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	05fa0000 	.word	0x05fa0000

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff4c 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001456:	f7ff ff61 	bl	800131c <__NVIC_GetPriorityGrouping>
 800145a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	6978      	ldr	r0, [r7, #20]
 8001462:	f7ff ffb1 	bl	80013c8 <NVIC_EncodePriority>
 8001466:	4602      	mov	r2, r0
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff80 	bl	8001374 <__NVIC_SetPriority>
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff54 	bl	8001338 <__NVIC_EnableIRQ>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	e175      	b.n	80017a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8164 	bne.w	800179e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d00b      	beq.n	80014f6 <HAL_GPIO_Init+0x5e>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ea:	2b11      	cmp	r3, #17
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d130      	bne.n	8001558 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 0201 	and.w	r2, r3, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x100>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b12      	cmp	r3, #18
 8001596:	d123      	bne.n	80015e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	69b9      	ldr	r1, [r7, #24]
 80015dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0203 	and.w	r2, r3, #3
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80be 	beq.w	800179e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b66      	ldr	r3, [pc, #408]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a65      	ldr	r2, [pc, #404]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800163a:	4a61      	ldr	r2, [pc, #388]	; (80017c0 <HAL_GPIO_Init+0x328>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <HAL_GPIO_Init+0x32c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d037      	beq.n	80016d6 <HAL_GPIO_Init+0x23e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_GPIO_Init+0x330>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d031      	beq.n	80016d2 <HAL_GPIO_Init+0x23a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a56      	ldr	r2, [pc, #344]	; (80017cc <HAL_GPIO_Init+0x334>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d02b      	beq.n	80016ce <HAL_GPIO_Init+0x236>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a55      	ldr	r2, [pc, #340]	; (80017d0 <HAL_GPIO_Init+0x338>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d025      	beq.n	80016ca <HAL_GPIO_Init+0x232>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a54      	ldr	r2, [pc, #336]	; (80017d4 <HAL_GPIO_Init+0x33c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01f      	beq.n	80016c6 <HAL_GPIO_Init+0x22e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a53      	ldr	r2, [pc, #332]	; (80017d8 <HAL_GPIO_Init+0x340>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x22a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_GPIO_Init+0x344>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x226>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <HAL_GPIO_Init+0x348>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x222>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a50      	ldr	r2, [pc, #320]	; (80017e4 <HAL_GPIO_Init+0x34c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x21e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4f      	ldr	r2, [pc, #316]	; (80017e8 <HAL_GPIO_Init+0x350>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x21a>
 80016ae:	2309      	movs	r3, #9
 80016b0:	e012      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016b2:	230a      	movs	r3, #10
 80016b4:	e010      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016b6:	2308      	movs	r3, #8
 80016b8:	e00e      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016ba:	2307      	movs	r3, #7
 80016bc:	e00c      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016be:	2306      	movs	r3, #6
 80016c0:	e00a      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e008      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016ca:	2303      	movs	r3, #3
 80016cc:	e004      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016d6:	2300      	movs	r3, #0
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	f002 0203 	and.w	r2, r2, #3
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	4093      	lsls	r3, r2
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016e8:	4935      	ldr	r1, [pc, #212]	; (80017c0 <HAL_GPIO_Init+0x328>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_GPIO_Init+0x354>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800171a:	4a34      	ldr	r2, [pc, #208]	; (80017ec <HAL_GPIO_Init+0x354>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001744:	4a29      	ldr	r2, [pc, #164]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174a:	4b28      	ldr	r3, [pc, #160]	; (80017ec <HAL_GPIO_Init+0x354>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176e:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_GPIO_Init+0x354>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	f67f ae86 	bls.w	80014b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40021400 	.word	0x40021400
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40022000 	.word	0x40022000
 80017e8:	40022400 	.word	0x40022400
 80017ec:	40013c00 	.word	0x40013c00

080017f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800180c:	e003      	b.n	8001816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	041a      	lsls	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	619a      	str	r2, [r3, #24]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001824:	b08f      	sub	sp, #60	; 0x3c
 8001826:	af0a      	add	r7, sp, #40	; 0x28
 8001828:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e116      	b.n	8001a62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fb1c 	bl	8000e8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2203      	movs	r2, #3
 8001858:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f002 f9c4 	bl	8003c00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	687e      	ldr	r6, [r7, #4]
 8001880:	466d      	mov	r5, sp
 8001882:	f106 0410 	add.w	r4, r6, #16
 8001886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001892:	e885 0003 	stmia.w	r5, {r0, r1}
 8001896:	1d33      	adds	r3, r6, #4
 8001898:	cb0e      	ldmia	r3, {r1, r2, r3}
 800189a:	6838      	ldr	r0, [r7, #0]
 800189c:	f002 f958 	bl	8003b50 <USB_CoreInit>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2202      	movs	r2, #2
 80018aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0d7      	b.n	8001a62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 f9b2 	bl	8003c22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e04a      	b.n	800195a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	333d      	adds	r3, #61	; 0x3d
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	333c      	adds	r3, #60	; 0x3c
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	b298      	uxth	r0, r3
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	3342      	adds	r3, #66	; 0x42
 8001900:	4602      	mov	r2, r0
 8001902:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	333f      	adds	r3, #63	; 0x3f
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	3344      	adds	r3, #68	; 0x44
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	3348      	adds	r3, #72	; 0x48
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	3350      	adds	r3, #80	; 0x50
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	3301      	adds	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	d3af      	bcc.n	80018c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e044      	b.n	80019f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	3301      	adds	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3b5      	bcc.n	800196a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	687e      	ldr	r6, [r7, #4]
 8001a06:	466d      	mov	r5, sp
 8001a08:	f106 0410 	add.w	r4, r6, #16
 8001a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a18:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a1c:	1d33      	adds	r3, r6, #4
 8001a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a20:	6838      	ldr	r0, [r7, #0]
 8001a22:	f002 f929 	bl	8003c78 <USB_DevInit>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e014      	b.n	8001a62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f80b 	bl	8001a6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fadb 	bl	8004016 <USB_DevDisconnect>

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001a6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_PCDEx_ActivateLPM+0x44>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	10000003 	.word	0x10000003

08001ab4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e291      	b.n	800200e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8087 	beq.w	8001c06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af8:	4b96      	ldr	r3, [pc, #600]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d00c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b04:	4b93      	ldr	r3, [pc, #588]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d112      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62>
 8001b10:	4b90      	ldr	r3, [pc, #576]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1c:	d10b      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	4b8d      	ldr	r3, [pc, #564]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d06c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x130>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d168      	bne.n	8001c04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e26b      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x7a>
 8001b40:	4b84      	ldr	r3, [pc, #528]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a83      	ldr	r2, [pc, #524]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e02e      	b.n	8001bac <HAL_RCC_OscConfig+0xd8>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x9c>
 8001b56:	4b7f      	ldr	r3, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7e      	ldr	r2, [pc, #504]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b7c      	ldr	r3, [pc, #496]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7b      	ldr	r2, [pc, #492]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e01d      	b.n	8001bac <HAL_RCC_OscConfig+0xd8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0xc0>
 8001b7a:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a75      	ldr	r2, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b73      	ldr	r3, [pc, #460]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a72      	ldr	r2, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xd8>
 8001b94:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6e      	ldr	r2, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6b      	ldr	r2, [pc, #428]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fb5e 	bl	8001274 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fb5a 	bl	8001274 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e21f      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0xe8>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fb4a 	bl	8001274 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fb46 	bl	8001274 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e20b      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	4b57      	ldr	r3, [pc, #348]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x110>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d069      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c12:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1e:	4b4d      	ldr	r3, [pc, #308]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d11c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x190>
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x17a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e1df      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	493d      	ldr	r1, [pc, #244]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	e040      	b.n	8001ce6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d023      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6c:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a38      	ldr	r2, [pc, #224]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fafc 	bl	8001274 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff faf8 	bl	8001274 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1bd      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4929      	ldr	r1, [pc, #164]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
 8001cb2:	e018      	b.n	8001ce6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fad8 	bl	8001274 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fad4 	bl	8001274 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e199      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d038      	beq.n	8001d64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d019      	beq.n	8001d2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfe:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d06:	f7ff fab5 	bl	8001274 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fab1 	bl	8001274 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e176      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x23a>
 8001d2c:	e01a      	b.n	8001d64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fa9b 	bl	8001274 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d42:	f7ff fa97 	bl	8001274 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d903      	bls.n	8001d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e15c      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
 8001d54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	4b91      	ldr	r3, [pc, #580]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ee      	bne.n	8001d42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a4 	beq.w	8001eba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4b8b      	ldr	r3, [pc, #556]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b88      	ldr	r3, [pc, #544]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a87      	ldr	r2, [pc, #540]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b85      	ldr	r3, [pc, #532]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9a:	4b82      	ldr	r3, [pc, #520]	; (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d118      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001da6:	4b7f      	ldr	r3, [pc, #508]	; (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a7e      	ldr	r2, [pc, #504]	; (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db2:	f7ff fa5f 	bl	8001274 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dba:	f7ff fa5b 	bl	8001274 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b64      	cmp	r3, #100	; 0x64
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e120      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dcc:	4b75      	ldr	r3, [pc, #468]	; (8001fa4 <HAL_RCC_OscConfig+0x4d0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x31a>
 8001de0:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a6e      	ldr	r2, [pc, #440]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	e02d      	b.n	8001e4a <HAL_RCC_OscConfig+0x376>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x33c>
 8001df6:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a69      	ldr	r2, [pc, #420]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a66      	ldr	r2, [pc, #408]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0e:	e01c      	b.n	8001e4a <HAL_RCC_OscConfig+0x376>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCC_OscConfig+0x35e>
 8001e18:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a60      	ldr	r2, [pc, #384]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	4a5d      	ldr	r2, [pc, #372]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e30:	e00b      	b.n	8001e4a <HAL_RCC_OscConfig+0x376>
 8001e32:	4b5b      	ldr	r3, [pc, #364]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a5a      	ldr	r2, [pc, #360]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a57      	ldr	r2, [pc, #348]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d015      	beq.n	8001e7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7ff fa0f 	bl	8001274 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7ff fa0b 	bl	8001274 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e0ce      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ee      	beq.n	8001e5a <HAL_RCC_OscConfig+0x386>
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f9f9 	bl	8001274 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff f9f5 	bl	8001274 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0b8      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9c:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a3b      	ldr	r2, [pc, #236]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80a4 	beq.w	800200c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d06b      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d149      	bne.n	8001f6c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a30      	ldr	r2, [pc, #192]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f9c6 	bl	8001274 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff f9c2 	bl	8001274 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e087      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f36:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff f996 	bl	8001274 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff f992 	bl	8001274 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e057      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x478>
 8001f6a:	e04f      	b.n	800200c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff f97c 	bl	8001274 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff f978 	bl	8001274 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e03d      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x4ac>
 8001f9e:	e035      	b.n	800200c <HAL_RCC_OscConfig+0x538>
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x544>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d028      	beq.n	8002008 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d121      	bne.n	8002008 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d11a      	bne.n	8002008 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fd8:	4013      	ands	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d111      	bne.n	8002008 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0d0      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 020f 	bic.w	r2, r3, #15
 800204a:	4965      	ldr	r1, [pc, #404]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b8      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002086:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800209a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800209e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	494d      	ldr	r1, [pc, #308]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d040      	beq.n	8002140 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d115      	bne.n	80020fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e073      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06b      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f023 0203 	bic.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4936      	ldr	r1, [pc, #216]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	4313      	orrs	r3, r2
 800210e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002110:	f7ff f8b0 	bl	8001274 <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	e00a      	b.n	800212e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7ff f8ac 	bl	8001274 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e053      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 020c 	and.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	429a      	cmp	r2, r3
 800213e:	d1eb      	bne.n	8002118 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d210      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 020f 	bic.w	r2, r3, #15
 8002156:	4922      	ldr	r1, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e032      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ae:	f000 f821 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1cc>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1d0>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1d4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe feb8 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00
 80021e4:	40023800 	.word	0x40023800
 80021e8:	0800964c 	.word	0x0800964c
 80021ec:	2000000c 	.word	0x2000000c
 80021f0:	20000010 	.word	0x20000010

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	2300      	movs	r3, #0
 8002206:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800220c:	4b67      	ldr	r3, [pc, #412]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d00d      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x40>
 8002218:	2b08      	cmp	r3, #8
 800221a:	f200 80bd 	bhi.w	8002398 <HAL_RCC_GetSysClockFreq+0x1a4>
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x34>
 8002222:	2b04      	cmp	r3, #4
 8002224:	d003      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x3a>
 8002226:	e0b7      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b61      	ldr	r3, [pc, #388]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800222a:	60bb      	str	r3, [r7, #8]
      break;
 800222c:	e0b7      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800222e:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002230:	60bb      	str	r3, [r7, #8]
      break;
 8002232:	e0b4      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002234:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800223c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800223e:	4b5b      	ldr	r3, [pc, #364]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d04d      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224a:	4b58      	ldr	r3, [pc, #352]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	099b      	lsrs	r3, r3, #6
 8002250:	461a      	mov	r2, r3
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	f240 10ff 	movw	r0, #511	; 0x1ff
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	ea02 0800 	and.w	r8, r2, r0
 8002262:	ea03 0901 	and.w	r9, r3, r1
 8002266:	4640      	mov	r0, r8
 8002268:	4649      	mov	r1, r9
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	014b      	lsls	r3, r1, #5
 8002274:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002278:	0142      	lsls	r2, r0, #5
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	ebb0 0008 	subs.w	r0, r0, r8
 8002282:	eb61 0109 	sbc.w	r1, r1, r9
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	018b      	lsls	r3, r1, #6
 8002290:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002294:	0182      	lsls	r2, r0, #6
 8002296:	1a12      	subs	r2, r2, r0
 8002298:	eb63 0301 	sbc.w	r3, r3, r1
 800229c:	f04f 0000 	mov.w	r0, #0
 80022a0:	f04f 0100 	mov.w	r1, #0
 80022a4:	00d9      	lsls	r1, r3, #3
 80022a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022aa:	00d0      	lsls	r0, r2, #3
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	eb12 0208 	adds.w	r2, r2, r8
 80022b4:	eb43 0309 	adc.w	r3, r3, r9
 80022b8:	f04f 0000 	mov.w	r0, #0
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	0259      	lsls	r1, r3, #9
 80022c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022c6:	0250      	lsls	r0, r2, #9
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	f7fd ffea 	bl	80002b0 <__aeabi_uldivmod>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4613      	mov	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e04a      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e6:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	099b      	lsrs	r3, r3, #6
 80022ec:	461a      	mov	r2, r3
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	ea02 0400 	and.w	r4, r2, r0
 80022fe:	ea03 0501 	and.w	r5, r3, r1
 8002302:	4620      	mov	r0, r4
 8002304:	4629      	mov	r1, r5
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	014b      	lsls	r3, r1, #5
 8002310:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002314:	0142      	lsls	r2, r0, #5
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	1b00      	subs	r0, r0, r4
 800231c:	eb61 0105 	sbc.w	r1, r1, r5
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	018b      	lsls	r3, r1, #6
 800232a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800232e:	0182      	lsls	r2, r0, #6
 8002330:	1a12      	subs	r2, r2, r0
 8002332:	eb63 0301 	sbc.w	r3, r3, r1
 8002336:	f04f 0000 	mov.w	r0, #0
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	00d9      	lsls	r1, r3, #3
 8002340:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002344:	00d0      	lsls	r0, r2, #3
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	1912      	adds	r2, r2, r4
 800234c:	eb45 0303 	adc.w	r3, r5, r3
 8002350:	f04f 0000 	mov.w	r0, #0
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	0299      	lsls	r1, r3, #10
 800235a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800235e:	0290      	lsls	r0, r2, #10
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	461a      	mov	r2, r3
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uldivmod>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4613      	mov	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	3301      	adds	r3, #1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	fbb2 f3f3 	udiv	r3, r2, r3
 8002394:	60bb      	str	r3, [r7, #8]
      break;
 8002396:	e002      	b.n	800239e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800239a:	60bb      	str	r3, [r7, #8]
      break;
 800239c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239e:	68bb      	ldr	r3, [r7, #8]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	007a1200 	.word	0x007a1200

080023b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_RCC_GetHCLKFreq+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	2000000c 	.word	0x2000000c

080023d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d4:	f7ff fff0 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0a9b      	lsrs	r3, r3, #10
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4903      	ldr	r1, [pc, #12]	; (80023f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	0800965c 	.word	0x0800965c

080023f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023fc:	f7ff ffdc 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0b5b      	lsrs	r3, r3, #13
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4903      	ldr	r1, [pc, #12]	; (800241c <HAL_RCC_GetPCLK2Freq+0x24>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	0800965c 	.word	0x0800965c

08002420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	220f      	movs	r2, #15
 800242e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_RCC_GetClockConfig+0x5c>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0203 	and.w	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_RCC_GetClockConfig+0x5c>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_RCC_GetClockConfig+0x5c>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_GetClockConfig+0x5c>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	08db      	lsrs	r3, r3, #3
 800245a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCC_GetClockConfig+0x60>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 020f 	and.w	r2, r3, #15
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	601a      	str	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40023c00 	.word	0x40023c00

08002484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024ac:	4b69      	ldr	r3, [pc, #420]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a68      	ldr	r2, [pc, #416]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024b6:	6093      	str	r3, [r2, #8]
 80024b8:	4b66      	ldr	r3, [pc, #408]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	4964      	ldr	r1, [pc, #400]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d017      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	4959      	ldr	r1, [pc, #356]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fc:	d101      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800250a:	2301      	movs	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d017      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800251a:	4b4e      	ldr	r3, [pc, #312]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	494a      	ldr	r1, [pc, #296]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d101      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800253a:	2301      	movs	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 808b 	beq.w	800267e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a39      	ldr	r2, [pc, #228]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
 8002574:	4b37      	ldr	r3, [pc, #220]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002580:	4b35      	ldr	r3, [pc, #212]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a34      	ldr	r2, [pc, #208]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258c:	f7fe fe72 	bl	8001274 <HAL_GetTick>
 8002590:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7fe fe6e 	bl	8001274 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e357      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025a6:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d035      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d02e      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025f2:	4a18      	ldr	r2, [pc, #96]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d114      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fe36 	bl	8001274 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7fe fe32 	bl	8001274 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e319      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0ee      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800263a:	d111      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800264a:	400b      	ands	r3, r1
 800264c:	4901      	ldr	r1, [pc, #4]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
 8002652:	e00b      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000
 800265c:	0ffffcff 	.word	0x0ffffcff
 8002660:	4bb1      	ldr	r3, [pc, #708]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4ab0      	ldr	r2, [pc, #704]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002666:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800266a:	6093      	str	r3, [r2, #8]
 800266c:	4bae      	ldr	r3, [pc, #696]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800266e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	49ab      	ldr	r1, [pc, #684]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800268a:	4ba7      	ldr	r3, [pc, #668]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002690:	4aa5      	ldr	r2, [pc, #660]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002696:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800269a:	4ba3      	ldr	r3, [pc, #652]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800269c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	49a0      	ldr	r1, [pc, #640]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b8:	4b9b      	ldr	r3, [pc, #620]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c6:	4998      	ldr	r1, [pc, #608]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026da:	4b93      	ldr	r3, [pc, #588]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026e8:	498f      	ldr	r1, [pc, #572]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fc:	4b8a      	ldr	r3, [pc, #552]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800270a:	4987      	ldr	r1, [pc, #540]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800271e:	4b82      	ldr	r3, [pc, #520]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	497e      	ldr	r1, [pc, #504]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002740:	4b79      	ldr	r3, [pc, #484]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4976      	ldr	r1, [pc, #472]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002762:	4b71      	ldr	r3, [pc, #452]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f023 020c 	bic.w	r2, r3, #12
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	496d      	ldr	r1, [pc, #436]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002784:	4b68      	ldr	r3, [pc, #416]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4965      	ldr	r1, [pc, #404]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a6:	4b60      	ldr	r3, [pc, #384]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b4:	495c      	ldr	r1, [pc, #368]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027c8:	4b57      	ldr	r3, [pc, #348]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	4954      	ldr	r1, [pc, #336]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027ea:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	494b      	ldr	r1, [pc, #300]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800280c:	4b46      	ldr	r3, [pc, #280]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	4943      	ldr	r1, [pc, #268]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800282e:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	493a      	ldr	r1, [pc, #232]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002850:	4b35      	ldr	r3, [pc, #212]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285e:	4932      	ldr	r1, [pc, #200]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d011      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002878:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002880:	4929      	ldr	r1, [pc, #164]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002890:	d101      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002892:	2301      	movs	r3, #1
 8002894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	4919      	ldr	r1, [pc, #100]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e4:	4910      	ldr	r1, [pc, #64]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d006      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80d9 	beq.w	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a08      	ldr	r2, [pc, #32]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002906:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800290a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290c:	f7fe fcb2 	bl	8001274 <HAL_GetTick>
 8002910:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002912:	e00b      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002914:	f7fe fcae 	bl	8001274 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d904      	bls.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e197      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800292c:	4b6c      	ldr	r3, [pc, #432]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ed      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d021      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11d      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800294c:	4b64      	ldr	r3, [pc, #400]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800294e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002952:	0c1b      	lsrs	r3, r3, #16
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800295a:	4b61      	ldr	r3, [pc, #388]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002960:	0e1b      	lsrs	r3, r3, #24
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	019a      	lsls	r2, r3, #6
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	431a      	orrs	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	061b      	lsls	r3, r3, #24
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	071b      	lsls	r3, r3, #28
 8002980:	4957      	ldr	r1, [pc, #348]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d02e      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b2:	d129      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029b4:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ba:	0c1b      	lsrs	r3, r3, #16
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c8:	0f1b      	lsrs	r3, r3, #28
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	019a      	lsls	r2, r3, #6
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	071b      	lsls	r3, r3, #28
 80029e8:	493d      	ldr	r1, [pc, #244]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029f0:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f6:	f023 021f 	bic.w	r2, r3, #31
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	3b01      	subs	r3, #1
 8002a00:	4937      	ldr	r1, [pc, #220]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01d      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a14:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1a:	0e1b      	lsrs	r3, r3, #24
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a22:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a28:	0f1b      	lsrs	r3, r3, #28
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	019a      	lsls	r2, r3, #6
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	431a      	orrs	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	071b      	lsls	r3, r3, #28
 8002a48:	4925      	ldr	r1, [pc, #148]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d011      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	019a      	lsls	r2, r3, #6
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	061b      	lsls	r3, r3, #24
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	071b      	lsls	r3, r3, #28
 8002a78:	4919      	ldr	r1, [pc, #100]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fbf2 	bl	8001274 <HAL_GetTick>
 8002a90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a94:	f7fe fbee 	bl	8001274 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0d7      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	f040 80cd 	bne.w	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac6:	f7fe fbd5 	bl	8001274 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ace:	f7fe fbd1 	bl	8001274 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	; 0x64
 8002ada:	d903      	bls.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0ba      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ae0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ae4:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af0:	d0ed      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d02e      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d12a      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b1a:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b28:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	0f1b      	lsrs	r3, r3, #28
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	019a      	lsls	r2, r3, #6
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	4944      	ldr	r1, [pc, #272]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b56:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	493d      	ldr	r1, [pc, #244]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d022      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b84:	d11d      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b86:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	0e1b      	lsrs	r3, r3, #24
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	0f1b      	lsrs	r3, r3, #28
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	019a      	lsls	r2, r3, #6
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	061b      	lsls	r3, r3, #24
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	071b      	lsls	r3, r3, #28
 8002bba:	4929      	ldr	r1, [pc, #164]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d028      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	0e1b      	lsrs	r3, r3, #24
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	0c1b      	lsrs	r3, r3, #16
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	019a      	lsls	r2, r3, #6
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	041b      	lsls	r3, r3, #16
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	071b      	lsls	r3, r3, #28
 8002c02:	4917      	ldr	r1, [pc, #92]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	4911      	ldr	r1, [pc, #68]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fb22 	bl	8001274 <HAL_GetTick>
 8002c30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c34:	f7fe fb1e 	bl	8001274 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e007      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c52:	d1ef      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e049      	b.n	8002d0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f841 	bl	8002d12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f000 fa00 	bl	80030a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d001      	beq.n	8002d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e054      	b.n	8002dea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d022      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x80>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6a:	d01d      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x80>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a22      	ldr	r2, [pc, #136]	; (8002dfc <HAL_TIM_Base_Start_IT+0xd4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d018      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x80>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a21      	ldr	r2, [pc, #132]	; (8002e00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x80>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1f      	ldr	r2, [pc, #124]	; (8002e04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00e      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x80>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <HAL_TIM_Base_Start_IT+0xe0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d009      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x80>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <HAL_TIM_Base_Start_IT+0xe4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x80>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <HAL_TIM_Base_Start_IT+0xe8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d115      	bne.n	8002dd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_TIM_Base_Start_IT+0xec>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d015      	beq.n	8002de6 <HAL_TIM_Base_Start_IT+0xbe>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d011      	beq.n	8002de6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd2:	e008      	b.n	8002de6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e000      	b.n	8002de8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40010400 	.word	0x40010400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40001800 	.word	0x40001800
 8002e14:	00010007 	.word	0x00010007

08002e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0202 	mvn.w	r2, #2
 8002e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f905 	bl	800306a <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f8f7 	bl	8003056 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f908 	bl	800307e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d122      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0204 	mvn.w	r2, #4
 8002e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f8db 	bl	800306a <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f8cd 	bl	8003056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f8de 	bl	800307e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d122      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d11b      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0208 	mvn.w	r2, #8
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8b1 	bl	800306a <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8a3 	bl	8003056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f8b4 	bl	800307e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d122      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d11b      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0210 	mvn.w	r2, #16
 8002f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2208      	movs	r2, #8
 8002f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f887 	bl	800306a <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e005      	b.n	8002f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f879 	bl	8003056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f88a 	bl	800307e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d10e      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d107      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0201 	mvn.w	r2, #1
 8002f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fef4 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b80      	cmp	r3, #128	; 0x80
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb4:	2b80      	cmp	r3, #128	; 0x80
 8002fb6:	d107      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f91a 	bl	80031fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d107      	bne.n	8002ff6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f90d 	bl	8003210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d10e      	bne.n	8003022 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d107      	bne.n	8003022 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800301a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f838 	bl	8003092 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b20      	cmp	r3, #32
 800302e:	d10e      	bne.n	800304e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b20      	cmp	r3, #32
 800303c:	d107      	bne.n	800304e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f06f 0220 	mvn.w	r2, #32
 8003046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8cd 	bl	80031e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a40      	ldr	r2, [pc, #256]	; (80031bc <TIM_Base_SetConfig+0x114>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <TIM_Base_SetConfig+0x40>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c6:	d00f      	beq.n	80030e8 <TIM_Base_SetConfig+0x40>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3d      	ldr	r2, [pc, #244]	; (80031c0 <TIM_Base_SetConfig+0x118>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00b      	beq.n	80030e8 <TIM_Base_SetConfig+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a3c      	ldr	r2, [pc, #240]	; (80031c4 <TIM_Base_SetConfig+0x11c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <TIM_Base_SetConfig+0x40>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3b      	ldr	r2, [pc, #236]	; (80031c8 <TIM_Base_SetConfig+0x120>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_Base_SetConfig+0x40>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a3a      	ldr	r2, [pc, #232]	; (80031cc <TIM_Base_SetConfig+0x124>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d108      	bne.n	80030fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2f      	ldr	r2, [pc, #188]	; (80031bc <TIM_Base_SetConfig+0x114>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d02b      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d027      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2c      	ldr	r2, [pc, #176]	; (80031c0 <TIM_Base_SetConfig+0x118>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d023      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a2b      	ldr	r2, [pc, #172]	; (80031c4 <TIM_Base_SetConfig+0x11c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01f      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2a      	ldr	r2, [pc, #168]	; (80031c8 <TIM_Base_SetConfig+0x120>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01b      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a29      	ldr	r2, [pc, #164]	; (80031cc <TIM_Base_SetConfig+0x124>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d017      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <TIM_Base_SetConfig+0x128>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <TIM_Base_SetConfig+0x12c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00f      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <TIM_Base_SetConfig+0x130>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00b      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a25      	ldr	r2, [pc, #148]	; (80031dc <TIM_Base_SetConfig+0x134>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d007      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <TIM_Base_SetConfig+0x138>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d003      	beq.n	800315a <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <TIM_Base_SetConfig+0x13c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d108      	bne.n	800316c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <TIM_Base_SetConfig+0x114>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d003      	beq.n	80031a0 <TIM_Base_SetConfig+0xf8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <TIM_Base_SetConfig+0x124>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d103      	bne.n	80031a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	615a      	str	r2, [r3, #20]
}
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40000800 	.word	0x40000800
 80031c8:	40000c00 	.word	0x40000c00
 80031cc:	40010400 	.word	0x40010400
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40014400 	.word	0x40014400
 80031d8:	40014800 	.word	0x40014800
 80031dc:	40001800 	.word	0x40001800
 80031e0:	40001c00 	.word	0x40001c00
 80031e4:	40002000 	.word	0x40002000

080031e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e040      	b.n	80032b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fddc 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	; 0x24
 8003250:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8c0 	bl	80033e8 <UART_SetConfig>
 8003268:	4603      	mov	r3, r0
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e022      	b.n	80032b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fb16 	bl	80038ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800328e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800329e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fb9d 	bl	80039f0 <UART_CheckIdleState>
 80032b6:	4603      	mov	r3, r0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	f040 8081 	bne.w	80033dc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_UART_Transmit+0x26>
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e079      	b.n	80033de <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_UART_Transmit+0x38>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e072      	b.n	80033de <HAL_UART_Transmit+0x11e>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2221      	movs	r2, #33	; 0x21
 800330c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330e:	f7fd ffb1 	bl	8001274 <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332c:	d108      	bne.n	8003340 <HAL_UART_Transmit+0x80>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e003      	b.n	8003348 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003350:	e02c      	b.n	80033ac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2200      	movs	r2, #0
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fb7a 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e038      	b.n	80033de <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10b      	bne.n	800338a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003380:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	3302      	adds	r3, #2
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	e007      	b.n	800339a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	3301      	adds	r3, #1
 8003398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1cc      	bne.n	8003352 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2200      	movs	r2, #0
 80033c0:	2140      	movs	r1, #64	; 0x40
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 fb47 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e005      	b.n	80033de <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4ba7      	ldr	r3, [pc, #668]	; (80036b0 <UART_SetConfig+0x2c8>)
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	6979      	ldr	r1, [r7, #20]
 800341c:	430b      	orrs	r3, r1
 800341e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a95      	ldr	r2, [pc, #596]	; (80036b4 <UART_SetConfig+0x2cc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d120      	bne.n	80034a6 <UART_SetConfig+0xbe>
 8003464:	4b94      	ldr	r3, [pc, #592]	; (80036b8 <UART_SetConfig+0x2d0>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b03      	cmp	r3, #3
 8003470:	d816      	bhi.n	80034a0 <UART_SetConfig+0xb8>
 8003472:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <UART_SetConfig+0x90>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	08003489 	.word	0x08003489
 800347c:	08003495 	.word	0x08003495
 8003480:	0800348f 	.word	0x0800348f
 8003484:	0800349b 	.word	0x0800349b
 8003488:	2301      	movs	r3, #1
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e14f      	b.n	800372e <UART_SetConfig+0x346>
 800348e:	2302      	movs	r3, #2
 8003490:	77fb      	strb	r3, [r7, #31]
 8003492:	e14c      	b.n	800372e <UART_SetConfig+0x346>
 8003494:	2304      	movs	r3, #4
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e149      	b.n	800372e <UART_SetConfig+0x346>
 800349a:	2308      	movs	r3, #8
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e146      	b.n	800372e <UART_SetConfig+0x346>
 80034a0:	2310      	movs	r3, #16
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e143      	b.n	800372e <UART_SetConfig+0x346>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a84      	ldr	r2, [pc, #528]	; (80036bc <UART_SetConfig+0x2d4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d132      	bne.n	8003516 <UART_SetConfig+0x12e>
 80034b0:	4b81      	ldr	r3, [pc, #516]	; (80036b8 <UART_SetConfig+0x2d0>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b0c      	cmp	r3, #12
 80034bc:	d828      	bhi.n	8003510 <UART_SetConfig+0x128>
 80034be:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <UART_SetConfig+0xdc>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	08003511 	.word	0x08003511
 80034cc:	08003511 	.word	0x08003511
 80034d0:	08003511 	.word	0x08003511
 80034d4:	08003505 	.word	0x08003505
 80034d8:	08003511 	.word	0x08003511
 80034dc:	08003511 	.word	0x08003511
 80034e0:	08003511 	.word	0x08003511
 80034e4:	080034ff 	.word	0x080034ff
 80034e8:	08003511 	.word	0x08003511
 80034ec:	08003511 	.word	0x08003511
 80034f0:	08003511 	.word	0x08003511
 80034f4:	0800350b 	.word	0x0800350b
 80034f8:	2300      	movs	r3, #0
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e117      	b.n	800372e <UART_SetConfig+0x346>
 80034fe:	2302      	movs	r3, #2
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e114      	b.n	800372e <UART_SetConfig+0x346>
 8003504:	2304      	movs	r3, #4
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e111      	b.n	800372e <UART_SetConfig+0x346>
 800350a:	2308      	movs	r3, #8
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e10e      	b.n	800372e <UART_SetConfig+0x346>
 8003510:	2310      	movs	r3, #16
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e10b      	b.n	800372e <UART_SetConfig+0x346>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a69      	ldr	r2, [pc, #420]	; (80036c0 <UART_SetConfig+0x2d8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d120      	bne.n	8003562 <UART_SetConfig+0x17a>
 8003520:	4b65      	ldr	r3, [pc, #404]	; (80036b8 <UART_SetConfig+0x2d0>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800352a:	2b30      	cmp	r3, #48	; 0x30
 800352c:	d013      	beq.n	8003556 <UART_SetConfig+0x16e>
 800352e:	2b30      	cmp	r3, #48	; 0x30
 8003530:	d814      	bhi.n	800355c <UART_SetConfig+0x174>
 8003532:	2b20      	cmp	r3, #32
 8003534:	d009      	beq.n	800354a <UART_SetConfig+0x162>
 8003536:	2b20      	cmp	r3, #32
 8003538:	d810      	bhi.n	800355c <UART_SetConfig+0x174>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <UART_SetConfig+0x15c>
 800353e:	2b10      	cmp	r3, #16
 8003540:	d006      	beq.n	8003550 <UART_SetConfig+0x168>
 8003542:	e00b      	b.n	800355c <UART_SetConfig+0x174>
 8003544:	2300      	movs	r3, #0
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e0f1      	b.n	800372e <UART_SetConfig+0x346>
 800354a:	2302      	movs	r3, #2
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e0ee      	b.n	800372e <UART_SetConfig+0x346>
 8003550:	2304      	movs	r3, #4
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e0eb      	b.n	800372e <UART_SetConfig+0x346>
 8003556:	2308      	movs	r3, #8
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e0e8      	b.n	800372e <UART_SetConfig+0x346>
 800355c:	2310      	movs	r3, #16
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e0e5      	b.n	800372e <UART_SetConfig+0x346>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a57      	ldr	r2, [pc, #348]	; (80036c4 <UART_SetConfig+0x2dc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d120      	bne.n	80035ae <UART_SetConfig+0x1c6>
 800356c:	4b52      	ldr	r3, [pc, #328]	; (80036b8 <UART_SetConfig+0x2d0>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003576:	2bc0      	cmp	r3, #192	; 0xc0
 8003578:	d013      	beq.n	80035a2 <UART_SetConfig+0x1ba>
 800357a:	2bc0      	cmp	r3, #192	; 0xc0
 800357c:	d814      	bhi.n	80035a8 <UART_SetConfig+0x1c0>
 800357e:	2b80      	cmp	r3, #128	; 0x80
 8003580:	d009      	beq.n	8003596 <UART_SetConfig+0x1ae>
 8003582:	2b80      	cmp	r3, #128	; 0x80
 8003584:	d810      	bhi.n	80035a8 <UART_SetConfig+0x1c0>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <UART_SetConfig+0x1a8>
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d006      	beq.n	800359c <UART_SetConfig+0x1b4>
 800358e:	e00b      	b.n	80035a8 <UART_SetConfig+0x1c0>
 8003590:	2300      	movs	r3, #0
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e0cb      	b.n	800372e <UART_SetConfig+0x346>
 8003596:	2302      	movs	r3, #2
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e0c8      	b.n	800372e <UART_SetConfig+0x346>
 800359c:	2304      	movs	r3, #4
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e0c5      	b.n	800372e <UART_SetConfig+0x346>
 80035a2:	2308      	movs	r3, #8
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e0c2      	b.n	800372e <UART_SetConfig+0x346>
 80035a8:	2310      	movs	r3, #16
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e0bf      	b.n	800372e <UART_SetConfig+0x346>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a45      	ldr	r2, [pc, #276]	; (80036c8 <UART_SetConfig+0x2e0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d125      	bne.n	8003604 <UART_SetConfig+0x21c>
 80035b8:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <UART_SetConfig+0x2d0>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035c6:	d017      	beq.n	80035f8 <UART_SetConfig+0x210>
 80035c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035cc:	d817      	bhi.n	80035fe <UART_SetConfig+0x216>
 80035ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d2:	d00b      	beq.n	80035ec <UART_SetConfig+0x204>
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	d811      	bhi.n	80035fe <UART_SetConfig+0x216>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <UART_SetConfig+0x1fe>
 80035de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e2:	d006      	beq.n	80035f2 <UART_SetConfig+0x20a>
 80035e4:	e00b      	b.n	80035fe <UART_SetConfig+0x216>
 80035e6:	2300      	movs	r3, #0
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e0a0      	b.n	800372e <UART_SetConfig+0x346>
 80035ec:	2302      	movs	r3, #2
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e09d      	b.n	800372e <UART_SetConfig+0x346>
 80035f2:	2304      	movs	r3, #4
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e09a      	b.n	800372e <UART_SetConfig+0x346>
 80035f8:	2308      	movs	r3, #8
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e097      	b.n	800372e <UART_SetConfig+0x346>
 80035fe:	2310      	movs	r3, #16
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e094      	b.n	800372e <UART_SetConfig+0x346>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a30      	ldr	r2, [pc, #192]	; (80036cc <UART_SetConfig+0x2e4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d125      	bne.n	800365a <UART_SetConfig+0x272>
 800360e:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <UART_SetConfig+0x2d0>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003618:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800361c:	d017      	beq.n	800364e <UART_SetConfig+0x266>
 800361e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003622:	d817      	bhi.n	8003654 <UART_SetConfig+0x26c>
 8003624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003628:	d00b      	beq.n	8003642 <UART_SetConfig+0x25a>
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362e:	d811      	bhi.n	8003654 <UART_SetConfig+0x26c>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <UART_SetConfig+0x254>
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003638:	d006      	beq.n	8003648 <UART_SetConfig+0x260>
 800363a:	e00b      	b.n	8003654 <UART_SetConfig+0x26c>
 800363c:	2301      	movs	r3, #1
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e075      	b.n	800372e <UART_SetConfig+0x346>
 8003642:	2302      	movs	r3, #2
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e072      	b.n	800372e <UART_SetConfig+0x346>
 8003648:	2304      	movs	r3, #4
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e06f      	b.n	800372e <UART_SetConfig+0x346>
 800364e:	2308      	movs	r3, #8
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e06c      	b.n	800372e <UART_SetConfig+0x346>
 8003654:	2310      	movs	r3, #16
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e069      	b.n	800372e <UART_SetConfig+0x346>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <UART_SetConfig+0x2e8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d137      	bne.n	80036d4 <UART_SetConfig+0x2ec>
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <UART_SetConfig+0x2d0>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800366e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003672:	d017      	beq.n	80036a4 <UART_SetConfig+0x2bc>
 8003674:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003678:	d817      	bhi.n	80036aa <UART_SetConfig+0x2c2>
 800367a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367e:	d00b      	beq.n	8003698 <UART_SetConfig+0x2b0>
 8003680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003684:	d811      	bhi.n	80036aa <UART_SetConfig+0x2c2>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <UART_SetConfig+0x2aa>
 800368a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368e:	d006      	beq.n	800369e <UART_SetConfig+0x2b6>
 8003690:	e00b      	b.n	80036aa <UART_SetConfig+0x2c2>
 8003692:	2300      	movs	r3, #0
 8003694:	77fb      	strb	r3, [r7, #31]
 8003696:	e04a      	b.n	800372e <UART_SetConfig+0x346>
 8003698:	2302      	movs	r3, #2
 800369a:	77fb      	strb	r3, [r7, #31]
 800369c:	e047      	b.n	800372e <UART_SetConfig+0x346>
 800369e:	2304      	movs	r3, #4
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e044      	b.n	800372e <UART_SetConfig+0x346>
 80036a4:	2308      	movs	r3, #8
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	e041      	b.n	800372e <UART_SetConfig+0x346>
 80036aa:	2310      	movs	r3, #16
 80036ac:	77fb      	strb	r3, [r7, #31]
 80036ae:	e03e      	b.n	800372e <UART_SetConfig+0x346>
 80036b0:	efff69f3 	.word	0xefff69f3
 80036b4:	40011000 	.word	0x40011000
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40004400 	.word	0x40004400
 80036c0:	40004800 	.word	0x40004800
 80036c4:	40004c00 	.word	0x40004c00
 80036c8:	40005000 	.word	0x40005000
 80036cc:	40011400 	.word	0x40011400
 80036d0:	40007800 	.word	0x40007800
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a71      	ldr	r2, [pc, #452]	; (80038a0 <UART_SetConfig+0x4b8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d125      	bne.n	800372a <UART_SetConfig+0x342>
 80036de:	4b71      	ldr	r3, [pc, #452]	; (80038a4 <UART_SetConfig+0x4bc>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036ec:	d017      	beq.n	800371e <UART_SetConfig+0x336>
 80036ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036f2:	d817      	bhi.n	8003724 <UART_SetConfig+0x33c>
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f8:	d00b      	beq.n	8003712 <UART_SetConfig+0x32a>
 80036fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fe:	d811      	bhi.n	8003724 <UART_SetConfig+0x33c>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <UART_SetConfig+0x324>
 8003704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003708:	d006      	beq.n	8003718 <UART_SetConfig+0x330>
 800370a:	e00b      	b.n	8003724 <UART_SetConfig+0x33c>
 800370c:	2300      	movs	r3, #0
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e00d      	b.n	800372e <UART_SetConfig+0x346>
 8003712:	2302      	movs	r3, #2
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e00a      	b.n	800372e <UART_SetConfig+0x346>
 8003718:	2304      	movs	r3, #4
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e007      	b.n	800372e <UART_SetConfig+0x346>
 800371e:	2308      	movs	r3, #8
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e004      	b.n	800372e <UART_SetConfig+0x346>
 8003724:	2310      	movs	r3, #16
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e001      	b.n	800372e <UART_SetConfig+0x346>
 800372a:	2310      	movs	r3, #16
 800372c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003736:	d15b      	bne.n	80037f0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003738:	7ffb      	ldrb	r3, [r7, #31]
 800373a:	2b08      	cmp	r3, #8
 800373c:	d827      	bhi.n	800378e <UART_SetConfig+0x3a6>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0x35c>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003769 	.word	0x08003769
 8003748:	08003771 	.word	0x08003771
 800374c:	08003779 	.word	0x08003779
 8003750:	0800378f 	.word	0x0800378f
 8003754:	0800377f 	.word	0x0800377f
 8003758:	0800378f 	.word	0x0800378f
 800375c:	0800378f 	.word	0x0800378f
 8003760:	0800378f 	.word	0x0800378f
 8003764:	08003787 	.word	0x08003787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7fe fe32 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 800376c:	61b8      	str	r0, [r7, #24]
        break;
 800376e:	e013      	b.n	8003798 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7fe fe42 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 8003774:	61b8      	str	r0, [r7, #24]
        break;
 8003776:	e00f      	b.n	8003798 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <UART_SetConfig+0x4c0>)
 800377a:	61bb      	str	r3, [r7, #24]
        break;
 800377c:	e00c      	b.n	8003798 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377e:	f7fe fd39 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8003782:	61b8      	str	r0, [r7, #24]
        break;
 8003784:	e008      	b.n	8003798 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378a:	61bb      	str	r3, [r7, #24]
        break;
 800378c:	e004      	b.n	8003798 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	77bb      	strb	r3, [r7, #30]
        break;
 8003796:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d074      	beq.n	8003888 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	005a      	lsls	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	441a      	add	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d916      	bls.n	80037ea <UART_SetConfig+0x402>
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d212      	bcs.n	80037ea <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f023 030f 	bic.w	r3, r3, #15
 80037cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	b29a      	uxth	r2, r3
 80037da:	89fb      	ldrh	r3, [r7, #14]
 80037dc:	4313      	orrs	r3, r2
 80037de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	89fa      	ldrh	r2, [r7, #14]
 80037e6:	60da      	str	r2, [r3, #12]
 80037e8:	e04e      	b.n	8003888 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	77bb      	strb	r3, [r7, #30]
 80037ee:	e04b      	b.n	8003888 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f0:	7ffb      	ldrb	r3, [r7, #31]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d827      	bhi.n	8003846 <UART_SetConfig+0x45e>
 80037f6:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0x414>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	08003821 	.word	0x08003821
 8003800:	08003829 	.word	0x08003829
 8003804:	08003831 	.word	0x08003831
 8003808:	08003847 	.word	0x08003847
 800380c:	08003837 	.word	0x08003837
 8003810:	08003847 	.word	0x08003847
 8003814:	08003847 	.word	0x08003847
 8003818:	08003847 	.word	0x08003847
 800381c:	0800383f 	.word	0x0800383f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7fe fdd6 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8003824:	61b8      	str	r0, [r7, #24]
        break;
 8003826:	e013      	b.n	8003850 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003828:	f7fe fde6 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 800382c:	61b8      	str	r0, [r7, #24]
        break;
 800382e:	e00f      	b.n	8003850 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <UART_SetConfig+0x4c0>)
 8003832:	61bb      	str	r3, [r7, #24]
        break;
 8003834:	e00c      	b.n	8003850 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003836:	f7fe fcdd 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800383a:	61b8      	str	r0, [r7, #24]
        break;
 800383c:	e008      	b.n	8003850 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003842:	61bb      	str	r3, [r7, #24]
        break;
 8003844:	e004      	b.n	8003850 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	77bb      	strb	r3, [r7, #30]
        break;
 800384e:	bf00      	nop
    }

    if (pclk != 0U)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	085a      	lsrs	r2, r3, #1
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	441a      	add	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	b29b      	uxth	r3, r3
 800386a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b0f      	cmp	r3, #15
 8003870:	d908      	bls.n	8003884 <UART_SetConfig+0x49c>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d204      	bcs.n	8003884 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	e001      	b.n	8003888 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003894:	7fbb      	ldrb	r3, [r7, #30]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40007c00 	.word	0x40007c00
 80038a4:	40023800 	.word	0x40023800
 80038a8:	00f42400 	.word	0x00f42400

080038ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01a      	beq.n	80039c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039aa:	d10a      	bne.n	80039c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a00:	f7fd fc38 	bl	8001274 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d10e      	bne.n	8003a32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f817 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e00d      	b.n	8003a4e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a66:	e05e      	b.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6e:	d05a      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a70:	f7fd fc00 	bl	8001274 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d302      	bcc.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11b      	bne.n	8003abe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e043      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d02c      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ada:	d124      	bne.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003af4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e00f      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d091      	beq.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b50:	b084      	sub	sp, #16
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	f107 001c 	add.w	r0, r7, #28
 8003b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d120      	bne.n	8003baa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <USB_CoreInit+0xac>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d105      	bne.n	8003b9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa5a 	bl	8004058 <USB_CoreReset>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e010      	b.n	8003bcc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa4e 	bl	8004058 <USB_CoreReset>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d10b      	bne.n	8003bea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f043 0206 	orr.w	r2, r3, #6
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f043 0220 	orr.w	r2, r3, #32
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bf6:	b004      	add	sp, #16
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	ffbdffbf 	.word	0xffbdffbf

08003c00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 0201 	bic.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d106      	bne.n	8003c4e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	e00b      	b.n	8003c66 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	e001      	b.n	8003c66 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e003      	b.n	8003c6e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003c66:	2032      	movs	r0, #50	; 0x32
 8003c68:	f7fd fb10 	bl	800128c <HAL_Delay>

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c78:	b084      	sub	sp, #16
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b086      	sub	sp, #24
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e009      	b.n	8003cac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	3340      	adds	r3, #64	; 0x40
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b0e      	cmp	r3, #14
 8003cb0:	d9f2      	bls.n	8003c98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11c      	bne.n	8003cf2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e005      	b.n	8003cfe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d04:	461a      	mov	r2, r3
 8003d06:	2300      	movs	r3, #0
 8003d08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	4619      	mov	r1, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d18:	461a      	mov	r2, r3
 8003d1a:	680b      	ldr	r3, [r1, #0]
 8003d1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10c      	bne.n	8003d3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f959 	bl	8003fe4 <USB_SetDevSpeed>
 8003d32:	e018      	b.n	8003d66 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d34:	2101      	movs	r1, #1
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f954 	bl	8003fe4 <USB_SetDevSpeed>
 8003d3c:	e013      	b.n	8003d66 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d10c      	bne.n	8003d5e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f949 	bl	8003fe4 <USB_SetDevSpeed>
 8003d52:	e008      	b.n	8003d66 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d54:	2101      	movs	r1, #1
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f944 	bl	8003fe4 <USB_SetDevSpeed>
 8003d5c:	e003      	b.n	8003d66 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d5e:	2103      	movs	r1, #3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f93f 	bl	8003fe4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d66:	2110      	movs	r1, #16
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f8f3 	bl	8003f54 <USB_FlushTxFifo>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f911 	bl	8003fa0 <USB_FlushRxFifo>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2300      	movs	r3, #0
 8003d92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da6:	461a      	mov	r2, r3
 8003da8:	2300      	movs	r3, #0
 8003daa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	e043      	b.n	8003e3a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc8:	d118      	bne.n	8003dfc <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e013      	b.n	8003e0e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	461a      	mov	r2, r3
 8003df4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e008      	b.n	8003e0e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3301      	adds	r3, #1
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3b7      	bcc.n	8003db2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	e043      	b.n	8003ed0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e5e:	d118      	bne.n	8003e92 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e72:	461a      	mov	r2, r3
 8003e74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e013      	b.n	8003ea4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e008      	b.n	8003ea4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ec8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3b7      	bcc.n	8003e48 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ef8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d105      	bne.n	8003f0c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f043 0210 	orr.w	r2, r3, #16
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699a      	ldr	r2, [r3, #24]
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <USB_DevInit+0x2d4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f043 0208 	orr.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d105      	bne.n	8003f3c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699a      	ldr	r2, [r3, #24]
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <USB_DevInit+0x2d8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f48:	b004      	add	sp, #16
 8003f4a:	4770      	bx	lr
 8003f4c:	803c3800 	.word	0x803c3800
 8003f50:	40000004 	.word	0x40000004

08003f54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	f043 0220 	orr.w	r2, r3, #32
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3301      	adds	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <USB_FlushTxFifo+0x48>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e006      	b.n	8003f8e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d0f0      	beq.n	8003f6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	00030d40 	.word	0x00030d40

08003fa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2210      	movs	r2, #16
 8003fb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <USB_FlushRxFifo+0x40>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e006      	b.n	8003fd2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d0f0      	beq.n	8003fb2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	00030d40 	.word	0x00030d40

08003fe4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004030:	f023 0303 	bic.w	r3, r3, #3
 8004034:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004044:	f043 0302 	orr.w	r3, r3, #2
 8004048:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3301      	adds	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a13      	ldr	r2, [pc, #76]	; (80040bc <USB_CoreReset+0x64>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e01b      	b.n	80040ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	daf2      	bge.n	8004064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <USB_CoreReset+0x64>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e006      	b.n	80040ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d0f0      	beq.n	800408e <USB_CoreReset+0x36>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	00030d40 	.word	0x00030d40

080040c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040d6:	f3ef 8305 	mrs	r3, IPSR
 80040da:	60bb      	str	r3, [r7, #8]
  return(result);
 80040dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e2:	f3ef 8310 	mrs	r3, PRIMASK
 80040e6:	607b      	str	r3, [r7, #4]
  return(result);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040ee:	f3ef 8311 	mrs	r3, BASEPRI
 80040f2:	603b      	str	r3, [r7, #0]
  return(result);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <osKernelInitialize+0x3a>
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <osKernelInitialize+0x64>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d103      	bne.n	800410a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004102:	f06f 0305 	mvn.w	r3, #5
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e00c      	b.n	8004124 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <osKernelInitialize+0x64>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <osKernelInitialize+0x64>)
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e002      	b.n	8004124 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800411e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004122:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004124:	68fb      	ldr	r3, [r7, #12]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	200000a0 	.word	0x200000a0

08004138 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800413e:	f3ef 8305 	mrs	r3, IPSR
 8004142:	60bb      	str	r3, [r7, #8]
  return(result);
 8004144:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414a:	f3ef 8310 	mrs	r3, PRIMASK
 800414e:	607b      	str	r3, [r7, #4]
  return(result);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004156:	f3ef 8311 	mrs	r3, BASEPRI
 800415a:	603b      	str	r3, [r7, #0]
  return(result);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <osKernelStart+0x3a>
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <osKernelStart+0x68>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d103      	bne.n	8004172 <osKernelStart+0x3a>
    stat = osErrorISR;
 800416a:	f06f 0305 	mvn.w	r3, #5
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	e010      	b.n	8004194 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <osKernelStart+0x68>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d109      	bne.n	800418e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800417a:	f7ff ffa1 	bl	80040c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800417e:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <osKernelStart+0x68>)
 8004180:	2202      	movs	r2, #2
 8004182:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004184:	f002 fac2 	bl	800670c <vTaskStartScheduler>
      stat = osOK;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	e002      	b.n	8004194 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800418e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004192:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004194:	68fb      	ldr	r3, [r7, #12]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200000a0 	.word	0x200000a0

080041a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b090      	sub	sp, #64	; 0x40
 80041a8:	af04      	add	r7, sp, #16
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041b4:	f3ef 8305 	mrs	r3, IPSR
 80041b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80041ba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 808f 	bne.w	80042e0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041ce:	f3ef 8311 	mrs	r3, BASEPRI
 80041d2:	617b      	str	r3, [r7, #20]
  return(result);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <osThreadNew+0x3e>
 80041da:	4b44      	ldr	r3, [pc, #272]	; (80042ec <osThreadNew+0x148>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d07e      	beq.n	80042e0 <osThreadNew+0x13c>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d07b      	beq.n	80042e0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80041ec:	2318      	movs	r3, #24
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d045      	beq.n	800428c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <osThreadNew+0x6a>
        name = attr->name;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <osThreadNew+0x90>
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	2b38      	cmp	r3, #56	; 0x38
 8004226:	d805      	bhi.n	8004234 <osThreadNew+0x90>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <osThreadNew+0x94>
        return (NULL);
 8004234:	2300      	movs	r3, #0
 8004236:	e054      	b.n	80042e2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00e      	beq.n	800426e <osThreadNew+0xca>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b5b      	cmp	r3, #91	; 0x5b
 8004256:	d90a      	bls.n	800426e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800425c:	2b00      	cmp	r3, #0
 800425e:	d006      	beq.n	800426e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <osThreadNew+0xca>
        mem = 1;
 8004268:	2301      	movs	r3, #1
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	e010      	b.n	8004290 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10c      	bne.n	8004290 <osThreadNew+0xec>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d108      	bne.n	8004290 <osThreadNew+0xec>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <osThreadNew+0xec>
          mem = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	623b      	str	r3, [r7, #32]
 800428a:	e001      	b.n	8004290 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d110      	bne.n	80042b8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800429e:	9202      	str	r2, [sp, #8]
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f001 fecd 	bl	800604c <xTaskCreateStatic>
 80042b2:	4603      	mov	r3, r0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e013      	b.n	80042e0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d110      	bne.n	80042e0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	f107 0310 	add.w	r3, r7, #16
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f001 ff1e 	bl	8006112 <xTaskCreate>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d001      	beq.n	80042e0 <osThreadNew+0x13c>
          hTask = NULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042e0:	693b      	ldr	r3, [r7, #16]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3730      	adds	r7, #48	; 0x30
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	200000a0 	.word	0x200000a0

080042f0 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80042f6:	f002 fe67 	bl	8006fc8 <xTaskGetCurrentTaskHandle>
 80042fa:	6078      	str	r0, [r7, #4]

  return (id);
 80042fc:	687b      	ldr	r3, [r7, #4]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004314:	f3ef 8305 	mrs	r3, IPSR
 8004318:	617b      	str	r3, [r7, #20]
  return(result);
 800431a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10f      	bne.n	8004340 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004320:	f3ef 8310 	mrs	r3, PRIMASK
 8004324:	613b      	str	r3, [r7, #16]
  return(result);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800432c:	f3ef 8311 	mrs	r3, BASEPRI
 8004330:	60fb      	str	r3, [r7, #12]
  return(result);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <osThreadSuspend+0x40>
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <osThreadSuspend+0x64>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d103      	bne.n	8004348 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8004340:	f06f 0305 	mvn.w	r3, #5
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	e00b      	b.n	8004360 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800434e:	f06f 0303 	mvn.w	r3, #3
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	e004      	b.n	8004360 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800435a:	69b8      	ldr	r0, [r7, #24]
 800435c:	f002 f8ca 	bl	80064f4 <vTaskSuspend>
  }

  return (stat);
 8004360:	69fb      	ldr	r3, [r7, #28]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	200000a0 	.word	0x200000a0

08004370 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800437c:	f3ef 8305 	mrs	r3, IPSR
 8004380:	617b      	str	r3, [r7, #20]
  return(result);
 8004382:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10f      	bne.n	80043a8 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004388:	f3ef 8310 	mrs	r3, PRIMASK
 800438c:	613b      	str	r3, [r7, #16]
  return(result);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004394:	f3ef 8311 	mrs	r3, BASEPRI
 8004398:	60fb      	str	r3, [r7, #12]
  return(result);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <osThreadResume+0x40>
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <osThreadResume+0x64>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d103      	bne.n	80043b0 <osThreadResume+0x40>
    stat = osErrorISR;
 80043a8:	f06f 0305 	mvn.w	r3, #5
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e00b      	b.n	80043c8 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <osThreadResume+0x4e>
    stat = osErrorParameter;
 80043b6:	f06f 0303 	mvn.w	r3, #3
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e004      	b.n	80043c8 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 80043c2:	69b8      	ldr	r0, [r7, #24]
 80043c4:	f002 f942 	bl	800664c <vTaskResume>
  }

  return (stat);
 80043c8:	69fb      	ldr	r3, [r7, #28]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200000a0 	.word	0x200000a0

080043d8 <osThreadExit>:

__NO_RETURN void osThreadExit (void) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80043dc:	2000      	movs	r0, #0
 80043de:	f001 ffdf 	bl	80063a0 <vTaskDelete>
#endif
  for (;;);
 80043e2:	e7fe      	b.n	80043e2 <osThreadExit+0xa>

080043e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ec:	f3ef 8305 	mrs	r3, IPSR
 80043f0:	613b      	str	r3, [r7, #16]
  return(result);
 80043f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10f      	bne.n	8004418 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f8:	f3ef 8310 	mrs	r3, PRIMASK
 80043fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004404:	f3ef 8311 	mrs	r3, BASEPRI
 8004408:	60bb      	str	r3, [r7, #8]
  return(result);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <osDelay+0x3c>
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <osDelay+0x58>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d103      	bne.n	8004420 <osDelay+0x3c>
    stat = osErrorISR;
 8004418:	f06f 0305 	mvn.w	r3, #5
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e007      	b.n	8004430 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <osDelay+0x4c>
      vTaskDelay(ticks);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f002 f82c 	bl	8006488 <vTaskDelay>
    }
  }

  return (stat);
 8004430:	697b      	ldr	r3, [r7, #20]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	200000a0 	.word	0x200000a0

08004440 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004448:	2300      	movs	r3, #0
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800444c:	f3ef 8305 	mrs	r3, IPSR
 8004450:	613b      	str	r3, [r7, #16]
  return(result);
 8004452:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 8085 	bne.w	8004564 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445a:	f3ef 8310 	mrs	r3, PRIMASK
 800445e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d105      	bne.n	8004472 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004466:	f3ef 8311 	mrs	r3, BASEPRI
 800446a:	60bb      	str	r3, [r7, #8]
  return(result);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <osMutexNew+0x3a>
 8004472:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <osMutexNew+0x130>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d074      	beq.n	8004564 <osMutexNew+0x124>
    if (attr != NULL) {
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	623b      	str	r3, [r7, #32]
 8004486:	e001      	b.n	800448c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <osMutexNew+0x5c>
      rmtx = 1U;
 8004496:	2301      	movs	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	e001      	b.n	80044a0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d15c      	bne.n	8004564 <osMutexNew+0x124>
      mem = -1;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ae:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d015      	beq.n	80044e2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <osMutexNew+0x8c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	2b4f      	cmp	r3, #79	; 0x4f
 80044c4:	d902      	bls.n	80044cc <osMutexNew+0x8c>
          mem = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e00c      	b.n	80044e6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d108      	bne.n	80044e6 <osMutexNew+0xa6>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <osMutexNew+0xa6>
            mem = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e001      	b.n	80044e6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d112      	bne.n	8004512 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	4619      	mov	r1, r3
 80044f8:	2004      	movs	r0, #4
 80044fa:	f000 fe1a 	bl	8005132 <xQueueCreateMutexStatic>
 80044fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004500:	e016      	b.n	8004530 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	4619      	mov	r1, r3
 8004508:	2001      	movs	r0, #1
 800450a:	f000 fe12 	bl	8005132 <xQueueCreateMutexStatic>
 800450e:	6278      	str	r0, [r7, #36]	; 0x24
 8004510:	e00e      	b.n	8004530 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800451e:	2004      	movs	r0, #4
 8004520:	f000 fdef 	bl	8005102 <xQueueCreateMutex>
 8004524:	6278      	str	r0, [r7, #36]	; 0x24
 8004526:	e003      	b.n	8004530 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004528:	2001      	movs	r0, #1
 800452a:	f000 fdea 	bl	8005102 <xQueueCreateMutex>
 800452e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <osMutexNew+0x110>
        if (attr != NULL) {
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <osMutexNew+0x104>
          name = attr->name;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e001      	b.n	8004548 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004548:	6979      	ldr	r1, [r7, #20]
 800454a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800454c:	f001 fcf6 	bl	8005f3c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d006      	beq.n	8004564 <osMutexNew+0x124>
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004566:	4618      	mov	r0, r3
 8004568:	3728      	adds	r7, #40	; 0x28
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	200000a0 	.word	0x200000a0

08004574 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004592:	f3ef 8305 	mrs	r3, IPSR
 8004596:	613b      	str	r3, [r7, #16]
  return(result);
 8004598:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459e:	f3ef 8310 	mrs	r3, PRIMASK
 80045a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045aa:	f3ef 8311 	mrs	r3, BASEPRI
 80045ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <osMutexAcquire+0x52>
 80045b6:	4b1d      	ldr	r3, [pc, #116]	; (800462c <osMutexAcquire+0xb8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d103      	bne.n	80045c6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80045be:	f06f 0305 	mvn.w	r3, #5
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	e02c      	b.n	8004620 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d103      	bne.n	80045d4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80045cc:	f06f 0303 	mvn.w	r3, #3
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	e025      	b.n	8004620 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d011      	beq.n	80045fe <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80045da:	6839      	ldr	r1, [r7, #0]
 80045dc:	69b8      	ldr	r0, [r7, #24]
 80045de:	f000 fdf9 	bl	80051d4 <xQueueTakeMutexRecursive>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d01b      	beq.n	8004620 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80045ee:	f06f 0301 	mvn.w	r3, #1
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e014      	b.n	8004620 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80045f6:	f06f 0302 	mvn.w	r3, #2
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	e010      	b.n	8004620 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80045fe:	6839      	ldr	r1, [r7, #0]
 8004600:	69b8      	ldr	r0, [r7, #24]
 8004602:	f001 f9b3 	bl	800596c <xQueueSemaphoreTake>
 8004606:	4603      	mov	r3, r0
 8004608:	2b01      	cmp	r3, #1
 800460a:	d009      	beq.n	8004620 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004612:	f06f 0301 	mvn.w	r3, #1
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e002      	b.n	8004620 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800461a:	f06f 0302 	mvn.w	r3, #2
 800461e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004620:	69fb      	ldr	r3, [r7, #28]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	200000a0 	.word	0x200000a0

08004630 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004648:	2300      	movs	r3, #0
 800464a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800464c:	f3ef 8305 	mrs	r3, IPSR
 8004650:	613b      	str	r3, [r7, #16]
  return(result);
 8004652:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10f      	bne.n	8004678 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004658:	f3ef 8310 	mrs	r3, PRIMASK
 800465c:	60fb      	str	r3, [r7, #12]
  return(result);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004664:	f3ef 8311 	mrs	r3, BASEPRI
 8004668:	60bb      	str	r3, [r7, #8]
  return(result);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <osMutexRelease+0x50>
 8004670:	4b16      	ldr	r3, [pc, #88]	; (80046cc <osMutexRelease+0x9c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d103      	bne.n	8004680 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004678:	f06f 0305 	mvn.w	r3, #5
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	e01f      	b.n	80046c0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004686:	f06f 0303 	mvn.w	r3, #3
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	e018      	b.n	80046c0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004694:	69b8      	ldr	r0, [r7, #24]
 8004696:	f000 fd67 	bl	8005168 <xQueueGiveMutexRecursive>
 800469a:	4603      	mov	r3, r0
 800469c:	2b01      	cmp	r3, #1
 800469e:	d00f      	beq.n	80046c0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80046a0:	f06f 0302 	mvn.w	r3, #2
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e00b      	b.n	80046c0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80046a8:	2300      	movs	r3, #0
 80046aa:	2200      	movs	r2, #0
 80046ac:	2100      	movs	r1, #0
 80046ae:	69b8      	ldr	r0, [r7, #24]
 80046b0:	f000 fe3a 	bl	8005328 <xQueueGenericSend>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d002      	beq.n	80046c0 <osMutexRelease+0x90>
        stat = osErrorResource;
 80046ba:	f06f 0302 	mvn.w	r3, #2
 80046be:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80046c0:	69fb      	ldr	r3, [r7, #28]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3720      	adds	r7, #32
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200000a0 	.word	0x200000a0

080046d0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	; 0x30
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e0:	f3ef 8305 	mrs	r3, IPSR
 80046e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80046e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 8086 	bne.w	80047fa <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ee:	f3ef 8310 	mrs	r3, PRIMASK
 80046f2:	617b      	str	r3, [r7, #20]
  return(result);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046fa:	f3ef 8311 	mrs	r3, BASEPRI
 80046fe:	613b      	str	r3, [r7, #16]
  return(result);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <osSemaphoreNew+0x3e>
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <osSemaphoreNew+0x134>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d075      	beq.n	80047fa <osSemaphoreNew+0x12a>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d072      	beq.n	80047fa <osSemaphoreNew+0x12a>
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	429a      	cmp	r2, r3
 800471a:	d86e      	bhi.n	80047fa <osSemaphoreNew+0x12a>
    mem = -1;
 800471c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004720:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d015      	beq.n	8004754 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d006      	beq.n	800473e <osSemaphoreNew+0x6e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b4f      	cmp	r3, #79	; 0x4f
 8004736:	d902      	bls.n	800473e <osSemaphoreNew+0x6e>
        mem = 1;
 8004738:	2301      	movs	r3, #1
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	e00c      	b.n	8004758 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <osSemaphoreNew+0x88>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <osSemaphoreNew+0x88>
          mem = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	e001      	b.n	8004758 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800475e:	d04c      	beq.n	80047fa <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d128      	bne.n	80047b8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d10a      	bne.n	8004782 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2203      	movs	r2, #3
 8004772:	9200      	str	r2, [sp, #0]
 8004774:	2200      	movs	r2, #0
 8004776:	2100      	movs	r1, #0
 8004778:	2001      	movs	r0, #1
 800477a:	f000 fbc1 	bl	8004f00 <xQueueGenericCreateStatic>
 800477e:	6278      	str	r0, [r7, #36]	; 0x24
 8004780:	e005      	b.n	800478e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004782:	2203      	movs	r2, #3
 8004784:	2100      	movs	r1, #0
 8004786:	2001      	movs	r0, #1
 8004788:	f000 fc3c 	bl	8005004 <xQueueGenericCreate>
 800478c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	d022      	beq.n	80047da <osSemaphoreNew+0x10a>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d01f      	beq.n	80047da <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800479a:	2300      	movs	r3, #0
 800479c:	2200      	movs	r2, #0
 800479e:	2100      	movs	r1, #0
 80047a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047a2:	f000 fdc1 	bl	8005328 <xQueueGenericSend>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d016      	beq.n	80047da <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80047ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047ae:	f001 fa77 	bl	8005ca0 <vQueueDelete>
            hSemaphore = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	e010      	b.n	80047da <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d108      	bne.n	80047d0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fd3c 	bl	8005244 <xQueueCreateCountingSemaphoreStatic>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24
 80047ce:	e004      	b.n	80047da <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fd71 	bl	80052ba <xQueueCreateCountingSemaphore>
 80047d8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00c      	beq.n	80047fa <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <osSemaphoreNew+0x11e>
          name = attr->name;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	e001      	b.n	80047f2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80047f2:	69f9      	ldr	r1, [r7, #28]
 80047f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047f6:	f001 fba1 	bl	8005f3c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3728      	adds	r7, #40	; 0x28
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	200000a0 	.word	0x200000a0

08004808 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004820:	f06f 0303 	mvn.w	r3, #3
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	e04b      	b.n	80048c0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004828:	f3ef 8305 	mrs	r3, IPSR
 800482c:	617b      	str	r3, [r7, #20]
  return(result);
 800482e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10f      	bne.n	8004854 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004834:	f3ef 8310 	mrs	r3, PRIMASK
 8004838:	613b      	str	r3, [r7, #16]
  return(result);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004840:	f3ef 8311 	mrs	r3, BASEPRI
 8004844:	60fb      	str	r3, [r7, #12]
  return(result);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d026      	beq.n	800489a <osSemaphoreAcquire+0x92>
 800484c:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <osSemaphoreAcquire+0xc4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d122      	bne.n	800489a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800485a:	f06f 0303 	mvn.w	r3, #3
 800485e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004860:	e02d      	b.n	80048be <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	461a      	mov	r2, r3
 800486c:	2100      	movs	r1, #0
 800486e:	69b8      	ldr	r0, [r7, #24]
 8004870:	f001 f990 	bl	8005b94 <xQueueReceiveFromISR>
 8004874:	4603      	mov	r3, r0
 8004876:	2b01      	cmp	r3, #1
 8004878:	d003      	beq.n	8004882 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800487a:	f06f 0302 	mvn.w	r3, #2
 800487e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004880:	e01d      	b.n	80048be <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01a      	beq.n	80048be <osSemaphoreAcquire+0xb6>
 8004888:	4b11      	ldr	r3, [pc, #68]	; (80048d0 <osSemaphoreAcquire+0xc8>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004898:	e011      	b.n	80048be <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800489a:	6839      	ldr	r1, [r7, #0]
 800489c:	69b8      	ldr	r0, [r7, #24]
 800489e:	f001 f865 	bl	800596c <xQueueSemaphoreTake>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d00b      	beq.n	80048c0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80048ae:	f06f 0301 	mvn.w	r3, #1
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e004      	b.n	80048c0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80048b6:	f06f 0302 	mvn.w	r3, #2
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	e000      	b.n	80048c0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80048be:	bf00      	nop
      }
    }
  }

  return (stat);
 80048c0:	69fb      	ldr	r3, [r7, #28]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200000a0 	.word	0x200000a0
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d103      	bne.n	80048f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80048ea:	f06f 0303 	mvn.w	r3, #3
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	e03e      	b.n	8004970 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048f2:	f3ef 8305 	mrs	r3, IPSR
 80048f6:	617b      	str	r3, [r7, #20]
  return(result);
 80048f8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10f      	bne.n	800491e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004902:	613b      	str	r3, [r7, #16]
  return(result);
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800490a:	f3ef 8311 	mrs	r3, BASEPRI
 800490e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01e      	beq.n	8004954 <osSemaphoreRelease+0x80>
 8004916:	4b19      	ldr	r3, [pc, #100]	; (800497c <osSemaphoreRelease+0xa8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d11a      	bne.n	8004954 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004922:	f107 0308 	add.w	r3, r7, #8
 8004926:	4619      	mov	r1, r3
 8004928:	69b8      	ldr	r0, [r7, #24]
 800492a:	f000 fea3 	bl	8005674 <xQueueGiveFromISR>
 800492e:	4603      	mov	r3, r0
 8004930:	2b01      	cmp	r3, #1
 8004932:	d003      	beq.n	800493c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004934:	f06f 0302 	mvn.w	r3, #2
 8004938:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800493a:	e018      	b.n	800496e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d015      	beq.n	800496e <osSemaphoreRelease+0x9a>
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <osSemaphoreRelease+0xac>)
 8004944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004952:	e00c      	b.n	800496e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004954:	2300      	movs	r3, #0
 8004956:	2200      	movs	r2, #0
 8004958:	2100      	movs	r1, #0
 800495a:	69b8      	ldr	r0, [r7, #24]
 800495c:	f000 fce4 	bl	8005328 <xQueueGenericSend>
 8004960:	4603      	mov	r3, r0
 8004962:	2b01      	cmp	r3, #1
 8004964:	d004      	beq.n	8004970 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004966:	f06f 0302 	mvn.w	r3, #2
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e000      	b.n	8004970 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800496e:	bf00      	nop
    }
  }

  return (stat);
 8004970:	69fb      	ldr	r3, [r7, #28]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	200000a0 	.word	0x200000a0
 8004980:	e000ed04 	.word	0xe000ed04

08004984 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b08c      	sub	sp, #48	; 0x30
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004994:	f3ef 8305 	mrs	r3, IPSR
 8004998:	61bb      	str	r3, [r7, #24]
  return(result);
 800499a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800499c:	2b00      	cmp	r3, #0
 800499e:	d16f      	bne.n	8004a80 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a0:	f3ef 8310 	mrs	r3, PRIMASK
 80049a4:	617b      	str	r3, [r7, #20]
  return(result);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049ac:	f3ef 8311 	mrs	r3, BASEPRI
 80049b0:	613b      	str	r3, [r7, #16]
  return(result);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <osMessageQueueNew+0x3c>
 80049b8:	4b34      	ldr	r3, [pc, #208]	; (8004a8c <osMessageQueueNew+0x108>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d05f      	beq.n	8004a80 <osMessageQueueNew+0xfc>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d05c      	beq.n	8004a80 <osMessageQueueNew+0xfc>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d059      	beq.n	8004a80 <osMessageQueueNew+0xfc>
    mem = -1;
 80049cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d029      	beq.n	8004a2c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d012      	beq.n	8004a06 <osMessageQueueNew+0x82>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2b4f      	cmp	r3, #79	; 0x4f
 80049e6:	d90e      	bls.n	8004a06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d302      	bcc.n	8004a06 <osMessageQueueNew+0x82>
        mem = 1;
 8004a00:	2301      	movs	r3, #1
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	e014      	b.n	8004a30 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d110      	bne.n	8004a30 <osMessageQueueNew+0xac>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10c      	bne.n	8004a30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d108      	bne.n	8004a30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <osMessageQueueNew+0xac>
          mem = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	623b      	str	r3, [r7, #32]
 8004a2a:	e001      	b.n	8004a30 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d10b      	bne.n	8004a4e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2100      	movs	r1, #0
 8004a40:	9100      	str	r1, [sp, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fa5b 	bl	8004f00 <xQueueGenericCreateStatic>
 8004a4a:	6278      	str	r0, [r7, #36]	; 0x24
 8004a4c:	e008      	b.n	8004a60 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004a54:	2200      	movs	r2, #0
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fad3 	bl	8005004 <xQueueGenericCreate>
 8004a5e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	e001      	b.n	8004a78 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004a78:	69f9      	ldr	r1, [r7, #28]
 8004a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a7c:	f001 fa5e 	bl	8005f3c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3728      	adds	r7, #40	; 0x28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200000a0 	.word	0x200000a0

08004a90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa8:	f3ef 8305 	mrs	r3, IPSR
 8004aac:	61fb      	str	r3, [r7, #28]
  return(result);
 8004aae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10f      	bne.n	8004ad4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d02c      	beq.n	8004b26 <osMessageQueuePut+0x96>
 8004acc:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <osMessageQueuePut+0xe0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d128      	bne.n	8004b26 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <osMessageQueuePut+0x56>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <osMessageQueuePut+0x56>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004ae6:	f06f 0303 	mvn.w	r3, #3
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004aec:	e039      	b.n	8004b62 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004af2:	f107 0210 	add.w	r2, r7, #16
 8004af6:	2300      	movs	r3, #0
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	6a38      	ldr	r0, [r7, #32]
 8004afc:	f000 fd1a 	bl	8005534 <xQueueGenericSendFromISR>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d003      	beq.n	8004b0e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004b06:	f06f 0302 	mvn.w	r3, #2
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b0c:	e029      	b.n	8004b62 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d026      	beq.n	8004b62 <osMessageQueuePut+0xd2>
 8004b14:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <osMessageQueuePut+0xe4>)
 8004b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b24:	e01d      	b.n	8004b62 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <osMessageQueuePut+0xa2>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004b32:	f06f 0303 	mvn.w	r3, #3
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
 8004b38:	e014      	b.n	8004b64 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	6a38      	ldr	r0, [r7, #32]
 8004b42:	f000 fbf1 	bl	8005328 <xQueueGenericSend>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d00b      	beq.n	8004b64 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004b52:	f06f 0301 	mvn.w	r3, #1
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	e004      	b.n	8004b64 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004b5a:	f06f 0302 	mvn.w	r3, #2
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b60:	e000      	b.n	8004b64 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b62:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3728      	adds	r7, #40	; 0x28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200000a0 	.word	0x200000a0
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b8e:	f3ef 8305 	mrs	r3, IPSR
 8004b92:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b94:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d105      	bne.n	8004bb2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8004baa:	617b      	str	r3, [r7, #20]
  return(result);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d02c      	beq.n	8004c0c <osMessageQueueGet+0x94>
 8004bb2:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <osMessageQueueGet+0xdc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d128      	bne.n	8004c0c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <osMessageQueueGet+0x54>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <osMessageQueueGet+0x54>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004bcc:	f06f 0303 	mvn.w	r3, #3
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bd2:	e038      	b.n	8004c46 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004bd8:	f107 0310 	add.w	r3, r7, #16
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	6a38      	ldr	r0, [r7, #32]
 8004be2:	f000 ffd7 	bl	8005b94 <xQueueReceiveFromISR>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d003      	beq.n	8004bf4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004bec:	f06f 0302 	mvn.w	r3, #2
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bf2:	e028      	b.n	8004c46 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d025      	beq.n	8004c46 <osMessageQueueGet+0xce>
 8004bfa:	4b17      	ldr	r3, [pc, #92]	; (8004c58 <osMessageQueueGet+0xe0>)
 8004bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c0a:	e01c      	b.n	8004c46 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <osMessageQueueGet+0xa0>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004c18:	f06f 0303 	mvn.w	r3, #3
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1e:	e013      	b.n	8004c48 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	6a38      	ldr	r0, [r7, #32]
 8004c26:	f000 fdbb 	bl	80057a0 <xQueueReceive>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d00b      	beq.n	8004c48 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004c36:	f06f 0301 	mvn.w	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	e004      	b.n	8004c48 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004c3e:	f06f 0302 	mvn.w	r3, #2
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
 8004c44:	e000      	b.n	8004c48 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c46:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3728      	adds	r7, #40	; 0x28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	200000a0 	.word	0x200000a0
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	4a06      	ldr	r2, [pc, #24]	; (8004c8c <vApplicationGetIdleTaskMemory+0x30>)
 8004c72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2280      	movs	r2, #128	; 0x80
 8004c78:	601a      	str	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	200000a4 	.word	0x200000a4
 8004c8c:	20000100 	.word	0x20000100

08004c90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a07      	ldr	r2, [pc, #28]	; (8004cbc <vApplicationGetTimerTaskMemory+0x2c>)
 8004ca0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4a06      	ldr	r2, [pc, #24]	; (8004cc0 <vApplicationGetTimerTaskMemory+0x30>)
 8004ca6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cae:	601a      	str	r2, [r3, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	20000300 	.word	0x20000300
 8004cc0:	2000035c 	.word	0x2000035c

08004cc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f103 0208 	add.w	r2, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f103 0208 	add.w	r2, r3, #8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f103 0208 	add.w	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	601a      	str	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d7c:	d103      	bne.n	8004d86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e00c      	b.n	8004da0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	e002      	b.n	8004d94 <vListInsert+0x2e>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d2f6      	bcs.n	8004d8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6892      	ldr	r2, [r2, #8]
 8004dee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6852      	ldr	r2, [r2, #4]
 8004df8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d103      	bne.n	8004e0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	1e5a      	subs	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10c      	bne.n	8004e5a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	b672      	cpsid	i
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	b662      	cpsie	i
 8004e54:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004e5a:	f002 ff17 	bl	8007c8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	441a      	add	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	68f9      	ldr	r1, [r7, #12]
 8004e8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	441a      	add	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	22ff      	movs	r2, #255	; 0xff
 8004e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	22ff      	movs	r2, #255	; 0xff
 8004ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d114      	bne.n	8004eda <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01a      	beq.n	8004eee <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3310      	adds	r3, #16
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f001 febd 	bl	8006c3c <xTaskRemoveFromEventList>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d012      	beq.n	8004eee <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <xQueueGenericReset+0xd0>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	e009      	b.n	8004eee <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3310      	adds	r3, #16
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fef0 	bl	8004cc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3324      	adds	r3, #36	; 0x24
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff feeb 	bl	8004cc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004eee:	f002 ff01 	bl	8007cf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ef2:	2301      	movs	r3, #1
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	e000ed04 	.word	0xe000ed04

08004f00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08e      	sub	sp, #56	; 0x38
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10c      	bne.n	8004f2e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	b672      	cpsid	i
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	b662      	cpsie	i
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10c      	bne.n	8004f4e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	b672      	cpsid	i
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	b662      	cpsie	i
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f4a:	bf00      	nop
 8004f4c:	e7fe      	b.n	8004f4c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <xQueueGenericCreateStatic+0x5a>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <xQueueGenericCreateStatic+0x5e>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <xQueueGenericCreateStatic+0x60>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10c      	bne.n	8004f7e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	b672      	cpsid	i
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	b662      	cpsie	i
 8004f78:	623b      	str	r3, [r7, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d102      	bne.n	8004f8a <xQueueGenericCreateStatic+0x8a>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <xQueueGenericCreateStatic+0x8e>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <xQueueGenericCreateStatic+0x90>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10c      	bne.n	8004fae <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	b672      	cpsid	i
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	b662      	cpsie	i
 8004fa8:	61fb      	str	r3, [r7, #28]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fae:	2350      	movs	r3, #80	; 0x50
 8004fb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b50      	cmp	r3, #80	; 0x50
 8004fb6:	d00c      	beq.n	8004fd2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	b672      	cpsid	i
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	b662      	cpsie	i
 8004fcc:	61bb      	str	r3, [r7, #24]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fe6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f847 	bl	8005088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3730      	adds	r7, #48	; 0x30
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10c      	bne.n	8005032 <xQueueGenericCreate+0x2e>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	b672      	cpsid	i
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	b662      	cpsie	i
 800502c:	613b      	str	r3, [r7, #16]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d102      	bne.n	800503e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005038:	2300      	movs	r3, #0
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	e004      	b.n	8005048 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	3350      	adds	r3, #80	; 0x50
 800504c:	4618      	mov	r0, r3
 800504e:	f002 ff49 	bl	8007ee4 <pvPortMalloc>
 8005052:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d011      	beq.n	800507e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	3350      	adds	r3, #80	; 0x50
 8005062:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800506c:	79fa      	ldrb	r2, [r7, #7]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	4613      	mov	r3, r2
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f805 	bl	8005088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800507e:	69bb      	ldr	r3, [r7, #24]
	}
 8005080:	4618      	mov	r0, r3
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d103      	bne.n	80050a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e002      	b.n	80050aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050b6:	2101      	movs	r1, #1
 80050b8:	69b8      	ldr	r0, [r7, #24]
 80050ba:	f7ff feb7 	bl	8004e2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80050ee:	2300      	movs	r3, #0
 80050f0:	2200      	movs	r2, #0
 80050f2:	2100      	movs	r1, #0
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f917 	bl	8005328 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005102:	b580      	push	{r7, lr}
 8005104:	b086      	sub	sp, #24
 8005106:	af00      	add	r7, sp, #0
 8005108:	4603      	mov	r3, r0
 800510a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800510c:	2301      	movs	r3, #1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	2300      	movs	r3, #0
 8005112:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	461a      	mov	r2, r3
 8005118:	6939      	ldr	r1, [r7, #16]
 800511a:	6978      	ldr	r0, [r7, #20]
 800511c:	f7ff ff72 	bl	8005004 <xQueueGenericCreate>
 8005120:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff ffd3 	bl	80050ce <prvInitialiseMutex>

		return xNewQueue;
 8005128:	68fb      	ldr	r3, [r7, #12]
	}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005132:	b580      	push	{r7, lr}
 8005134:	b088      	sub	sp, #32
 8005136:	af02      	add	r7, sp, #8
 8005138:	4603      	mov	r3, r0
 800513a:	6039      	str	r1, [r7, #0]
 800513c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800513e:	2301      	movs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2200      	movs	r2, #0
 800514e:	6939      	ldr	r1, [r7, #16]
 8005150:	6978      	ldr	r0, [r7, #20]
 8005152:	f7ff fed5 	bl	8004f00 <xQueueGenericCreateStatic>
 8005156:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff ffb8 	bl	80050ce <prvInitialiseMutex>

		return xNewQueue;
 800515e:	68fb      	ldr	r3, [r7, #12]
	}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10c      	bne.n	8005194 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	b672      	cpsid	i
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	b662      	cpsie	i
 800518e:	60fb      	str	r3, [r7, #12]
}
 8005190:	bf00      	nop
 8005192:	e7fe      	b.n	8005192 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	689c      	ldr	r4, [r3, #8]
 8005198:	f001 ff16 	bl	8006fc8 <xTaskGetCurrentTaskHandle>
 800519c:	4603      	mov	r3, r0
 800519e:	429c      	cmp	r4, r3
 80051a0:	d111      	bne.n	80051c6 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	1e5a      	subs	r2, r3, #1
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d105      	bne.n	80051c0 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80051b4:	2300      	movs	r3, #0
 80051b6:	2200      	movs	r2, #0
 80051b8:	2100      	movs	r1, #0
 80051ba:	6938      	ldr	r0, [r7, #16]
 80051bc:	f000 f8b4 	bl	8005328 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80051c0:	2301      	movs	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e001      	b.n	80051ca <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80051ca:	697b      	ldr	r3, [r7, #20]
	}
 80051cc:	4618      	mov	r0, r3
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd90      	pop	{r4, r7, pc}

080051d4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10c      	bne.n	8005202 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	b672      	cpsid	i
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	b662      	cpsie	i
 80051fc:	60fb      	str	r3, [r7, #12]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	689c      	ldr	r4, [r3, #8]
 8005206:	f001 fedf 	bl	8006fc8 <xTaskGetCurrentTaskHandle>
 800520a:	4603      	mov	r3, r0
 800520c:	429c      	cmp	r4, r3
 800520e:	d107      	bne.n	8005220 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800521a:	2301      	movs	r3, #1
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	e00c      	b.n	800523a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	6938      	ldr	r0, [r7, #16]
 8005224:	f000 fba2 	bl	800596c <xQueueSemaphoreTake>
 8005228:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d004      	beq.n	800523a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800523a:	697b      	ldr	r3, [r7, #20]
	}
 800523c:	4618      	mov	r0, r3
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}

08005244 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10c      	bne.n	8005270 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525a:	b672      	cpsid	i
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	b662      	cpsie	i
 800526a:	61bb      	str	r3, [r7, #24]
}
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	429a      	cmp	r2, r3
 8005276:	d90c      	bls.n	8005292 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	b672      	cpsid	i
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	b662      	cpsie	i
 800528c:	617b      	str	r3, [r7, #20]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005292:	2302      	movs	r3, #2
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	2100      	movs	r1, #0
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff fe2f 	bl	8004f00 <xQueueGenericCreateStatic>
 80052a2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80052b0:	69fb      	ldr	r3, [r7, #28]
	}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b086      	sub	sp, #24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	b672      	cpsid	i
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	b662      	cpsie	i
 80052de:	613b      	str	r3, [r7, #16]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d90c      	bls.n	8005306 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	b672      	cpsid	i
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	b662      	cpsie	i
 8005300:	60fb      	str	r3, [r7, #12]
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005306:	2202      	movs	r2, #2
 8005308:	2100      	movs	r1, #0
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fe7a 	bl	8005004 <xQueueGenericCreate>
 8005310:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800531e:	697b      	ldr	r3, [r7, #20]
	}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08e      	sub	sp, #56	; 0x38
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10c      	bne.n	800535e <xQueueGenericSend+0x36>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	b672      	cpsid	i
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	b662      	cpsie	i
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800535a:	bf00      	nop
 800535c:	e7fe      	b.n	800535c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d103      	bne.n	800536c <xQueueGenericSend+0x44>
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <xQueueGenericSend+0x48>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <xQueueGenericSend+0x4a>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10c      	bne.n	8005390 <xQueueGenericSend+0x68>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	b672      	cpsid	i
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	b662      	cpsie	i
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d103      	bne.n	800539e <xQueueGenericSend+0x76>
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <xQueueGenericSend+0x7a>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <xQueueGenericSend+0x7c>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10c      	bne.n	80053c2 <xQueueGenericSend+0x9a>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	b672      	cpsid	i
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	b662      	cpsie	i
 80053bc:	623b      	str	r3, [r7, #32]
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053c2:	f001 fe11 	bl	8006fe8 <xTaskGetSchedulerState>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <xQueueGenericSend+0xaa>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <xQueueGenericSend+0xae>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <xQueueGenericSend+0xb0>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10c      	bne.n	80053f6 <xQueueGenericSend+0xce>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	b672      	cpsid	i
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	b662      	cpsie	i
 80053f0:	61fb      	str	r3, [r7, #28]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053f6:	f002 fc49 	bl	8007c8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <xQueueGenericSend+0xe4>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d129      	bne.n	8005460 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005412:	f000 fc82 	bl	8005d1a <prvCopyDataToQueue>
 8005416:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	2b00      	cmp	r3, #0
 800541e:	d010      	beq.n	8005442 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	3324      	adds	r3, #36	; 0x24
 8005424:	4618      	mov	r0, r3
 8005426:	f001 fc09 	bl	8006c3c <xTaskRemoveFromEventList>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d013      	beq.n	8005458 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005430:	4b3f      	ldr	r3, [pc, #252]	; (8005530 <xQueueGenericSend+0x208>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	e00a      	b.n	8005458 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005448:	4b39      	ldr	r3, [pc, #228]	; (8005530 <xQueueGenericSend+0x208>)
 800544a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005458:	f002 fc4c 	bl	8007cf4 <vPortExitCritical>
				return pdPASS;
 800545c:	2301      	movs	r3, #1
 800545e:	e063      	b.n	8005528 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d103      	bne.n	800546e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005466:	f002 fc45 	bl	8007cf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800546a:	2300      	movs	r3, #0
 800546c:	e05c      	b.n	8005528 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005470:	2b00      	cmp	r3, #0
 8005472:	d106      	bne.n	8005482 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005474:	f107 0314 	add.w	r3, r7, #20
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fc45 	bl	8006d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800547e:	2301      	movs	r3, #1
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005482:	f002 fc37 	bl	8007cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005486:	f001 f9ab 	bl	80067e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800548a:	f002 fbff 	bl	8007c8c <vPortEnterCritical>
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005494:	b25b      	sxtb	r3, r3
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800549a:	d103      	bne.n	80054a4 <xQueueGenericSend+0x17c>
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054aa:	b25b      	sxtb	r3, r3
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b0:	d103      	bne.n	80054ba <xQueueGenericSend+0x192>
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ba:	f002 fc1b 	bl	8007cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054be:	1d3a      	adds	r2, r7, #4
 80054c0:	f107 0314 	add.w	r3, r7, #20
 80054c4:	4611      	mov	r1, r2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f001 fc34 	bl	8006d34 <xTaskCheckForTimeOut>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d124      	bne.n	800551c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054d4:	f000 fd19 	bl	8005f0a <prvIsQueueFull>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d018      	beq.n	8005510 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	3310      	adds	r3, #16
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 fb54 	bl	8006b94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ee:	f000 fca4 	bl	8005e3a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054f2:	f001 f983 	bl	80067fc <xTaskResumeAll>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f af7c 	bne.w	80053f6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <xQueueGenericSend+0x208>)
 8005500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	e772      	b.n	80053f6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005512:	f000 fc92 	bl	8005e3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005516:	f001 f971 	bl	80067fc <xTaskResumeAll>
 800551a:	e76c      	b.n	80053f6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800551c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551e:	f000 fc8c 	bl	8005e3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005522:	f001 f96b 	bl	80067fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005526:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005528:	4618      	mov	r0, r3
 800552a:	3738      	adds	r7, #56	; 0x38
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08e      	sub	sp, #56	; 0x38
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10c      	bne.n	8005566 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	b672      	cpsid	i
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	b662      	cpsie	i
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d103      	bne.n	8005574 <xQueueGenericSendFromISR+0x40>
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <xQueueGenericSendFromISR+0x44>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <xQueueGenericSendFromISR+0x46>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10c      	bne.n	8005598 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	b672      	cpsid	i
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	b662      	cpsie	i
 8005592:	623b      	str	r3, [r7, #32]
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d103      	bne.n	80055a6 <xQueueGenericSendFromISR+0x72>
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <xQueueGenericSendFromISR+0x76>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <xQueueGenericSendFromISR+0x78>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10c      	bne.n	80055ca <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	b672      	cpsid	i
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	b662      	cpsie	i
 80055c4:	61fb      	str	r3, [r7, #28]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ca:	f002 fc47 	bl	8007e5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055ce:	f3ef 8211 	mrs	r2, BASEPRI
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	b672      	cpsid	i
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	b662      	cpsie	i
 80055e6:	61ba      	str	r2, [r7, #24]
 80055e8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <xQueueGenericSendFromISR+0xcc>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d12c      	bne.n	800565a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005610:	f000 fb83 	bl	8005d1a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005614:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800561c:	d112      	bne.n	8005644 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d016      	beq.n	8005654 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	3324      	adds	r3, #36	; 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f001 fb06 	bl	8006c3c <xTaskRemoveFromEventList>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00e      	beq.n	8005654 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e007      	b.n	8005654 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005644:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005648:	3301      	adds	r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	b25a      	sxtb	r2, r3
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005654:	2301      	movs	r3, #1
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005658:	e001      	b.n	800565e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800565a:	2300      	movs	r3, #0
 800565c:	637b      	str	r3, [r7, #52]	; 0x34
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005668:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800566c:	4618      	mov	r0, r3
 800566e:	3738      	adds	r7, #56	; 0x38
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08e      	sub	sp, #56	; 0x38
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10c      	bne.n	80056a2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	b672      	cpsid	i
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	b662      	cpsie	i
 800569c:	623b      	str	r3, [r7, #32]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00c      	beq.n	80056c4 <xQueueGiveFromISR+0x50>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	b672      	cpsid	i
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	b662      	cpsie	i
 80056be:	61fb      	str	r3, [r7, #28]
}
 80056c0:	bf00      	nop
 80056c2:	e7fe      	b.n	80056c2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <xQueueGiveFromISR+0x60>
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <xQueueGiveFromISR+0x64>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <xQueueGiveFromISR+0x66>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10c      	bne.n	80056f8 <xQueueGiveFromISR+0x84>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	b672      	cpsid	i
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	b662      	cpsie	i
 80056f2:	61bb      	str	r3, [r7, #24]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056f8:	f002 fbb0 	bl	8007e5c <vPortValidateInterruptPriority>
	__asm volatile
 80056fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	b672      	cpsid	i
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	b662      	cpsie	i
 8005714:	617a      	str	r2, [r7, #20]
 8005716:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005718:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005728:	429a      	cmp	r2, r3
 800572a:	d22b      	bcs.n	8005784 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800573e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005746:	d112      	bne.n	800576e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	2b00      	cmp	r3, #0
 800574e:	d016      	beq.n	800577e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	3324      	adds	r3, #36	; 0x24
 8005754:	4618      	mov	r0, r3
 8005756:	f001 fa71 	bl	8006c3c <xTaskRemoveFromEventList>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00e      	beq.n	800577e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e007      	b.n	800577e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800576e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005772:	3301      	adds	r3, #1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	b25a      	sxtb	r2, r3
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800577e:	2301      	movs	r3, #1
 8005780:	637b      	str	r3, [r7, #52]	; 0x34
 8005782:	e001      	b.n	8005788 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005784:	2300      	movs	r3, #0
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f383 8811 	msr	BASEPRI, r3
}
 8005792:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005796:	4618      	mov	r0, r3
 8005798:	3738      	adds	r7, #56	; 0x38
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08c      	sub	sp, #48	; 0x30
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057ac:	2300      	movs	r3, #0
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10c      	bne.n	80057d4 <xQueueReceive+0x34>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	b672      	cpsid	i
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	b662      	cpsie	i
 80057ce:	623b      	str	r3, [r7, #32]
}
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <xQueueReceive+0x42>
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <xQueueReceive+0x46>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <xQueueReceive+0x48>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10c      	bne.n	8005806 <xQueueReceive+0x66>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	b672      	cpsid	i
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	b662      	cpsie	i
 8005800:	61fb      	str	r3, [r7, #28]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005806:	f001 fbef 	bl	8006fe8 <xTaskGetSchedulerState>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <xQueueReceive+0x76>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <xQueueReceive+0x7a>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <xQueueReceive+0x7c>
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10c      	bne.n	800583a <xQueueReceive+0x9a>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	b672      	cpsid	i
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	b662      	cpsie	i
 8005834:	61bb      	str	r3, [r7, #24]
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800583a:	f002 fa27 	bl	8007c8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01f      	beq.n	800588a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800584e:	f000 face 	bl	8005dee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	1e5a      	subs	r2, r3, #1
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00f      	beq.n	8005882 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	3310      	adds	r3, #16
 8005866:	4618      	mov	r0, r3
 8005868:	f001 f9e8 	bl	8006c3c <xTaskRemoveFromEventList>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d007      	beq.n	8005882 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005872:	4b3d      	ldr	r3, [pc, #244]	; (8005968 <xQueueReceive+0x1c8>)
 8005874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005882:	f002 fa37 	bl	8007cf4 <vPortExitCritical>
				return pdPASS;
 8005886:	2301      	movs	r3, #1
 8005888:	e069      	b.n	800595e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d103      	bne.n	8005898 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005890:	f002 fa30 	bl	8007cf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005894:	2300      	movs	r3, #0
 8005896:	e062      	b.n	800595e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800589e:	f107 0310 	add.w	r3, r7, #16
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fa30 	bl	8006d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ac:	f002 fa22 	bl	8007cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058b0:	f000 ff96 	bl	80067e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058b4:	f002 f9ea 	bl	8007c8c <vPortEnterCritical>
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058be:	b25b      	sxtb	r3, r3
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058c4:	d103      	bne.n	80058ce <xQueueReceive+0x12e>
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058d4:	b25b      	sxtb	r3, r3
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058da:	d103      	bne.n	80058e4 <xQueueReceive+0x144>
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058e4:	f002 fa06 	bl	8007cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058e8:	1d3a      	adds	r2, r7, #4
 80058ea:	f107 0310 	add.w	r3, r7, #16
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 fa1f 	bl	8006d34 <xTaskCheckForTimeOut>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d123      	bne.n	8005944 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058fe:	f000 faee 	bl	8005ede <prvIsQueueEmpty>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d017      	beq.n	8005938 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	3324      	adds	r3, #36	; 0x24
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f001 f93f 	bl	8006b94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005918:	f000 fa8f 	bl	8005e3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800591c:	f000 ff6e 	bl	80067fc <xTaskResumeAll>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d189      	bne.n	800583a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005926:	4b10      	ldr	r3, [pc, #64]	; (8005968 <xQueueReceive+0x1c8>)
 8005928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	e780      	b.n	800583a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800593a:	f000 fa7e 	bl	8005e3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800593e:	f000 ff5d 	bl	80067fc <xTaskResumeAll>
 8005942:	e77a      	b.n	800583a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005946:	f000 fa78 	bl	8005e3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800594a:	f000 ff57 	bl	80067fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800594e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005950:	f000 fac5 	bl	8005ede <prvIsQueueEmpty>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	f43f af6f 	beq.w	800583a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800595c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800595e:	4618      	mov	r0, r3
 8005960:	3730      	adds	r7, #48	; 0x30
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08e      	sub	sp, #56	; 0x38
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10c      	bne.n	80059a2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	b672      	cpsid	i
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	b662      	cpsie	i
 800599c:	623b      	str	r3, [r7, #32]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00c      	beq.n	80059c4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	b672      	cpsid	i
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	b662      	cpsie	i
 80059be:	61fb      	str	r3, [r7, #28]
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059c4:	f001 fb10 	bl	8006fe8 <xTaskGetSchedulerState>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <xQueueSemaphoreTake+0x68>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <xQueueSemaphoreTake+0x6c>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <xQueueSemaphoreTake+0x6e>
 80059d8:	2300      	movs	r3, #0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10c      	bne.n	80059f8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	b672      	cpsid	i
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	b662      	cpsie	i
 80059f2:	61bb      	str	r3, [r7, #24]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059f8:	f002 f948 	bl	8007c8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d024      	beq.n	8005a52 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	1e5a      	subs	r2, r3, #1
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005a18:	f001 fc64 	bl	80072e4 <pvTaskIncrementMutexHeldCount>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00f      	beq.n	8005a4a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	3310      	adds	r3, #16
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 f904 	bl	8006c3c <xTaskRemoveFromEventList>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a3a:	4b55      	ldr	r3, [pc, #340]	; (8005b90 <xQueueSemaphoreTake+0x224>)
 8005a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a4a:	f002 f953 	bl	8007cf4 <vPortExitCritical>
				return pdPASS;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e099      	b.n	8005b86 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d113      	bne.n	8005a80 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	b672      	cpsid	i
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	b662      	cpsie	i
 8005a72:	617b      	str	r3, [r7, #20]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a78:	f002 f93c 	bl	8007cf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e082      	b.n	8005b86 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a86:	f107 030c 	add.w	r3, r7, #12
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 f93c 	bl	8006d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a94:	f002 f92e 	bl	8007cf4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a98:	f000 fea2 	bl	80067e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a9c:	f002 f8f6 	bl	8007c8c <vPortEnterCritical>
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa6:	b25b      	sxtb	r3, r3
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aac:	d103      	bne.n	8005ab6 <xQueueSemaphoreTake+0x14a>
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005abc:	b25b      	sxtb	r3, r3
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac2:	d103      	bne.n	8005acc <xQueueSemaphoreTake+0x160>
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005acc:	f002 f912 	bl	8007cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ad0:	463a      	mov	r2, r7
 8005ad2:	f107 030c 	add.w	r3, r7, #12
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 f92b 	bl	8006d34 <xTaskCheckForTimeOut>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d132      	bne.n	8005b4a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ae6:	f000 f9fa 	bl	8005ede <prvIsQueueEmpty>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d026      	beq.n	8005b3e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8005af8:	f002 f8c8 	bl	8007c8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fa8f 	bl	8007024 <xTaskPriorityInherit>
 8005b06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b08:	f002 f8f4 	bl	8007cf4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	3324      	adds	r3, #36	; 0x24
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	4611      	mov	r1, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 f83d 	bl	8006b94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b1c:	f000 f98d 	bl	8005e3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b20:	f000 fe6c 	bl	80067fc <xTaskResumeAll>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f47f af66 	bne.w	80059f8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005b2c:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <xQueueSemaphoreTake+0x224>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	e75c      	b.n	80059f8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b40:	f000 f97b 	bl	8005e3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b44:	f000 fe5a 	bl	80067fc <xTaskResumeAll>
 8005b48:	e756      	b.n	80059f8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b4c:	f000 f975 	bl	8005e3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b50:	f000 fe54 	bl	80067fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b56:	f000 f9c2 	bl	8005ede <prvIsQueueEmpty>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f43f af4b 	beq.w	80059f8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00d      	beq.n	8005b84 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005b68:	f002 f890 	bl	8007c8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b6e:	f000 f8bc 	bl	8005cea <prvGetDisinheritPriorityAfterTimeout>
 8005b72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 fb2c 	bl	80071d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b80:	f002 f8b8 	bl	8007cf4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3738      	adds	r7, #56	; 0x38
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08e      	sub	sp, #56	; 0x38
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10c      	bne.n	8005bc4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	b672      	cpsid	i
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	b662      	cpsie	i
 8005bbe:	623b      	str	r3, [r7, #32]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <xQueueReceiveFromISR+0x3e>
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <xQueueReceiveFromISR+0x42>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <xQueueReceiveFromISR+0x44>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10c      	bne.n	8005bf6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	b672      	cpsid	i
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	b662      	cpsie	i
 8005bf0:	61fb      	str	r3, [r7, #28]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bf6:	f002 f931 	bl	8007e5c <vPortValidateInterruptPriority>
	__asm volatile
 8005bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	b672      	cpsid	i
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	b662      	cpsie	i
 8005c12:	61ba      	str	r2, [r7, #24]
 8005c14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d02f      	beq.n	8005c86 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c34:	f000 f8db 	bl	8005dee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	1e5a      	subs	r2, r3, #1
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005c40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c48:	d112      	bne.n	8005c70 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d016      	beq.n	8005c80 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	3310      	adds	r3, #16
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fff0 	bl	8006c3c <xTaskRemoveFromEventList>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00e      	beq.n	8005c80 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e007      	b.n	8005c80 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c74:	3301      	adds	r3, #1
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	b25a      	sxtb	r2, r3
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005c80:	2301      	movs	r3, #1
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
 8005c84:	e001      	b.n	8005c8a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f383 8811 	msr	BASEPRI, r3
}
 8005c94:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3738      	adds	r7, #56	; 0x38
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10c      	bne.n	8005ccc <vQueueDelete+0x2c>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	b672      	cpsid	i
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	b662      	cpsie	i
 8005cc6:	60bb      	str	r3, [r7, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f95f 	bl	8005f90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f002 f9cb 	bl	8008078 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d006      	beq.n	8005d08 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	e001      	b.n	8005d0c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10d      	bne.n	8005d54 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d14d      	bne.n	8005ddc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 f9d5 	bl	80070f4 <xTaskPriorityDisinherit>
 8005d4a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	609a      	str	r2, [r3, #8]
 8005d52:	e043      	b.n	8005ddc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d119      	bne.n	8005d8e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6858      	ldr	r0, [r3, #4]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	461a      	mov	r2, r3
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	f002 fadb 	bl	8008320 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	441a      	add	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d32b      	bcc.n	8005ddc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	605a      	str	r2, [r3, #4]
 8005d8c:	e026      	b.n	8005ddc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	68d8      	ldr	r0, [r3, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	461a      	mov	r2, r3
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	f002 fac1 	bl	8008320 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	425b      	negs	r3, r3
 8005da8:	441a      	add	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d207      	bcs.n	8005dca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	425b      	negs	r3, r3
 8005dc4:	441a      	add	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d105      	bne.n	8005ddc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005de4:	697b      	ldr	r3, [r7, #20]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d018      	beq.n	8005e32 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	441a      	add	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d303      	bcc.n	8005e22 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68d9      	ldr	r1, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6838      	ldr	r0, [r7, #0]
 8005e2e:	f002 fa77 	bl	8008320 <memcpy>
	}
}
 8005e32:	bf00      	nop
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e42:	f001 ff23 	bl	8007c8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e4c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e4e:	e011      	b.n	8005e74 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d012      	beq.n	8005e7e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3324      	adds	r3, #36	; 0x24
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 feed 	bl	8006c3c <xTaskRemoveFromEventList>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e68:	f000 ffca 	bl	8006e00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	dce9      	bgt.n	8005e50 <prvUnlockQueue+0x16>
 8005e7c:	e000      	b.n	8005e80 <prvUnlockQueue+0x46>
					break;
 8005e7e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	22ff      	movs	r2, #255	; 0xff
 8005e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e88:	f001 ff34 	bl	8007cf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e8c:	f001 fefe 	bl	8007c8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e96:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e98:	e011      	b.n	8005ebe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d012      	beq.n	8005ec8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3310      	adds	r3, #16
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fec8 	bl	8006c3c <xTaskRemoveFromEventList>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005eb2:	f000 ffa5 	bl	8006e00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005eb6:	7bbb      	ldrb	r3, [r7, #14]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ebe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	dce9      	bgt.n	8005e9a <prvUnlockQueue+0x60>
 8005ec6:	e000      	b.n	8005eca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ec8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	22ff      	movs	r2, #255	; 0xff
 8005ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ed2:	f001 ff0f 	bl	8007cf4 <vPortExitCritical>
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ee6:	f001 fed1 	bl	8007c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	e001      	b.n	8005efc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005efc:	f001 fefa 	bl	8007cf4 <vPortExitCritical>

	return xReturn;
 8005f00:	68fb      	ldr	r3, [r7, #12]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f12:	f001 febb 	bl	8007c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d102      	bne.n	8005f28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f22:	2301      	movs	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e001      	b.n	8005f2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f2c:	f001 fee2 	bl	8007cf4 <vPortExitCritical>

	return xReturn;
 8005f30:	68fb      	ldr	r3, [r7, #12]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	e014      	b.n	8005f76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f4c:	4a0f      	ldr	r2, [pc, #60]	; (8005f8c <vQueueAddToRegistry+0x50>)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10b      	bne.n	8005f70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f58:	490c      	ldr	r1, [pc, #48]	; (8005f8c <vQueueAddToRegistry+0x50>)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f62:	4a0a      	ldr	r2, [pc, #40]	; (8005f8c <vQueueAddToRegistry+0x50>)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f6e:	e006      	b.n	8005f7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b07      	cmp	r3, #7
 8005f7a:	d9e7      	bls.n	8005f4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20004f18 	.word	0x20004f18

08005f90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	e016      	b.n	8005fcc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005f9e:	4a10      	ldr	r2, [pc, #64]	; (8005fe0 <vQueueUnregisterQueue+0x50>)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d10b      	bne.n	8005fc6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005fae:	4a0c      	ldr	r2, [pc, #48]	; (8005fe0 <vQueueUnregisterQueue+0x50>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <vQueueUnregisterQueue+0x50>)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	605a      	str	r2, [r3, #4]
				break;
 8005fc4:	e006      	b.n	8005fd4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b07      	cmp	r3, #7
 8005fd0:	d9e5      	bls.n	8005f9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20004f18 	.word	0x20004f18

08005fe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ff4:	f001 fe4a 	bl	8007c8c <vPortEnterCritical>
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ffe:	b25b      	sxtb	r3, r3
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006004:	d103      	bne.n	800600e <vQueueWaitForMessageRestricted+0x2a>
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006014:	b25b      	sxtb	r3, r3
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800601a:	d103      	bne.n	8006024 <vQueueWaitForMessageRestricted+0x40>
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006024:	f001 fe66 	bl	8007cf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	3324      	adds	r3, #36	; 0x24
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fdd1 	bl	8006be0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800603e:	6978      	ldr	r0, [r7, #20]
 8006040:	f7ff fefb 	bl	8005e3a <prvUnlockQueue>
	}
 8006044:	bf00      	nop
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08e      	sub	sp, #56	; 0x38
 8006050:	af04      	add	r7, sp, #16
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10c      	bne.n	800607a <xTaskCreateStatic+0x2e>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	b672      	cpsid	i
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	b662      	cpsie	i
 8006074:	623b      	str	r3, [r7, #32]
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10c      	bne.n	800609a <xTaskCreateStatic+0x4e>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	b672      	cpsid	i
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	b662      	cpsie	i
 8006094:	61fb      	str	r3, [r7, #28]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800609a:	235c      	movs	r3, #92	; 0x5c
 800609c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b5c      	cmp	r3, #92	; 0x5c
 80060a2:	d00c      	beq.n	80060be <xTaskCreateStatic+0x72>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	b672      	cpsid	i
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	b662      	cpsie	i
 80060b8:	61bb      	str	r3, [r7, #24]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01e      	beq.n	8006104 <xTaskCreateStatic+0xb8>
 80060c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01b      	beq.n	8006104 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060de:	2300      	movs	r3, #0
 80060e0:	9303      	str	r3, [sp, #12]
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	9302      	str	r3, [sp, #8]
 80060e6:	f107 0314 	add.w	r3, r7, #20
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f850 	bl	800619c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060fe:	f000 f8df 	bl	80062c0 <prvAddNewTaskToReadyList>
 8006102:	e001      	b.n	8006108 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006108:	697b      	ldr	r3, [r7, #20]
	}
 800610a:	4618      	mov	r0, r3
 800610c:	3728      	adds	r7, #40	; 0x28
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006112:	b580      	push	{r7, lr}
 8006114:	b08c      	sub	sp, #48	; 0x30
 8006116:	af04      	add	r7, sp, #16
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	4613      	mov	r3, r2
 8006120:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fedc 	bl	8007ee4 <pvPortMalloc>
 800612c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00e      	beq.n	8006152 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006134:	205c      	movs	r0, #92	; 0x5c
 8006136:	f001 fed5 	bl	8007ee4 <pvPortMalloc>
 800613a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
 8006148:	e005      	b.n	8006156 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800614a:	6978      	ldr	r0, [r7, #20]
 800614c:	f001 ff94 	bl	8008078 <vPortFree>
 8006150:	e001      	b.n	8006156 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d017      	beq.n	800618c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006164:	88fa      	ldrh	r2, [r7, #6]
 8006166:	2300      	movs	r3, #0
 8006168:	9303      	str	r3, [sp, #12]
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	9302      	str	r3, [sp, #8]
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f80e 	bl	800619c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006180:	69f8      	ldr	r0, [r7, #28]
 8006182:	f000 f89d 	bl	80062c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006186:	2301      	movs	r3, #1
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	e002      	b.n	8006192 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800618c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006190:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006192:	69bb      	ldr	r3, [r7, #24]
	}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	461a      	mov	r2, r3
 80061b4:	21a5      	movs	r1, #165	; 0xa5
 80061b6:	f002 f8c1 	bl	800833c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80061c4:	440b      	add	r3, r1
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f023 0307 	bic.w	r3, r3, #7
 80061d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	b672      	cpsid	i
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	b662      	cpsie	i
 80061f2:	617b      	str	r3, [r7, #20]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01f      	beq.n	800623e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e012      	b.n	800622a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	7819      	ldrb	r1, [r3, #0]
 800620c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	3334      	adds	r3, #52	; 0x34
 8006214:	460a      	mov	r2, r1
 8006216:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d006      	beq.n	8006232 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	3301      	adds	r3, #1
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2b0f      	cmp	r3, #15
 800622e:	d9e9      	bls.n	8006204 <prvInitialiseNewTask+0x68>
 8006230:	e000      	b.n	8006234 <prvInitialiseNewTask+0x98>
			{
				break;
 8006232:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800623c:	e003      	b.n	8006246 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	2b37      	cmp	r3, #55	; 0x37
 800624a:	d901      	bls.n	8006250 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800624c:	2337      	movs	r3, #55	; 0x37
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006254:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800625a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	2200      	movs	r2, #0
 8006260:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	3304      	adds	r3, #4
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fd4c 	bl	8004d04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	3318      	adds	r3, #24
 8006270:	4618      	mov	r0, r3
 8006272:	f7fe fd47 	bl	8004d04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2200      	movs	r2, #0
 8006290:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	68f9      	ldr	r1, [r7, #12]
 800629e:	69b8      	ldr	r0, [r7, #24]
 80062a0:	f001 fbe4 	bl	8007a6c <pxPortInitialiseStack>
 80062a4:	4602      	mov	r2, r0
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b6:	bf00      	nop
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062c8:	f001 fce0 	bl	8007c8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062cc:	4b2d      	ldr	r3, [pc, #180]	; (8006384 <prvAddNewTaskToReadyList+0xc4>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	4a2c      	ldr	r2, [pc, #176]	; (8006384 <prvAddNewTaskToReadyList+0xc4>)
 80062d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062d6:	4b2c      	ldr	r3, [pc, #176]	; (8006388 <prvAddNewTaskToReadyList+0xc8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062de:	4a2a      	ldr	r2, [pc, #168]	; (8006388 <prvAddNewTaskToReadyList+0xc8>)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062e4:	4b27      	ldr	r3, [pc, #156]	; (8006384 <prvAddNewTaskToReadyList+0xc4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d110      	bne.n	800630e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062ec:	f000 fdac 	bl	8006e48 <prvInitialiseTaskLists>
 80062f0:	e00d      	b.n	800630e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062f2:	4b26      	ldr	r3, [pc, #152]	; (800638c <prvAddNewTaskToReadyList+0xcc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062fa:	4b23      	ldr	r3, [pc, #140]	; (8006388 <prvAddNewTaskToReadyList+0xc8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	429a      	cmp	r2, r3
 8006306:	d802      	bhi.n	800630e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006308:	4a1f      	ldr	r2, [pc, #124]	; (8006388 <prvAddNewTaskToReadyList+0xc8>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800630e:	4b20      	ldr	r3, [pc, #128]	; (8006390 <prvAddNewTaskToReadyList+0xd0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <prvAddNewTaskToReadyList+0xd0>)
 8006316:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006318:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <prvAddNewTaskToReadyList+0xd0>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006324:	4b1b      	ldr	r3, [pc, #108]	; (8006394 <prvAddNewTaskToReadyList+0xd4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d903      	bls.n	8006334 <prvAddNewTaskToReadyList+0x74>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	4a18      	ldr	r2, [pc, #96]	; (8006394 <prvAddNewTaskToReadyList+0xd4>)
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4a15      	ldr	r2, [pc, #84]	; (8006398 <prvAddNewTaskToReadyList+0xd8>)
 8006342:	441a      	add	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f7fe fce7 	bl	8004d1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006350:	f001 fcd0 	bl	8007cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006354:	4b0d      	ldr	r3, [pc, #52]	; (800638c <prvAddNewTaskToReadyList+0xcc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00e      	beq.n	800637a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <prvAddNewTaskToReadyList+0xc8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	429a      	cmp	r2, r3
 8006368:	d207      	bcs.n	800637a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800636a:	4b0c      	ldr	r3, [pc, #48]	; (800639c <prvAddNewTaskToReadyList+0xdc>)
 800636c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800637a:	bf00      	nop
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000c30 	.word	0x20000c30
 8006388:	2000075c 	.word	0x2000075c
 800638c:	20000c3c 	.word	0x20000c3c
 8006390:	20000c4c 	.word	0x20000c4c
 8006394:	20000c38 	.word	0x20000c38
 8006398:	20000760 	.word	0x20000760
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80063a8:	f001 fc70 	bl	8007c8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <vTaskDelete+0x18>
 80063b2:	4b2d      	ldr	r3, [pc, #180]	; (8006468 <vTaskDelete+0xc8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	e000      	b.n	80063ba <vTaskDelete+0x1a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3304      	adds	r3, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe fd09 	bl	8004dd8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3318      	adds	r3, #24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe fd00 	bl	8004dd8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80063d8:	4b24      	ldr	r3, [pc, #144]	; (800646c <vTaskDelete+0xcc>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a23      	ldr	r2, [pc, #140]	; (800646c <vTaskDelete+0xcc>)
 80063e0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80063e2:	4b21      	ldr	r3, [pc, #132]	; (8006468 <vTaskDelete+0xc8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d10b      	bne.n	8006404 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3304      	adds	r3, #4
 80063f0:	4619      	mov	r1, r3
 80063f2:	481f      	ldr	r0, [pc, #124]	; (8006470 <vTaskDelete+0xd0>)
 80063f4:	f7fe fc93 	bl	8004d1e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80063f8:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <vTaskDelete+0xd4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <vTaskDelete+0xd4>)
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e009      	b.n	8006418 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006404:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <vTaskDelete+0xd8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3b01      	subs	r3, #1
 800640a:	4a1b      	ldr	r2, [pc, #108]	; (8006478 <vTaskDelete+0xd8>)
 800640c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fd88 	bl	8006f24 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006414:	f000 fdb8 	bl	8006f88 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006418:	f001 fc6c 	bl	8007cf4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800641c:	4b17      	ldr	r3, [pc, #92]	; (800647c <vTaskDelete+0xdc>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01d      	beq.n	8006460 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8006424:	4b10      	ldr	r3, [pc, #64]	; (8006468 <vTaskDelete+0xc8>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	429a      	cmp	r2, r3
 800642c:	d118      	bne.n	8006460 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800642e:	4b14      	ldr	r3, [pc, #80]	; (8006480 <vTaskDelete+0xe0>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00c      	beq.n	8006450 <vTaskDelete+0xb0>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	b672      	cpsid	i
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	b662      	cpsie	i
 800644a:	60bb      	str	r3, [r7, #8]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8006450:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <vTaskDelete+0xe4>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	2000075c 	.word	0x2000075c
 800646c:	20000c4c 	.word	0x20000c4c
 8006470:	20000c04 	.word	0x20000c04
 8006474:	20000c18 	.word	0x20000c18
 8006478:	20000c30 	.word	0x20000c30
 800647c:	20000c3c 	.word	0x20000c3c
 8006480:	20000c58 	.word	0x20000c58
 8006484:	e000ed04 	.word	0xe000ed04

08006488 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d019      	beq.n	80064ce <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <vTaskDelay+0x64>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00c      	beq.n	80064bc <vTaskDelay+0x34>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	b672      	cpsid	i
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	b662      	cpsie	i
 80064b6:	60bb      	str	r3, [r7, #8]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <vTaskDelay+0x32>
			vTaskSuspendAll();
 80064bc:	f000 f990 	bl	80067e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064c0:	2100      	movs	r1, #0
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 ff22 	bl	800730c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064c8:	f000 f998 	bl	80067fc <xTaskResumeAll>
 80064cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d107      	bne.n	80064e4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <vTaskDelay+0x68>)
 80064d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000c58 	.word	0x20000c58
 80064f0:	e000ed04 	.word	0xe000ed04

080064f4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80064fc:	f001 fbc6 	bl	8007c8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <vTaskSuspend+0x18>
 8006506:	4b31      	ldr	r3, [pc, #196]	; (80065cc <vTaskSuspend+0xd8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	e000      	b.n	800650e <vTaskSuspend+0x1a>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3304      	adds	r3, #4
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe fc5f 	bl	8004dd8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3318      	adds	r3, #24
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe fc56 	bl	8004dd8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4827      	ldr	r0, [pc, #156]	; (80065d0 <vTaskSuspend+0xdc>)
 8006534:	f7fe fbf3 	bl	8004d1e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b01      	cmp	r3, #1
 8006542:	d103      	bne.n	800654c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800654c:	f001 fbd2 	bl	8007cf4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006550:	4b20      	ldr	r3, [pc, #128]	; (80065d4 <vTaskSuspend+0xe0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006558:	f001 fb98 	bl	8007c8c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800655c:	f000 fd14 	bl	8006f88 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006560:	f001 fbc8 	bl	8007cf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006564:	4b19      	ldr	r3, [pc, #100]	; (80065cc <vTaskSuspend+0xd8>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	429a      	cmp	r2, r3
 800656c:	d129      	bne.n	80065c2 <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800656e:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <vTaskSuspend+0xe0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d019      	beq.n	80065aa <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006576:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <vTaskSuspend+0xe4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00c      	beq.n	8006598 <vTaskSuspend+0xa4>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	b672      	cpsid	i
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	b662      	cpsie	i
 8006592:	60bb      	str	r3, [r7, #8]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8006598:	4b10      	ldr	r3, [pc, #64]	; (80065dc <vTaskSuspend+0xe8>)
 800659a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065a8:	e00b      	b.n	80065c2 <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80065aa:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <vTaskSuspend+0xdc>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <vTaskSuspend+0xec>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d103      	bne.n	80065be <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 80065b6:	4b05      	ldr	r3, [pc, #20]	; (80065cc <vTaskSuspend+0xd8>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
	}
 80065bc:	e001      	b.n	80065c2 <vTaskSuspend+0xce>
					vTaskSwitchContext();
 80065be:	f000 fa89 	bl	8006ad4 <vTaskSwitchContext>
	}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	2000075c 	.word	0x2000075c
 80065d0:	20000c1c 	.word	0x20000c1c
 80065d4:	20000c3c 	.word	0x20000c3c
 80065d8:	20000c58 	.word	0x20000c58
 80065dc:	e000ed04 	.word	0xe000ed04
 80065e0:	20000c30 	.word	0x20000c30

080065e4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10c      	bne.n	8006614 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	b672      	cpsid	i
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	b662      	cpsie	i
 800660e:	60fb      	str	r3, [r7, #12]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	4a0a      	ldr	r2, [pc, #40]	; (8006644 <prvTaskIsTaskSuspended+0x60>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d10a      	bne.n	8006634 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	4a09      	ldr	r2, [pc, #36]	; (8006648 <prvTaskIsTaskSuspended+0x64>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d005      	beq.n	8006634 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006634:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006636:	4618      	mov	r0, r3
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000c1c 	.word	0x20000c1c
 8006648:	20000bf0 	.word	0x20000bf0

0800664c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10c      	bne.n	8006678 <vTaskResume+0x2c>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	b672      	cpsid	i
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	b662      	cpsie	i
 8006672:	60bb      	str	r3, [r7, #8]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006678:	4b20      	ldr	r3, [pc, #128]	; (80066fc <vTaskResume+0xb0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	429a      	cmp	r2, r3
 8006680:	d038      	beq.n	80066f4 <vTaskResume+0xa8>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d035      	beq.n	80066f4 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8006688:	f001 fb00 	bl	8007c8c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7ff ffa9 	bl	80065e4 <prvTaskIsTaskSuspended>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d02b      	beq.n	80066f0 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3304      	adds	r3, #4
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe fb9b 	bl	8004dd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a6:	4b16      	ldr	r3, [pc, #88]	; (8006700 <vTaskResume+0xb4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d903      	bls.n	80066b6 <vTaskResume+0x6a>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	4a13      	ldr	r2, [pc, #76]	; (8006700 <vTaskResume+0xb4>)
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4a10      	ldr	r2, [pc, #64]	; (8006704 <vTaskResume+0xb8>)
 80066c4:	441a      	add	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f7fe fb26 	bl	8004d1e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d6:	4b09      	ldr	r3, [pc, #36]	; (80066fc <vTaskResume+0xb0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d307      	bcc.n	80066f0 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80066e0:	4b09      	ldr	r3, [pc, #36]	; (8006708 <vTaskResume+0xbc>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80066f0:	f001 fb00 	bl	8007cf4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	2000075c 	.word	0x2000075c
 8006700:	20000c38 	.word	0x20000c38
 8006704:	20000760 	.word	0x20000760
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08a      	sub	sp, #40	; 0x28
 8006710:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800671a:	463a      	mov	r2, r7
 800671c:	1d39      	adds	r1, r7, #4
 800671e:	f107 0308 	add.w	r3, r7, #8
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fa9a 	bl	8004c5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	9202      	str	r2, [sp, #8]
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	2300      	movs	r3, #0
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	2300      	movs	r3, #0
 8006738:	460a      	mov	r2, r1
 800673a:	4923      	ldr	r1, [pc, #140]	; (80067c8 <vTaskStartScheduler+0xbc>)
 800673c:	4823      	ldr	r0, [pc, #140]	; (80067cc <vTaskStartScheduler+0xc0>)
 800673e:	f7ff fc85 	bl	800604c <xTaskCreateStatic>
 8006742:	4603      	mov	r3, r0
 8006744:	4a22      	ldr	r2, [pc, #136]	; (80067d0 <vTaskStartScheduler+0xc4>)
 8006746:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006748:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <vTaskStartScheduler+0xc4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006750:	2301      	movs	r3, #1
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e001      	b.n	800675a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d102      	bne.n	8006766 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006760:	f000 fe28 	bl	80073b4 <xTimerCreateTimerTask>
 8006764:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d118      	bne.n	800679e <vTaskStartScheduler+0x92>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	b672      	cpsid	i
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	b662      	cpsie	i
 8006780:	613b      	str	r3, [r7, #16]
}
 8006782:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006784:	4b13      	ldr	r3, [pc, #76]	; (80067d4 <vTaskStartScheduler+0xc8>)
 8006786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800678a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800678c:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <vTaskStartScheduler+0xcc>)
 800678e:	2201      	movs	r2, #1
 8006790:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006792:	4b12      	ldr	r3, [pc, #72]	; (80067dc <vTaskStartScheduler+0xd0>)
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006798:	f001 f9fa 	bl	8007b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800679c:	e010      	b.n	80067c0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a4:	d10c      	bne.n	80067c0 <vTaskStartScheduler+0xb4>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	b672      	cpsid	i
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	b662      	cpsie	i
 80067ba:	60fb      	str	r3, [r7, #12]
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <vTaskStartScheduler+0xb2>
}
 80067c0:	bf00      	nop
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	080095c8 	.word	0x080095c8
 80067cc:	08006e19 	.word	0x08006e19
 80067d0:	20000c54 	.word	0x20000c54
 80067d4:	20000c50 	.word	0x20000c50
 80067d8:	20000c3c 	.word	0x20000c3c
 80067dc:	20000c34 	.word	0x20000c34

080067e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067e4:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <vTaskSuspendAll+0x18>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	4a03      	ldr	r2, [pc, #12]	; (80067f8 <vTaskSuspendAll+0x18>)
 80067ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80067ee:	bf00      	nop
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	20000c58 	.word	0x20000c58

080067fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006806:	2300      	movs	r3, #0
 8006808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800680a:	4b43      	ldr	r3, [pc, #268]	; (8006918 <xTaskResumeAll+0x11c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10c      	bne.n	800682c <xTaskResumeAll+0x30>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	b672      	cpsid	i
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	b662      	cpsie	i
 8006826:	603b      	str	r3, [r7, #0]
}
 8006828:	bf00      	nop
 800682a:	e7fe      	b.n	800682a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800682c:	f001 fa2e 	bl	8007c8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006830:	4b39      	ldr	r3, [pc, #228]	; (8006918 <xTaskResumeAll+0x11c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3b01      	subs	r3, #1
 8006836:	4a38      	ldr	r2, [pc, #224]	; (8006918 <xTaskResumeAll+0x11c>)
 8006838:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800683a:	4b37      	ldr	r3, [pc, #220]	; (8006918 <xTaskResumeAll+0x11c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d162      	bne.n	8006908 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006842:	4b36      	ldr	r3, [pc, #216]	; (800691c <xTaskResumeAll+0x120>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d05e      	beq.n	8006908 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800684a:	e02f      	b.n	80068ac <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800684c:	4b34      	ldr	r3, [pc, #208]	; (8006920 <xTaskResumeAll+0x124>)
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3318      	adds	r3, #24
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fabd 	bl	8004dd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3304      	adds	r3, #4
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe fab8 	bl	8004dd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686c:	4b2d      	ldr	r3, [pc, #180]	; (8006924 <xTaskResumeAll+0x128>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d903      	bls.n	800687c <xTaskResumeAll+0x80>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	4a2a      	ldr	r2, [pc, #168]	; (8006924 <xTaskResumeAll+0x128>)
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4a27      	ldr	r2, [pc, #156]	; (8006928 <xTaskResumeAll+0x12c>)
 800688a:	441a      	add	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3304      	adds	r3, #4
 8006890:	4619      	mov	r1, r3
 8006892:	4610      	mov	r0, r2
 8006894:	f7fe fa43 	bl	8004d1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4b23      	ldr	r3, [pc, #140]	; (800692c <xTaskResumeAll+0x130>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d302      	bcc.n	80068ac <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80068a6:	4b22      	ldr	r3, [pc, #136]	; (8006930 <xTaskResumeAll+0x134>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068ac:	4b1c      	ldr	r3, [pc, #112]	; (8006920 <xTaskResumeAll+0x124>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1cb      	bne.n	800684c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068ba:	f000 fb65 	bl	8006f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068be:	4b1d      	ldr	r3, [pc, #116]	; (8006934 <xTaskResumeAll+0x138>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d010      	beq.n	80068ec <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068ca:	f000 f847 	bl	800695c <xTaskIncrementTick>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80068d4:	4b16      	ldr	r3, [pc, #88]	; (8006930 <xTaskResumeAll+0x134>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3b01      	subs	r3, #1
 80068de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f1      	bne.n	80068ca <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <xTaskResumeAll+0x138>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068ec:	4b10      	ldr	r3, [pc, #64]	; (8006930 <xTaskResumeAll+0x134>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068f4:	2301      	movs	r3, #1
 80068f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068f8:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <xTaskResumeAll+0x13c>)
 80068fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006908:	f001 f9f4 	bl	8007cf4 <vPortExitCritical>

	return xAlreadyYielded;
 800690c:	68bb      	ldr	r3, [r7, #8]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20000c58 	.word	0x20000c58
 800691c:	20000c30 	.word	0x20000c30
 8006920:	20000bf0 	.word	0x20000bf0
 8006924:	20000c38 	.word	0x20000c38
 8006928:	20000760 	.word	0x20000760
 800692c:	2000075c 	.word	0x2000075c
 8006930:	20000c44 	.word	0x20000c44
 8006934:	20000c40 	.word	0x20000c40
 8006938:	e000ed04 	.word	0xe000ed04

0800693c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <xTaskGetTickCount+0x1c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006948:	687b      	ldr	r3, [r7, #4]
}
 800694a:	4618      	mov	r0, r3
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000c34 	.word	0x20000c34

0800695c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006966:	4b50      	ldr	r3, [pc, #320]	; (8006aa8 <xTaskIncrementTick+0x14c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 808b 	bne.w	8006a86 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006970:	4b4e      	ldr	r3, [pc, #312]	; (8006aac <xTaskIncrementTick+0x150>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006978:	4a4c      	ldr	r2, [pc, #304]	; (8006aac <xTaskIncrementTick+0x150>)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d122      	bne.n	80069ca <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006984:	4b4a      	ldr	r3, [pc, #296]	; (8006ab0 <xTaskIncrementTick+0x154>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	b672      	cpsid	i
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	b662      	cpsie	i
 80069a2:	603b      	str	r3, [r7, #0]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <xTaskIncrementTick+0x4a>
 80069a8:	4b41      	ldr	r3, [pc, #260]	; (8006ab0 <xTaskIncrementTick+0x154>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	4b41      	ldr	r3, [pc, #260]	; (8006ab4 <xTaskIncrementTick+0x158>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a3f      	ldr	r2, [pc, #252]	; (8006ab0 <xTaskIncrementTick+0x154>)
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	4a3f      	ldr	r2, [pc, #252]	; (8006ab4 <xTaskIncrementTick+0x158>)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	4b3e      	ldr	r3, [pc, #248]	; (8006ab8 <xTaskIncrementTick+0x15c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3301      	adds	r3, #1
 80069c2:	4a3d      	ldr	r2, [pc, #244]	; (8006ab8 <xTaskIncrementTick+0x15c>)
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	f000 fadf 	bl	8006f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069ca:	4b3c      	ldr	r3, [pc, #240]	; (8006abc <xTaskIncrementTick+0x160>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d349      	bcc.n	8006a68 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d4:	4b36      	ldr	r3, [pc, #216]	; (8006ab0 <xTaskIncrementTick+0x154>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069de:	4b37      	ldr	r3, [pc, #220]	; (8006abc <xTaskIncrementTick+0x160>)
 80069e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069e4:	601a      	str	r2, [r3, #0]
					break;
 80069e6:	e03f      	b.n	8006a68 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e8:	4b31      	ldr	r3, [pc, #196]	; (8006ab0 <xTaskIncrementTick+0x154>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d203      	bcs.n	8006a08 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a00:	4a2e      	ldr	r2, [pc, #184]	; (8006abc <xTaskIncrementTick+0x160>)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a06:	e02f      	b.n	8006a68 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe f9e3 	bl	8004dd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	3318      	adds	r3, #24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe f9da 	bl	8004dd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a28:	4b25      	ldr	r3, [pc, #148]	; (8006ac0 <xTaskIncrementTick+0x164>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d903      	bls.n	8006a38 <xTaskIncrementTick+0xdc>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	4a22      	ldr	r2, [pc, #136]	; (8006ac0 <xTaskIncrementTick+0x164>)
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4a1f      	ldr	r2, [pc, #124]	; (8006ac4 <xTaskIncrementTick+0x168>)
 8006a46:	441a      	add	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4610      	mov	r0, r2
 8006a50:	f7fe f965 	bl	8004d1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a58:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <xTaskIncrementTick+0x16c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d3b8      	bcc.n	80069d4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006a62:	2301      	movs	r3, #1
 8006a64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a66:	e7b5      	b.n	80069d4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a68:	4b17      	ldr	r3, [pc, #92]	; (8006ac8 <xTaskIncrementTick+0x16c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	4915      	ldr	r1, [pc, #84]	; (8006ac4 <xTaskIncrementTick+0x168>)
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d907      	bls.n	8006a90 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006a80:	2301      	movs	r3, #1
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	e004      	b.n	8006a90 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a86:	4b11      	ldr	r3, [pc, #68]	; (8006acc <xTaskIncrementTick+0x170>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	4a0f      	ldr	r2, [pc, #60]	; (8006acc <xTaskIncrementTick+0x170>)
 8006a8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a90:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <xTaskIncrementTick+0x174>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a9c:	697b      	ldr	r3, [r7, #20]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000c58 	.word	0x20000c58
 8006aac:	20000c34 	.word	0x20000c34
 8006ab0:	20000be8 	.word	0x20000be8
 8006ab4:	20000bec 	.word	0x20000bec
 8006ab8:	20000c48 	.word	0x20000c48
 8006abc:	20000c50 	.word	0x20000c50
 8006ac0:	20000c38 	.word	0x20000c38
 8006ac4:	20000760 	.word	0x20000760
 8006ac8:	2000075c 	.word	0x2000075c
 8006acc:	20000c40 	.word	0x20000c40
 8006ad0:	20000c44 	.word	0x20000c44

08006ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ada:	4b29      	ldr	r3, [pc, #164]	; (8006b80 <vTaskSwitchContext+0xac>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ae2:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <vTaskSwitchContext+0xb0>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ae8:	e043      	b.n	8006b72 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8006aea:	4b26      	ldr	r3, [pc, #152]	; (8006b84 <vTaskSwitchContext+0xb0>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af0:	4b25      	ldr	r3, [pc, #148]	; (8006b88 <vTaskSwitchContext+0xb4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e012      	b.n	8006b1e <vTaskSwitchContext+0x4a>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10c      	bne.n	8006b18 <vTaskSwitchContext+0x44>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	b672      	cpsid	i
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	b662      	cpsie	i
 8006b12:	607b      	str	r3, [r7, #4]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <vTaskSwitchContext+0x42>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	491b      	ldr	r1, [pc, #108]	; (8006b8c <vTaskSwitchContext+0xb8>)
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0e2      	beq.n	8006af8 <vTaskSwitchContext+0x24>
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <vTaskSwitchContext+0xb8>)
 8006b3e:	4413      	add	r3, r2
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	605a      	str	r2, [r3, #4]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	3308      	adds	r3, #8
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d104      	bne.n	8006b62 <vTaskSwitchContext+0x8e>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <vTaskSwitchContext+0xbc>)
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	4a06      	ldr	r2, [pc, #24]	; (8006b88 <vTaskSwitchContext+0xb4>)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6013      	str	r3, [r2, #0]
}
 8006b72:	bf00      	nop
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20000c58 	.word	0x20000c58
 8006b84:	20000c44 	.word	0x20000c44
 8006b88:	20000c38 	.word	0x20000c38
 8006b8c:	20000760 	.word	0x20000760
 8006b90:	2000075c 	.word	0x2000075c

08006b94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10c      	bne.n	8006bbe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	b672      	cpsid	i
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	b662      	cpsie	i
 8006bb8:	60fb      	str	r3, [r7, #12]
}
 8006bba:	bf00      	nop
 8006bbc:	e7fe      	b.n	8006bbc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bbe:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <vTaskPlaceOnEventList+0x48>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fe f8cd 	bl	8004d66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bcc:	2101      	movs	r1, #1
 8006bce:	6838      	ldr	r0, [r7, #0]
 8006bd0:	f000 fb9c 	bl	800730c <prvAddCurrentTaskToDelayedList>
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	2000075c 	.word	0x2000075c

08006be0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10c      	bne.n	8006c0c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	b672      	cpsid	i
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	b662      	cpsie	i
 8006c06:	617b      	str	r3, [r7, #20]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <vTaskPlaceOnEventListRestricted+0x58>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3318      	adds	r3, #24
 8006c12:	4619      	mov	r1, r3
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7fe f882 	bl	8004d1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	68b8      	ldr	r0, [r7, #8]
 8006c2a:	f000 fb6f 	bl	800730c <prvAddCurrentTaskToDelayedList>
	}
 8006c2e:	bf00      	nop
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	2000075c 	.word	0x2000075c

08006c3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10c      	bne.n	8006c6c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	b672      	cpsid	i
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	b662      	cpsie	i
 8006c66:	60fb      	str	r3, [r7, #12]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	3318      	adds	r3, #24
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe f8b1 	bl	8004dd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c76:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <xTaskRemoveFromEventList+0xb4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d11d      	bne.n	8006cba <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe f8a8 	bl	8004dd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8c:	4b19      	ldr	r3, [pc, #100]	; (8006cf4 <xTaskRemoveFromEventList+0xb8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d903      	bls.n	8006c9c <xTaskRemoveFromEventList+0x60>
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	4a16      	ldr	r2, [pc, #88]	; (8006cf4 <xTaskRemoveFromEventList+0xb8>)
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4a13      	ldr	r2, [pc, #76]	; (8006cf8 <xTaskRemoveFromEventList+0xbc>)
 8006caa:	441a      	add	r2, r3
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	f7fe f833 	bl	8004d1e <vListInsertEnd>
 8006cb8:	e005      	b.n	8006cc6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	3318      	adds	r3, #24
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	480e      	ldr	r0, [pc, #56]	; (8006cfc <xTaskRemoveFromEventList+0xc0>)
 8006cc2:	f7fe f82c 	bl	8004d1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cca:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <xTaskRemoveFromEventList+0xc4>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d905      	bls.n	8006ce0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <xTaskRemoveFromEventList+0xc8>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e001      	b.n	8006ce4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ce4:	697b      	ldr	r3, [r7, #20]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000c58 	.word	0x20000c58
 8006cf4:	20000c38 	.word	0x20000c38
 8006cf8:	20000760 	.word	0x20000760
 8006cfc:	20000bf0 	.word	0x20000bf0
 8006d00:	2000075c 	.word	0x2000075c
 8006d04:	20000c44 	.word	0x20000c44

08006d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d10:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <vTaskInternalSetTimeOutState+0x24>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d18:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <vTaskInternalSetTimeOutState+0x28>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	605a      	str	r2, [r3, #4]
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	20000c48 	.word	0x20000c48
 8006d30:	20000c34 	.word	0x20000c34

08006d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10c      	bne.n	8006d5e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	b672      	cpsid	i
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	b662      	cpsie	i
 8006d58:	613b      	str	r3, [r7, #16]
}
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10c      	bne.n	8006d7e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	b672      	cpsid	i
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	b662      	cpsie	i
 8006d78:	60fb      	str	r3, [r7, #12]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006d7e:	f000 ff85 	bl	8007c8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d82:	4b1d      	ldr	r3, [pc, #116]	; (8006df8 <xTaskCheckForTimeOut+0xc4>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d9a:	d102      	bne.n	8006da2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	e023      	b.n	8006dea <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <xTaskCheckForTimeOut+0xc8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d007      	beq.n	8006dbe <xTaskCheckForTimeOut+0x8a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d302      	bcc.n	8006dbe <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006db8:	2301      	movs	r3, #1
 8006dba:	61fb      	str	r3, [r7, #28]
 8006dbc:	e015      	b.n	8006dea <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d20b      	bcs.n	8006de0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff ff97 	bl	8006d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	e004      	b.n	8006dea <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006de6:	2301      	movs	r3, #1
 8006de8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dea:	f000 ff83 	bl	8007cf4 <vPortExitCritical>

	return xReturn;
 8006dee:	69fb      	ldr	r3, [r7, #28]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3720      	adds	r7, #32
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20000c34 	.word	0x20000c34
 8006dfc:	20000c48 	.word	0x20000c48

08006e00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e04:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <vTaskMissedYield+0x14>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	20000c44 	.word	0x20000c44

08006e18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e20:	f000 f852 	bl	8006ec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e24:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <prvIdleTask+0x28>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d9f9      	bls.n	8006e20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e2c:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <prvIdleTask+0x2c>)
 8006e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e3c:	e7f0      	b.n	8006e20 <prvIdleTask+0x8>
 8006e3e:	bf00      	nop
 8006e40:	20000760 	.word	0x20000760
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e4e:	2300      	movs	r3, #0
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	e00c      	b.n	8006e6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4a12      	ldr	r2, [pc, #72]	; (8006ea8 <prvInitialiseTaskLists+0x60>)
 8006e60:	4413      	add	r3, r2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fd ff2e 	bl	8004cc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	607b      	str	r3, [r7, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b37      	cmp	r3, #55	; 0x37
 8006e72:	d9ef      	bls.n	8006e54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e74:	480d      	ldr	r0, [pc, #52]	; (8006eac <prvInitialiseTaskLists+0x64>)
 8006e76:	f7fd ff25 	bl	8004cc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e7a:	480d      	ldr	r0, [pc, #52]	; (8006eb0 <prvInitialiseTaskLists+0x68>)
 8006e7c:	f7fd ff22 	bl	8004cc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e80:	480c      	ldr	r0, [pc, #48]	; (8006eb4 <prvInitialiseTaskLists+0x6c>)
 8006e82:	f7fd ff1f 	bl	8004cc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e86:	480c      	ldr	r0, [pc, #48]	; (8006eb8 <prvInitialiseTaskLists+0x70>)
 8006e88:	f7fd ff1c 	bl	8004cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e8c:	480b      	ldr	r0, [pc, #44]	; (8006ebc <prvInitialiseTaskLists+0x74>)
 8006e8e:	f7fd ff19 	bl	8004cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e92:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <prvInitialiseTaskLists+0x78>)
 8006e94:	4a05      	ldr	r2, [pc, #20]	; (8006eac <prvInitialiseTaskLists+0x64>)
 8006e96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <prvInitialiseTaskLists+0x7c>)
 8006e9a:	4a05      	ldr	r2, [pc, #20]	; (8006eb0 <prvInitialiseTaskLists+0x68>)
 8006e9c:	601a      	str	r2, [r3, #0]
}
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000760 	.word	0x20000760
 8006eac:	20000bc0 	.word	0x20000bc0
 8006eb0:	20000bd4 	.word	0x20000bd4
 8006eb4:	20000bf0 	.word	0x20000bf0
 8006eb8:	20000c04 	.word	0x20000c04
 8006ebc:	20000c1c 	.word	0x20000c1c
 8006ec0:	20000be8 	.word	0x20000be8
 8006ec4:	20000bec 	.word	0x20000bec

08006ec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ece:	e019      	b.n	8006f04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ed0:	f000 fedc 	bl	8007c8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed4:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <prvCheckTasksWaitingTermination+0x50>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fd ff79 	bl	8004dd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <prvCheckTasksWaitingTermination+0x54>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	4a0b      	ldr	r2, [pc, #44]	; (8006f1c <prvCheckTasksWaitingTermination+0x54>)
 8006eee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <prvCheckTasksWaitingTermination+0x58>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	4a0a      	ldr	r2, [pc, #40]	; (8006f20 <prvCheckTasksWaitingTermination+0x58>)
 8006ef8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006efa:	f000 fefb 	bl	8007cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f810 	bl	8006f24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f04:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <prvCheckTasksWaitingTermination+0x58>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e1      	bne.n	8006ed0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000c04 	.word	0x20000c04
 8006f1c:	20000c30 	.word	0x20000c30
 8006f20:	20000c18 	.word	0x20000c18

08006f24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d108      	bne.n	8006f48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 f89c 	bl	8008078 <vPortFree>
				vPortFree( pxTCB );
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 f899 	bl	8008078 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f46:	e01a      	b.n	8006f7e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d103      	bne.n	8006f5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 f890 	bl	8008078 <vPortFree>
	}
 8006f58:	e011      	b.n	8006f7e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d00c      	beq.n	8006f7e <prvDeleteTCB+0x5a>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	b672      	cpsid	i
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	b662      	cpsie	i
 8006f78:	60fb      	str	r3, [r7, #12]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <prvDeleteTCB+0x58>
	}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f8e:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <prvResetNextTaskUnblockTime+0x38>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f98:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8006f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fa0:	e008      	b.n	8006fb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa2:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <prvResetNextTaskUnblockTime+0x38>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	4a04      	ldr	r2, [pc, #16]	; (8006fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8006fb2:	6013      	str	r3, [r2, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	20000be8 	.word	0x20000be8
 8006fc4:	20000c50 	.word	0x20000c50

08006fc8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006fce:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <xTaskGetCurrentTaskHandle+0x1c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006fd4:	687b      	ldr	r3, [r7, #4]
	}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	2000075c 	.word	0x2000075c

08006fe8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fee:	4b0b      	ldr	r3, [pc, #44]	; (800701c <xTaskGetSchedulerState+0x34>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d102      	bne.n	8006ffc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	607b      	str	r3, [r7, #4]
 8006ffa:	e008      	b.n	800700e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ffc:	4b08      	ldr	r3, [pc, #32]	; (8007020 <xTaskGetSchedulerState+0x38>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d102      	bne.n	800700a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007004:	2302      	movs	r3, #2
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	e001      	b.n	800700e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800700a:	2300      	movs	r3, #0
 800700c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800700e:	687b      	ldr	r3, [r7, #4]
	}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	20000c3c 	.word	0x20000c3c
 8007020:	20000c58 	.word	0x20000c58

08007024 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d051      	beq.n	80070de <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703e:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <xTaskPriorityInherit+0xc4>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	429a      	cmp	r2, r3
 8007046:	d241      	bcs.n	80070cc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	db06      	blt.n	800705e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007050:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <xTaskPriorityInherit+0xc4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6959      	ldr	r1, [r3, #20]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4a1f      	ldr	r2, [pc, #124]	; (80070ec <xTaskPriorityInherit+0xc8>)
 8007070:	4413      	add	r3, r2
 8007072:	4299      	cmp	r1, r3
 8007074:	d122      	bne.n	80070bc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	3304      	adds	r3, #4
 800707a:	4618      	mov	r0, r3
 800707c:	f7fd feac 	bl	8004dd8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007080:	4b19      	ldr	r3, [pc, #100]	; (80070e8 <xTaskPriorityInherit+0xc4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708e:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <xTaskPriorityInherit+0xcc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d903      	bls.n	800709e <xTaskPriorityInherit+0x7a>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	4a15      	ldr	r2, [pc, #84]	; (80070f0 <xTaskPriorityInherit+0xcc>)
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4a10      	ldr	r2, [pc, #64]	; (80070ec <xTaskPriorityInherit+0xc8>)
 80070ac:	441a      	add	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f7fd fe32 	bl	8004d1e <vListInsertEnd>
 80070ba:	e004      	b.n	80070c6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070bc:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <xTaskPriorityInherit+0xc4>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070c6:	2301      	movs	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	e008      	b.n	80070de <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <xTaskPriorityInherit+0xc4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d201      	bcs.n	80070de <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070de:	68fb      	ldr	r3, [r7, #12]
	}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	2000075c 	.word	0x2000075c
 80070ec:	20000760 	.word	0x20000760
 80070f0:	20000c38 	.word	0x20000c38

080070f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d05a      	beq.n	80071c0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800710a:	4b30      	ldr	r3, [pc, #192]	; (80071cc <xTaskPriorityDisinherit+0xd8>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	429a      	cmp	r2, r3
 8007112:	d00c      	beq.n	800712e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	b672      	cpsid	i
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	b662      	cpsie	i
 8007128:	60fb      	str	r3, [r7, #12]
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10c      	bne.n	8007150 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	b672      	cpsid	i
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	b662      	cpsie	i
 800714a:	60bb      	str	r3, [r7, #8]
}
 800714c:	bf00      	nop
 800714e:	e7fe      	b.n	800714e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007154:	1e5a      	subs	r2, r3, #1
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007162:	429a      	cmp	r2, r3
 8007164:	d02c      	beq.n	80071c0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716a:	2b00      	cmp	r3, #0
 800716c:	d128      	bne.n	80071c0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	3304      	adds	r3, #4
 8007172:	4618      	mov	r0, r3
 8007174:	f7fd fe30 	bl	8004dd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <xTaskPriorityDisinherit+0xdc>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	429a      	cmp	r2, r3
 8007196:	d903      	bls.n	80071a0 <xTaskPriorityDisinherit+0xac>
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	4a0c      	ldr	r2, [pc, #48]	; (80071d0 <xTaskPriorityDisinherit+0xdc>)
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <xTaskPriorityDisinherit+0xe0>)
 80071ae:	441a      	add	r2, r3
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fd fdb1 	bl	8004d1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071bc:	2301      	movs	r3, #1
 80071be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071c0:	697b      	ldr	r3, [r7, #20]
	}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	2000075c 	.word	0x2000075c
 80071d0:	20000c38 	.word	0x20000c38
 80071d4:	20000760 	.word	0x20000760

080071d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071e6:	2301      	movs	r3, #1
 80071e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d06e      	beq.n	80072ce <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10c      	bne.n	8007212 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	b672      	cpsid	i
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	b662      	cpsie	i
 800720c:	60fb      	str	r3, [r7, #12]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d902      	bls.n	8007222 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	61fb      	str	r3, [r7, #28]
 8007220:	e002      	b.n	8007228 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	429a      	cmp	r2, r3
 8007230:	d04d      	beq.n	80072ce <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	429a      	cmp	r2, r3
 800723a:	d148      	bne.n	80072ce <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800723c:	4b26      	ldr	r3, [pc, #152]	; (80072d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	429a      	cmp	r2, r3
 8007244:	d10c      	bne.n	8007260 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	b672      	cpsid	i
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	b662      	cpsie	i
 800725a:	60bb      	str	r3, [r7, #8]
}
 800725c:	bf00      	nop
 800725e:	e7fe      	b.n	800725e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	69fa      	ldr	r2, [r7, #28]
 800726a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	2b00      	cmp	r3, #0
 8007272:	db04      	blt.n	800727e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	6959      	ldr	r1, [r3, #20]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4a13      	ldr	r2, [pc, #76]	; (80072dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800728e:	4413      	add	r3, r2
 8007290:	4299      	cmp	r1, r3
 8007292:	d11c      	bne.n	80072ce <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	3304      	adds	r3, #4
 8007298:	4618      	mov	r0, r3
 800729a:	f7fd fd9d 	bl	8004dd8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a2:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d903      	bls.n	80072b2 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	4a0c      	ldr	r2, [pc, #48]	; (80072e0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4a07      	ldr	r2, [pc, #28]	; (80072dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80072c0:	441a      	add	r2, r3
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4619      	mov	r1, r3
 80072c8:	4610      	mov	r0, r2
 80072ca:	f7fd fd28 	bl	8004d1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072ce:	bf00      	nop
 80072d0:	3720      	adds	r7, #32
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	2000075c 	.word	0x2000075c
 80072dc:	20000760 	.word	0x20000760
 80072e0:	20000c38 	.word	0x20000c38

080072e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072e8:	4b07      	ldr	r3, [pc, #28]	; (8007308 <pvTaskIncrementMutexHeldCount+0x24>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <pvTaskIncrementMutexHeldCount+0x24>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072f6:	3201      	adds	r2, #1
 80072f8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80072fa:	4b03      	ldr	r3, [pc, #12]	; (8007308 <pvTaskIncrementMutexHeldCount+0x24>)
 80072fc:	681b      	ldr	r3, [r3, #0]
	}
 80072fe:	4618      	mov	r0, r3
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	2000075c 	.word	0x2000075c

0800730c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007316:	4b21      	ldr	r3, [pc, #132]	; (800739c <prvAddCurrentTaskToDelayedList+0x90>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800731c:	4b20      	ldr	r3, [pc, #128]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3304      	adds	r3, #4
 8007322:	4618      	mov	r0, r3
 8007324:	f7fd fd58 	bl	8004dd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800732e:	d10a      	bne.n	8007346 <prvAddCurrentTaskToDelayedList+0x3a>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007336:	4b1a      	ldr	r3, [pc, #104]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3304      	adds	r3, #4
 800733c:	4619      	mov	r1, r3
 800733e:	4819      	ldr	r0, [pc, #100]	; (80073a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007340:	f7fd fced 	bl	8004d1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007344:	e026      	b.n	8007394 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4413      	add	r3, r2
 800734c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800734e:	4b14      	ldr	r3, [pc, #80]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	429a      	cmp	r2, r3
 800735c:	d209      	bcs.n	8007372 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800735e:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b0f      	ldr	r3, [pc, #60]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3304      	adds	r3, #4
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f7fd fcfb 	bl	8004d66 <vListInsert>
}
 8007370:	e010      	b.n	8007394 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007372:	4b0e      	ldr	r3, [pc, #56]	; (80073ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	4610      	mov	r0, r2
 8007380:	f7fd fcf1 	bl	8004d66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007384:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	429a      	cmp	r2, r3
 800738c:	d202      	bcs.n	8007394 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800738e:	4a08      	ldr	r2, [pc, #32]	; (80073b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6013      	str	r3, [r2, #0]
}
 8007394:	bf00      	nop
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	20000c34 	.word	0x20000c34
 80073a0:	2000075c 	.word	0x2000075c
 80073a4:	20000c1c 	.word	0x20000c1c
 80073a8:	20000bec 	.word	0x20000bec
 80073ac:	20000be8 	.word	0x20000be8
 80073b0:	20000c50 	.word	0x20000c50

080073b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08a      	sub	sp, #40	; 0x28
 80073b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073be:	f000 fb15 	bl	80079ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073c2:	4b1d      	ldr	r3, [pc, #116]	; (8007438 <xTimerCreateTimerTask+0x84>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d021      	beq.n	800740e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073d2:	1d3a      	adds	r2, r7, #4
 80073d4:	f107 0108 	add.w	r1, r7, #8
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fd fc57 	bl	8004c90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	9202      	str	r2, [sp, #8]
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	2302      	movs	r3, #2
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	2300      	movs	r3, #0
 80073f2:	460a      	mov	r2, r1
 80073f4:	4911      	ldr	r1, [pc, #68]	; (800743c <xTimerCreateTimerTask+0x88>)
 80073f6:	4812      	ldr	r0, [pc, #72]	; (8007440 <xTimerCreateTimerTask+0x8c>)
 80073f8:	f7fe fe28 	bl	800604c <xTaskCreateStatic>
 80073fc:	4603      	mov	r3, r0
 80073fe:	4a11      	ldr	r2, [pc, #68]	; (8007444 <xTimerCreateTimerTask+0x90>)
 8007400:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007402:	4b10      	ldr	r3, [pc, #64]	; (8007444 <xTimerCreateTimerTask+0x90>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800740a:	2301      	movs	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10c      	bne.n	800742e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	b672      	cpsid	i
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	b662      	cpsie	i
 8007428:	613b      	str	r3, [r7, #16]
}
 800742a:	bf00      	nop
 800742c:	e7fe      	b.n	800742c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800742e:	697b      	ldr	r3, [r7, #20]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20000c8c 	.word	0x20000c8c
 800743c:	080095d0 	.word	0x080095d0
 8007440:	08007585 	.word	0x08007585
 8007444:	20000c90 	.word	0x20000c90

08007448 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	; 0x28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007456:	2300      	movs	r3, #0
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10c      	bne.n	800747a <xTimerGenericCommand+0x32>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	b672      	cpsid	i
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	b662      	cpsie	i
 8007474:	623b      	str	r3, [r7, #32]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800747a:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <xTimerGenericCommand+0x9c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d02a      	beq.n	80074d8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b05      	cmp	r3, #5
 8007492:	dc18      	bgt.n	80074c6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007494:	f7ff fda8 	bl	8006fe8 <xTaskGetSchedulerState>
 8007498:	4603      	mov	r3, r0
 800749a:	2b02      	cmp	r3, #2
 800749c:	d109      	bne.n	80074b2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800749e:	4b11      	ldr	r3, [pc, #68]	; (80074e4 <xTimerGenericCommand+0x9c>)
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	f107 0110 	add.w	r1, r7, #16
 80074a6:	2300      	movs	r3, #0
 80074a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074aa:	f7fd ff3d 	bl	8005328 <xQueueGenericSend>
 80074ae:	6278      	str	r0, [r7, #36]	; 0x24
 80074b0:	e012      	b.n	80074d8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <xTimerGenericCommand+0x9c>)
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	f107 0110 	add.w	r1, r7, #16
 80074ba:	2300      	movs	r3, #0
 80074bc:	2200      	movs	r2, #0
 80074be:	f7fd ff33 	bl	8005328 <xQueueGenericSend>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24
 80074c4:	e008      	b.n	80074d8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <xTimerGenericCommand+0x9c>)
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f107 0110 	add.w	r1, r7, #16
 80074ce:	2300      	movs	r3, #0
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	f7fe f82f 	bl	8005534 <xQueueGenericSendFromISR>
 80074d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3728      	adds	r7, #40	; 0x28
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000c8c 	.word	0x20000c8c

080074e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f2:	4b23      	ldr	r3, [pc, #140]	; (8007580 <prvProcessExpiredTimer+0x98>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fd fc69 	bl	8004dd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d024      	beq.n	800755e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	18d1      	adds	r1, r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	6978      	ldr	r0, [r7, #20]
 8007522:	f000 f8d3 	bl	80076cc <prvInsertTimerInActiveList>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d021      	beq.n	8007570 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800752c:	2300      	movs	r3, #0
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	2300      	movs	r3, #0
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	2100      	movs	r1, #0
 8007536:	6978      	ldr	r0, [r7, #20]
 8007538:	f7ff ff86 	bl	8007448 <xTimerGenericCommand>
 800753c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d115      	bne.n	8007570 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	b672      	cpsid	i
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	b662      	cpsie	i
 8007558:	60fb      	str	r3, [r7, #12]
}
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	b2da      	uxtb	r2, r3
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	6978      	ldr	r0, [r7, #20]
 8007576:	4798      	blx	r3
}
 8007578:	bf00      	nop
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20000c84 	.word	0x20000c84

08007584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800758c:	f107 0308 	add.w	r3, r7, #8
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f857 	bl	8007644 <prvGetNextExpireTime>
 8007596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f803 	bl	80075a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075a2:	f000 f8d5 	bl	8007750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075a6:	e7f1      	b.n	800758c <prvTimerTask+0x8>

080075a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075b2:	f7ff f915 	bl	80067e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075b6:	f107 0308 	add.w	r3, r7, #8
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 f866 	bl	800768c <prvSampleTimeNow>
 80075c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d130      	bne.n	800762a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <prvProcessTimerOrBlockTask+0x3c>
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d806      	bhi.n	80075e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075d6:	f7ff f911 	bl	80067fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075da:	68f9      	ldr	r1, [r7, #12]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff ff83 	bl	80074e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075e2:	e024      	b.n	800762e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075ea:	4b13      	ldr	r3, [pc, #76]	; (8007638 <prvProcessTimerOrBlockTask+0x90>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <prvProcessTimerOrBlockTask+0x50>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <prvProcessTimerOrBlockTask+0x52>
 80075f8:	2300      	movs	r3, #0
 80075fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075fc:	4b0f      	ldr	r3, [pc, #60]	; (800763c <prvProcessTimerOrBlockTask+0x94>)
 80075fe:	6818      	ldr	r0, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	4619      	mov	r1, r3
 800760a:	f7fe fceb 	bl	8005fe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800760e:	f7ff f8f5 	bl	80067fc <xTaskResumeAll>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10a      	bne.n	800762e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007618:	4b09      	ldr	r3, [pc, #36]	; (8007640 <prvProcessTimerOrBlockTask+0x98>)
 800761a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	f3bf 8f6f 	isb	sy
}
 8007628:	e001      	b.n	800762e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800762a:	f7ff f8e7 	bl	80067fc <xTaskResumeAll>
}
 800762e:	bf00      	nop
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000c88 	.word	0x20000c88
 800763c:	20000c8c 	.word	0x20000c8c
 8007640:	e000ed04 	.word	0xe000ed04

08007644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800764c:	4b0e      	ldr	r3, [pc, #56]	; (8007688 <prvGetNextExpireTime+0x44>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <prvGetNextExpireTime+0x16>
 8007656:	2201      	movs	r2, #1
 8007658:	e000      	b.n	800765c <prvGetNextExpireTime+0x18>
 800765a:	2200      	movs	r2, #0
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d105      	bne.n	8007674 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007668:	4b07      	ldr	r3, [pc, #28]	; (8007688 <prvGetNextExpireTime+0x44>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	e001      	b.n	8007678 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007678:	68fb      	ldr	r3, [r7, #12]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000c84 	.word	0x20000c84

0800768c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007694:	f7ff f952 	bl	800693c <xTaskGetTickCount>
 8007698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <prvSampleTimeNow+0x3c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d205      	bcs.n	80076b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076a4:	f000 f93c 	bl	8007920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	e002      	b.n	80076b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076b6:	4a04      	ldr	r2, [pc, #16]	; (80076c8 <prvSampleTimeNow+0x3c>)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076bc:	68fb      	ldr	r3, [r7, #12]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000c94 	.word	0x20000c94

080076cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d812      	bhi.n	8007718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	1ad2      	subs	r2, r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d302      	bcc.n	8007706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007700:	2301      	movs	r3, #1
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e01b      	b.n	800773e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <prvInsertTimerInActiveList+0x7c>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3304      	adds	r3, #4
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7fd fb28 	bl	8004d66 <vListInsert>
 8007716:	e012      	b.n	800773e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	429a      	cmp	r2, r3
 800771e:	d206      	bcs.n	800772e <prvInsertTimerInActiveList+0x62>
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d302      	bcc.n	800772e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007728:	2301      	movs	r3, #1
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	e007      	b.n	800773e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800772e:	4b07      	ldr	r3, [pc, #28]	; (800774c <prvInsertTimerInActiveList+0x80>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3304      	adds	r3, #4
 8007736:	4619      	mov	r1, r3
 8007738:	4610      	mov	r0, r2
 800773a:	f7fd fb14 	bl	8004d66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800773e:	697b      	ldr	r3, [r7, #20]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20000c88 	.word	0x20000c88
 800774c:	20000c84 	.word	0x20000c84

08007750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08e      	sub	sp, #56	; 0x38
 8007754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007756:	e0d0      	b.n	80078fa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	da1a      	bge.n	8007794 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800775e:	1d3b      	adds	r3, r7, #4
 8007760:	3304      	adds	r3, #4
 8007762:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10c      	bne.n	8007784 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	b672      	cpsid	i
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	b662      	cpsie	i
 800777e:	61fb      	str	r3, [r7, #28]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800778a:	6850      	ldr	r0, [r2, #4]
 800778c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800778e:	6892      	ldr	r2, [r2, #8]
 8007790:	4611      	mov	r1, r2
 8007792:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f2c0 80ae 	blt.w	80078f8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	3304      	adds	r3, #4
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fd fb13 	bl	8004dd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077b2:	463b      	mov	r3, r7
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff ff69 	bl	800768c <prvSampleTimeNow>
 80077ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b09      	cmp	r3, #9
 80077c0:	f200 809b 	bhi.w	80078fa <prvProcessReceivedCommands+0x1aa>
 80077c4:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <prvProcessReceivedCommands+0x7c>)
 80077c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ca:	bf00      	nop
 80077cc:	080077f5 	.word	0x080077f5
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077f5 	.word	0x080077f5
 80077d8:	0800786d 	.word	0x0800786d
 80077dc:	08007881 	.word	0x08007881
 80077e0:	080078cf 	.word	0x080078cf
 80077e4:	080077f5 	.word	0x080077f5
 80077e8:	080077f5 	.word	0x080077f5
 80077ec:	0800786d 	.word	0x0800786d
 80077f0:	08007881 	.word	0x08007881
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077fa:	f043 0301 	orr.w	r3, r3, #1
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	18d1      	adds	r1, r2, r3
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007814:	f7ff ff5a 	bl	80076cc <prvInsertTimerInActiveList>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d06d      	beq.n	80078fa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007824:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b00      	cmp	r3, #0
 8007832:	d062      	beq.n	80078fa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	441a      	add	r2, r3
 800783c:	2300      	movs	r3, #0
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	2300      	movs	r3, #0
 8007842:	2100      	movs	r1, #0
 8007844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007846:	f7ff fdff 	bl	8007448 <xTimerGenericCommand>
 800784a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d153      	bne.n	80078fa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	b672      	cpsid	i
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	b662      	cpsie	i
 8007866:	61bb      	str	r3, [r7, #24]
}
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007872:	f023 0301 	bic.w	r3, r3, #1
 8007876:	b2da      	uxtb	r2, r3
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800787e:	e03c      	b.n	80078fa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	b2da      	uxtb	r2, r3
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10c      	bne.n	80078ba <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	b672      	cpsid	i
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	b662      	cpsie	i
 80078b4:	617b      	str	r3, [r7, #20]
}
 80078b6:	bf00      	nop
 80078b8:	e7fe      	b.n	80078b8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	18d1      	adds	r1, r2, r3
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c8:	f7ff ff00 	bl	80076cc <prvInsertTimerInActiveList>
					break;
 80078cc:	e015      	b.n	80078fa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d103      	bne.n	80078e4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80078dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078de:	f000 fbcb 	bl	8008078 <vPortFree>
 80078e2:	e00a      	b.n	80078fa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078ea:	f023 0301 	bic.w	r3, r3, #1
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078f6:	e000      	b.n	80078fa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80078f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078fa:	4b08      	ldr	r3, [pc, #32]	; (800791c <prvProcessReceivedCommands+0x1cc>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	1d39      	adds	r1, r7, #4
 8007900:	2200      	movs	r2, #0
 8007902:	4618      	mov	r0, r3
 8007904:	f7fd ff4c 	bl	80057a0 <xQueueReceive>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	f47f af24 	bne.w	8007758 <prvProcessReceivedCommands+0x8>
	}
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	3730      	adds	r7, #48	; 0x30
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20000c8c 	.word	0x20000c8c

08007920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007926:	e04a      	b.n	80079be <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007928:	4b2e      	ldr	r3, [pc, #184]	; (80079e4 <prvSwitchTimerLists+0xc4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007932:	4b2c      	ldr	r3, [pc, #176]	; (80079e4 <prvSwitchTimerLists+0xc4>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3304      	adds	r3, #4
 8007940:	4618      	mov	r0, r3
 8007942:	f7fd fa49 	bl	8004dd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d030      	beq.n	80079be <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4413      	add	r3, r2
 8007964:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	429a      	cmp	r2, r3
 800796c:	d90e      	bls.n	800798c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800797a:	4b1a      	ldr	r3, [pc, #104]	; (80079e4 <prvSwitchTimerLists+0xc4>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3304      	adds	r3, #4
 8007982:	4619      	mov	r1, r3
 8007984:	4610      	mov	r0, r2
 8007986:	f7fd f9ee 	bl	8004d66 <vListInsert>
 800798a:	e018      	b.n	80079be <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800798c:	2300      	movs	r3, #0
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	2300      	movs	r3, #0
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	2100      	movs	r1, #0
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f7ff fd56 	bl	8007448 <xTimerGenericCommand>
 800799c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10c      	bne.n	80079be <prvSwitchTimerLists+0x9e>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	b672      	cpsid	i
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	b662      	cpsie	i
 80079b8:	603b      	str	r3, [r7, #0]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <prvSwitchTimerLists+0xc4>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1af      	bne.n	8007928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <prvSwitchTimerLists+0xc4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <prvSwitchTimerLists+0xc8>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a04      	ldr	r2, [pc, #16]	; (80079e4 <prvSwitchTimerLists+0xc4>)
 80079d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079d6:	4a04      	ldr	r2, [pc, #16]	; (80079e8 <prvSwitchTimerLists+0xc8>)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	6013      	str	r3, [r2, #0]
}
 80079dc:	bf00      	nop
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20000c84 	.word	0x20000c84
 80079e8:	20000c88 	.word	0x20000c88

080079ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079f2:	f000 f94b 	bl	8007c8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079f6:	4b15      	ldr	r3, [pc, #84]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d120      	bne.n	8007a40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079fe:	4814      	ldr	r0, [pc, #80]	; (8007a50 <prvCheckForValidListAndQueue+0x64>)
 8007a00:	f7fd f960 	bl	8004cc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a04:	4813      	ldr	r0, [pc, #76]	; (8007a54 <prvCheckForValidListAndQueue+0x68>)
 8007a06:	f7fd f95d 	bl	8004cc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a0a:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <prvCheckForValidListAndQueue+0x6c>)
 8007a0c:	4a10      	ldr	r2, [pc, #64]	; (8007a50 <prvCheckForValidListAndQueue+0x64>)
 8007a0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a10:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <prvCheckForValidListAndQueue+0x70>)
 8007a12:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <prvCheckForValidListAndQueue+0x68>)
 8007a14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a16:	2300      	movs	r3, #0
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <prvCheckForValidListAndQueue+0x74>)
 8007a1c:	4a11      	ldr	r2, [pc, #68]	; (8007a64 <prvCheckForValidListAndQueue+0x78>)
 8007a1e:	2110      	movs	r1, #16
 8007a20:	200a      	movs	r0, #10
 8007a22:	f7fd fa6d 	bl	8004f00 <xQueueGenericCreateStatic>
 8007a26:	4603      	mov	r3, r0
 8007a28:	4a08      	ldr	r2, [pc, #32]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 8007a2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a2c:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a34:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	490b      	ldr	r1, [pc, #44]	; (8007a68 <prvCheckForValidListAndQueue+0x7c>)
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fe fa7e 	bl	8005f3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a40:	f000 f958 	bl	8007cf4 <vPortExitCritical>
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000c8c 	.word	0x20000c8c
 8007a50:	20000c5c 	.word	0x20000c5c
 8007a54:	20000c70 	.word	0x20000c70
 8007a58:	20000c84 	.word	0x20000c84
 8007a5c:	20000c88 	.word	0x20000c88
 8007a60:	20000d38 	.word	0x20000d38
 8007a64:	20000c98 	.word	0x20000c98
 8007a68:	080095d8 	.word	0x080095d8

08007a6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3b04      	subs	r3, #4
 8007a7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3b04      	subs	r3, #4
 8007a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f023 0201 	bic.w	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3b04      	subs	r3, #4
 8007a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a9c:	4a0c      	ldr	r2, [pc, #48]	; (8007ad0 <pxPortInitialiseStack+0x64>)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3b14      	subs	r3, #20
 8007aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3b04      	subs	r3, #4
 8007ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f06f 0202 	mvn.w	r2, #2
 8007aba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3b20      	subs	r3, #32
 8007ac0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	08007ad5 	.word	0x08007ad5

08007ad4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ade:	4b14      	ldr	r3, [pc, #80]	; (8007b30 <prvTaskExitError+0x5c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ae6:	d00c      	beq.n	8007b02 <prvTaskExitError+0x2e>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	b672      	cpsid	i
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	b662      	cpsie	i
 8007afc:	60fb      	str	r3, [r7, #12]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <prvTaskExitError+0x2c>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	b672      	cpsid	i
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	b662      	cpsie	i
 8007b16:	60bb      	str	r3, [r7, #8]
}
 8007b18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b1a:	bf00      	nop
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0fc      	beq.n	8007b1c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	20000018 	.word	0x20000018
	...

08007b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b40:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <pxCurrentTCBConst2>)
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	6808      	ldr	r0, [r1, #0]
 8007b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	f380 8809 	msr	PSP, r0
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f380 8811 	msr	BASEPRI, r0
 8007b5a:	4770      	bx	lr
 8007b5c:	f3af 8000 	nop.w

08007b60 <pxCurrentTCBConst2>:
 8007b60:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop

08007b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b68:	4808      	ldr	r0, [pc, #32]	; (8007b8c <prvPortStartFirstTask+0x24>)
 8007b6a:	6800      	ldr	r0, [r0, #0]
 8007b6c:	6800      	ldr	r0, [r0, #0]
 8007b6e:	f380 8808 	msr	MSP, r0
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8814 	msr	CONTROL, r0
 8007b7a:	b662      	cpsie	i
 8007b7c:	b661      	cpsie	f
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	df00      	svc	0
 8007b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b8a:	bf00      	nop
 8007b8c:	e000ed08 	.word	0xe000ed08

08007b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b96:	4b37      	ldr	r3, [pc, #220]	; (8007c74 <xPortStartScheduler+0xe4>)
 8007b98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	22ff      	movs	r2, #255	; 0xff
 8007ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	4b2f      	ldr	r3, [pc, #188]	; (8007c78 <xPortStartScheduler+0xe8>)
 8007bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bbe:	4b2f      	ldr	r3, [pc, #188]	; (8007c7c <xPortStartScheduler+0xec>)
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bc4:	e009      	b.n	8007bda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007bc6:	4b2d      	ldr	r3, [pc, #180]	; (8007c7c <xPortStartScheduler+0xec>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	4a2b      	ldr	r2, [pc, #172]	; (8007c7c <xPortStartScheduler+0xec>)
 8007bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bda:	78fb      	ldrb	r3, [r7, #3]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	d0ef      	beq.n	8007bc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007be6:	4b25      	ldr	r3, [pc, #148]	; (8007c7c <xPortStartScheduler+0xec>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1c3 0307 	rsb	r3, r3, #7
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d00c      	beq.n	8007c0c <xPortStartScheduler+0x7c>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	b672      	cpsid	i
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	b662      	cpsie	i
 8007c06:	60bb      	str	r3, [r7, #8]
}
 8007c08:	bf00      	nop
 8007c0a:	e7fe      	b.n	8007c0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c0c:	4b1b      	ldr	r3, [pc, #108]	; (8007c7c <xPortStartScheduler+0xec>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	021b      	lsls	r3, r3, #8
 8007c12:	4a1a      	ldr	r2, [pc, #104]	; (8007c7c <xPortStartScheduler+0xec>)
 8007c14:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c16:	4b19      	ldr	r3, [pc, #100]	; (8007c7c <xPortStartScheduler+0xec>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c1e:	4a17      	ldr	r2, [pc, #92]	; (8007c7c <xPortStartScheduler+0xec>)
 8007c20:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c2a:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <xPortStartScheduler+0xf0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a14      	ldr	r2, [pc, #80]	; (8007c80 <xPortStartScheduler+0xf0>)
 8007c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c36:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <xPortStartScheduler+0xf0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a11      	ldr	r2, [pc, #68]	; (8007c80 <xPortStartScheduler+0xf0>)
 8007c3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c40:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c42:	f000 f8dd 	bl	8007e00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c46:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <xPortStartScheduler+0xf4>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c4c:	f000 f8fc 	bl	8007e48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c50:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <xPortStartScheduler+0xf8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a0c      	ldr	r2, [pc, #48]	; (8007c88 <xPortStartScheduler+0xf8>)
 8007c56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c5a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c5c:	f7ff ff84 	bl	8007b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c60:	f7fe ff38 	bl	8006ad4 <vTaskSwitchContext>
	prvTaskExitError();
 8007c64:	f7ff ff36 	bl	8007ad4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	e000e400 	.word	0xe000e400
 8007c78:	20000d88 	.word	0x20000d88
 8007c7c:	20000d8c 	.word	0x20000d8c
 8007c80:	e000ed20 	.word	0xe000ed20
 8007c84:	20000018 	.word	0x20000018
 8007c88:	e000ef34 	.word	0xe000ef34

08007c8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	b672      	cpsid	i
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	b662      	cpsie	i
 8007ca6:	607b      	str	r3, [r7, #4]
}
 8007ca8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007caa:	4b10      	ldr	r3, [pc, #64]	; (8007cec <vPortEnterCritical+0x60>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	4a0e      	ldr	r2, [pc, #56]	; (8007cec <vPortEnterCritical+0x60>)
 8007cb2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cb4:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <vPortEnterCritical+0x60>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d111      	bne.n	8007ce0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cbc:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <vPortEnterCritical+0x64>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00c      	beq.n	8007ce0 <vPortEnterCritical+0x54>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	b672      	cpsid	i
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	b662      	cpsie	i
 8007cda:	603b      	str	r3, [r7, #0]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <vPortEnterCritical+0x52>
	}
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	20000018 	.word	0x20000018
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <vPortExitCritical+0x54>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10c      	bne.n	8007d1c <vPortExitCritical+0x28>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	b672      	cpsid	i
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	b662      	cpsie	i
 8007d16:	607b      	str	r3, [r7, #4]
}
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <vPortExitCritical+0x54>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	4a09      	ldr	r2, [pc, #36]	; (8007d48 <vPortExitCritical+0x54>)
 8007d24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d26:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <vPortExitCritical+0x54>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d105      	bne.n	8007d3a <vPortExitCritical+0x46>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	f383 8811 	msr	BASEPRI, r3
}
 8007d38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	20000018 	.word	0x20000018
 8007d4c:	00000000 	.word	0x00000000

08007d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d50:	f3ef 8009 	mrs	r0, PSP
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	4b15      	ldr	r3, [pc, #84]	; (8007db0 <pxCurrentTCBConst>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	f01e 0f10 	tst.w	lr, #16
 8007d60:	bf08      	it	eq
 8007d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6a:	6010      	str	r0, [r2, #0]
 8007d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d74:	b672      	cpsid	i
 8007d76:	f380 8811 	msr	BASEPRI, r0
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	b662      	cpsie	i
 8007d84:	f7fe fea6 	bl	8006ad4 <vTaskSwitchContext>
 8007d88:	f04f 0000 	mov.w	r0, #0
 8007d8c:	f380 8811 	msr	BASEPRI, r0
 8007d90:	bc09      	pop	{r0, r3}
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	6808      	ldr	r0, [r1, #0]
 8007d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9a:	f01e 0f10 	tst.w	lr, #16
 8007d9e:	bf08      	it	eq
 8007da0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007da4:	f380 8809 	msr	PSP, r0
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop

08007db0 <pxCurrentTCBConst>:
 8007db0:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	b672      	cpsid	i
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	b662      	cpsie	i
 8007dd2:	607b      	str	r3, [r7, #4]
}
 8007dd4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007dd6:	f7fe fdc1 	bl	800695c <xTaskIncrementTick>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007de0:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <SysTick_Handler+0x44>)
 8007de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	2300      	movs	r3, #0
 8007dea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	f383 8811 	msr	BASEPRI, r3
}
 8007df2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e04:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <vPortSetupTimerInterrupt+0x34>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	; (8007e38 <vPortSetupTimerInterrupt+0x38>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e10:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <vPortSetupTimerInterrupt+0x3c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a0a      	ldr	r2, [pc, #40]	; (8007e40 <vPortSetupTimerInterrupt+0x40>)
 8007e16:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1a:	099b      	lsrs	r3, r3, #6
 8007e1c:	4a09      	ldr	r2, [pc, #36]	; (8007e44 <vPortSetupTimerInterrupt+0x44>)
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e22:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <vPortSetupTimerInterrupt+0x34>)
 8007e24:	2207      	movs	r2, #7
 8007e26:	601a      	str	r2, [r3, #0]
}
 8007e28:	bf00      	nop
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	e000e010 	.word	0xe000e010
 8007e38:	e000e018 	.word	0xe000e018
 8007e3c:	2000000c 	.word	0x2000000c
 8007e40:	10624dd3 	.word	0x10624dd3
 8007e44:	e000e014 	.word	0xe000e014

08007e48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e58 <vPortEnableVFP+0x10>
 8007e4c:	6801      	ldr	r1, [r0, #0]
 8007e4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e52:	6001      	str	r1, [r0, #0]
 8007e54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e56:	bf00      	nop
 8007e58:	e000ed88 	.word	0xe000ed88

08007e5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e62:	f3ef 8305 	mrs	r3, IPSR
 8007e66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b0f      	cmp	r3, #15
 8007e6c:	d916      	bls.n	8007e9c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e6e:	4a19      	ldr	r2, [pc, #100]	; (8007ed4 <vPortValidateInterruptPriority+0x78>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e78:	4b17      	ldr	r3, [pc, #92]	; (8007ed8 <vPortValidateInterruptPriority+0x7c>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	7afa      	ldrb	r2, [r7, #11]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d20c      	bcs.n	8007e9c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	b672      	cpsid	i
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	b662      	cpsie	i
 8007e96:	607b      	str	r3, [r7, #4]
}
 8007e98:	bf00      	nop
 8007e9a:	e7fe      	b.n	8007e9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e9c:	4b0f      	ldr	r3, [pc, #60]	; (8007edc <vPortValidateInterruptPriority+0x80>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <vPortValidateInterruptPriority+0x84>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d90c      	bls.n	8007ec6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	b672      	cpsid	i
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	b662      	cpsie	i
 8007ec0:	603b      	str	r3, [r7, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <vPortValidateInterruptPriority+0x68>
	}
 8007ec6:	bf00      	nop
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	e000e3f0 	.word	0xe000e3f0
 8007ed8:	20000d88 	.word	0x20000d88
 8007edc:	e000ed0c 	.word	0xe000ed0c
 8007ee0:	20000d8c 	.word	0x20000d8c

08007ee4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08a      	sub	sp, #40	; 0x28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ef0:	f7fe fc76 	bl	80067e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ef4:	4b5b      	ldr	r3, [pc, #364]	; (8008064 <pvPortMalloc+0x180>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007efc:	f000 f91a 	bl	8008134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f00:	4b59      	ldr	r3, [pc, #356]	; (8008068 <pvPortMalloc+0x184>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f040 8092 	bne.w	8008032 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01f      	beq.n	8007f54 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007f14:	2208      	movs	r2, #8
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4413      	add	r3, r2
 8007f1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d016      	beq.n	8007f54 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f023 0307 	bic.w	r3, r3, #7
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00c      	beq.n	8007f54 <pvPortMalloc+0x70>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	b672      	cpsid	i
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	b662      	cpsie	i
 8007f4e:	617b      	str	r3, [r7, #20]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d06b      	beq.n	8008032 <pvPortMalloc+0x14e>
 8007f5a:	4b44      	ldr	r3, [pc, #272]	; (800806c <pvPortMalloc+0x188>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d866      	bhi.n	8008032 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f64:	4b42      	ldr	r3, [pc, #264]	; (8008070 <pvPortMalloc+0x18c>)
 8007f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f68:	4b41      	ldr	r3, [pc, #260]	; (8008070 <pvPortMalloc+0x18c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f6e:	e004      	b.n	8007f7a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d903      	bls.n	8007f8c <pvPortMalloc+0xa8>
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f1      	bne.n	8007f70 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f8c:	4b35      	ldr	r3, [pc, #212]	; (8008064 <pvPortMalloc+0x180>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d04d      	beq.n	8008032 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2208      	movs	r2, #8
 8007f9c:	4413      	add	r3, r2
 8007f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d921      	bls.n	8007ffc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00c      	beq.n	8007fe4 <pvPortMalloc+0x100>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	b672      	cpsid	i
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	b662      	cpsie	i
 8007fde:	613b      	str	r3, [r7, #16]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	1ad2      	subs	r2, r2, r3
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ff6:	69b8      	ldr	r0, [r7, #24]
 8007ff8:	f000 f8fe 	bl	80081f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ffc:	4b1b      	ldr	r3, [pc, #108]	; (800806c <pvPortMalloc+0x188>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	4a19      	ldr	r2, [pc, #100]	; (800806c <pvPortMalloc+0x188>)
 8008008:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800800a:	4b18      	ldr	r3, [pc, #96]	; (800806c <pvPortMalloc+0x188>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4b19      	ldr	r3, [pc, #100]	; (8008074 <pvPortMalloc+0x190>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d203      	bcs.n	800801e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008016:	4b15      	ldr	r3, [pc, #84]	; (800806c <pvPortMalloc+0x188>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a16      	ldr	r2, [pc, #88]	; (8008074 <pvPortMalloc+0x190>)
 800801c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	4b11      	ldr	r3, [pc, #68]	; (8008068 <pvPortMalloc+0x184>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	431a      	orrs	r2, r3
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008032:	f7fe fbe3 	bl	80067fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00c      	beq.n	800805a <pvPortMalloc+0x176>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	b672      	cpsid	i
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	b662      	cpsie	i
 8008054:	60fb      	str	r3, [r7, #12]
}
 8008056:	bf00      	nop
 8008058:	e7fe      	b.n	8008058 <pvPortMalloc+0x174>
	return pvReturn;
 800805a:	69fb      	ldr	r3, [r7, #28]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3728      	adds	r7, #40	; 0x28
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20004998 	.word	0x20004998
 8008068:	200049a4 	.word	0x200049a4
 800806c:	2000499c 	.word	0x2000499c
 8008070:	20004990 	.word	0x20004990
 8008074:	200049a0 	.word	0x200049a0

08008078 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d04c      	beq.n	8008124 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800808a:	2308      	movs	r3, #8
 800808c:	425b      	negs	r3, r3
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4413      	add	r3, r2
 8008092:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	4b23      	ldr	r3, [pc, #140]	; (800812c <vPortFree+0xb4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4013      	ands	r3, r2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10c      	bne.n	80080c0 <vPortFree+0x48>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	b672      	cpsid	i
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	b662      	cpsie	i
 80080ba:	60fb      	str	r3, [r7, #12]
}
 80080bc:	bf00      	nop
 80080be:	e7fe      	b.n	80080be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00c      	beq.n	80080e2 <vPortFree+0x6a>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	b672      	cpsid	i
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	b662      	cpsie	i
 80080dc:	60bb      	str	r3, [r7, #8]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	4b11      	ldr	r3, [pc, #68]	; (800812c <vPortFree+0xb4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d019      	beq.n	8008124 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d115      	bne.n	8008124 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	4b0b      	ldr	r3, [pc, #44]	; (800812c <vPortFree+0xb4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	43db      	mvns	r3, r3
 8008102:	401a      	ands	r2, r3
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008108:	f7fe fb6a 	bl	80067e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <vPortFree+0xb8>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4413      	add	r3, r2
 8008116:	4a06      	ldr	r2, [pc, #24]	; (8008130 <vPortFree+0xb8>)
 8008118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800811a:	6938      	ldr	r0, [r7, #16]
 800811c:	f000 f86c 	bl	80081f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008120:	f7fe fb6c 	bl	80067fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008124:	bf00      	nop
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	200049a4 	.word	0x200049a4
 8008130:	2000499c 	.word	0x2000499c

08008134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800813a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800813e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008140:	4b27      	ldr	r3, [pc, #156]	; (80081e0 <prvHeapInit+0xac>)
 8008142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00c      	beq.n	8008168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3307      	adds	r3, #7
 8008152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0307 	bic.w	r3, r3, #7
 800815a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	4a1f      	ldr	r2, [pc, #124]	; (80081e0 <prvHeapInit+0xac>)
 8008164:	4413      	add	r3, r2
 8008166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800816c:	4a1d      	ldr	r2, [pc, #116]	; (80081e4 <prvHeapInit+0xb0>)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008172:	4b1c      	ldr	r3, [pc, #112]	; (80081e4 <prvHeapInit+0xb0>)
 8008174:	2200      	movs	r2, #0
 8008176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	4413      	add	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008180:	2208      	movs	r2, #8
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0307 	bic.w	r3, r3, #7
 800818e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <prvHeapInit+0xb4>)
 8008194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008196:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <prvHeapInit+0xb4>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2200      	movs	r2, #0
 800819c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800819e:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <prvHeapInit+0xb4>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081b4:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <prvHeapInit+0xb4>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <prvHeapInit+0xb8>)
 80081c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <prvHeapInit+0xbc>)
 80081ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081cc:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <prvHeapInit+0xc0>)
 80081ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081d2:	601a      	str	r2, [r3, #0]
}
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	20000d90 	.word	0x20000d90
 80081e4:	20004990 	.word	0x20004990
 80081e8:	20004998 	.word	0x20004998
 80081ec:	200049a0 	.word	0x200049a0
 80081f0:	2000499c 	.word	0x2000499c
 80081f4:	200049a4 	.word	0x200049a4

080081f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008200:	4b28      	ldr	r3, [pc, #160]	; (80082a4 <prvInsertBlockIntoFreeList+0xac>)
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e002      	b.n	800820c <prvInsertBlockIntoFreeList+0x14>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	429a      	cmp	r2, r3
 8008214:	d8f7      	bhi.n	8008206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	4413      	add	r3, r2
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d108      	bne.n	800823a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	441a      	add	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	441a      	add	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	429a      	cmp	r2, r3
 800824c:	d118      	bne.n	8008280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b15      	ldr	r3, [pc, #84]	; (80082a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d00d      	beq.n	8008276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	441a      	add	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	e008      	b.n	8008288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e003      	b.n	8008288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d002      	beq.n	8008296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20004990 	.word	0x20004990
 80082a8:	20004998 	.word	0x20004998

080082ac <__errno>:
 80082ac:	4b01      	ldr	r3, [pc, #4]	; (80082b4 <__errno+0x8>)
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	2000001c 	.word	0x2000001c

080082b8 <__libc_init_array>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	4d0d      	ldr	r5, [pc, #52]	; (80082f0 <__libc_init_array+0x38>)
 80082bc:	4c0d      	ldr	r4, [pc, #52]	; (80082f4 <__libc_init_array+0x3c>)
 80082be:	1b64      	subs	r4, r4, r5
 80082c0:	10a4      	asrs	r4, r4, #2
 80082c2:	2600      	movs	r6, #0
 80082c4:	42a6      	cmp	r6, r4
 80082c6:	d109      	bne.n	80082dc <__libc_init_array+0x24>
 80082c8:	4d0b      	ldr	r5, [pc, #44]	; (80082f8 <__libc_init_array+0x40>)
 80082ca:	4c0c      	ldr	r4, [pc, #48]	; (80082fc <__libc_init_array+0x44>)
 80082cc:	f001 f92a 	bl	8009524 <_init>
 80082d0:	1b64      	subs	r4, r4, r5
 80082d2:	10a4      	asrs	r4, r4, #2
 80082d4:	2600      	movs	r6, #0
 80082d6:	42a6      	cmp	r6, r4
 80082d8:	d105      	bne.n	80082e6 <__libc_init_array+0x2e>
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e0:	4798      	blx	r3
 80082e2:	3601      	adds	r6, #1
 80082e4:	e7ee      	b.n	80082c4 <__libc_init_array+0xc>
 80082e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ea:	4798      	blx	r3
 80082ec:	3601      	adds	r6, #1
 80082ee:	e7f2      	b.n	80082d6 <__libc_init_array+0x1e>
 80082f0:	080097b8 	.word	0x080097b8
 80082f4:	080097b8 	.word	0x080097b8
 80082f8:	080097b8 	.word	0x080097b8
 80082fc:	080097bc 	.word	0x080097bc

08008300 <malloc>:
 8008300:	4b02      	ldr	r3, [pc, #8]	; (800830c <malloc+0xc>)
 8008302:	4601      	mov	r1, r0
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	f000 b871 	b.w	80083ec <_malloc_r>
 800830a:	bf00      	nop
 800830c:	2000001c 	.word	0x2000001c

08008310 <free>:
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <free+0xc>)
 8008312:	4601      	mov	r1, r0
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	f000 b819 	b.w	800834c <_free_r>
 800831a:	bf00      	nop
 800831c:	2000001c 	.word	0x2000001c

08008320 <memcpy>:
 8008320:	440a      	add	r2, r1
 8008322:	4291      	cmp	r1, r2
 8008324:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008328:	d100      	bne.n	800832c <memcpy+0xc>
 800832a:	4770      	bx	lr
 800832c:	b510      	push	{r4, lr}
 800832e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008336:	4291      	cmp	r1, r2
 8008338:	d1f9      	bne.n	800832e <memcpy+0xe>
 800833a:	bd10      	pop	{r4, pc}

0800833c <memset>:
 800833c:	4402      	add	r2, r0
 800833e:	4603      	mov	r3, r0
 8008340:	4293      	cmp	r3, r2
 8008342:	d100      	bne.n	8008346 <memset+0xa>
 8008344:	4770      	bx	lr
 8008346:	f803 1b01 	strb.w	r1, [r3], #1
 800834a:	e7f9      	b.n	8008340 <memset+0x4>

0800834c <_free_r>:
 800834c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800834e:	2900      	cmp	r1, #0
 8008350:	d048      	beq.n	80083e4 <_free_r+0x98>
 8008352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008356:	9001      	str	r0, [sp, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f1a1 0404 	sub.w	r4, r1, #4
 800835e:	bfb8      	it	lt
 8008360:	18e4      	addlt	r4, r4, r3
 8008362:	f000 fce5 	bl	8008d30 <__malloc_lock>
 8008366:	4a20      	ldr	r2, [pc, #128]	; (80083e8 <_free_r+0x9c>)
 8008368:	9801      	ldr	r0, [sp, #4]
 800836a:	6813      	ldr	r3, [r2, #0]
 800836c:	4615      	mov	r5, r2
 800836e:	b933      	cbnz	r3, 800837e <_free_r+0x32>
 8008370:	6063      	str	r3, [r4, #4]
 8008372:	6014      	str	r4, [r2, #0]
 8008374:	b003      	add	sp, #12
 8008376:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800837a:	f000 bcdf 	b.w	8008d3c <__malloc_unlock>
 800837e:	42a3      	cmp	r3, r4
 8008380:	d90b      	bls.n	800839a <_free_r+0x4e>
 8008382:	6821      	ldr	r1, [r4, #0]
 8008384:	1862      	adds	r2, r4, r1
 8008386:	4293      	cmp	r3, r2
 8008388:	bf04      	itt	eq
 800838a:	681a      	ldreq	r2, [r3, #0]
 800838c:	685b      	ldreq	r3, [r3, #4]
 800838e:	6063      	str	r3, [r4, #4]
 8008390:	bf04      	itt	eq
 8008392:	1852      	addeq	r2, r2, r1
 8008394:	6022      	streq	r2, [r4, #0]
 8008396:	602c      	str	r4, [r5, #0]
 8008398:	e7ec      	b.n	8008374 <_free_r+0x28>
 800839a:	461a      	mov	r2, r3
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	b10b      	cbz	r3, 80083a4 <_free_r+0x58>
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d9fa      	bls.n	800839a <_free_r+0x4e>
 80083a4:	6811      	ldr	r1, [r2, #0]
 80083a6:	1855      	adds	r5, r2, r1
 80083a8:	42a5      	cmp	r5, r4
 80083aa:	d10b      	bne.n	80083c4 <_free_r+0x78>
 80083ac:	6824      	ldr	r4, [r4, #0]
 80083ae:	4421      	add	r1, r4
 80083b0:	1854      	adds	r4, r2, r1
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	6011      	str	r1, [r2, #0]
 80083b6:	d1dd      	bne.n	8008374 <_free_r+0x28>
 80083b8:	681c      	ldr	r4, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	6053      	str	r3, [r2, #4]
 80083be:	4421      	add	r1, r4
 80083c0:	6011      	str	r1, [r2, #0]
 80083c2:	e7d7      	b.n	8008374 <_free_r+0x28>
 80083c4:	d902      	bls.n	80083cc <_free_r+0x80>
 80083c6:	230c      	movs	r3, #12
 80083c8:	6003      	str	r3, [r0, #0]
 80083ca:	e7d3      	b.n	8008374 <_free_r+0x28>
 80083cc:	6825      	ldr	r5, [r4, #0]
 80083ce:	1961      	adds	r1, r4, r5
 80083d0:	428b      	cmp	r3, r1
 80083d2:	bf04      	itt	eq
 80083d4:	6819      	ldreq	r1, [r3, #0]
 80083d6:	685b      	ldreq	r3, [r3, #4]
 80083d8:	6063      	str	r3, [r4, #4]
 80083da:	bf04      	itt	eq
 80083dc:	1949      	addeq	r1, r1, r5
 80083de:	6021      	streq	r1, [r4, #0]
 80083e0:	6054      	str	r4, [r2, #4]
 80083e2:	e7c7      	b.n	8008374 <_free_r+0x28>
 80083e4:	b003      	add	sp, #12
 80083e6:	bd30      	pop	{r4, r5, pc}
 80083e8:	200049a8 	.word	0x200049a8

080083ec <_malloc_r>:
 80083ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ee:	1ccd      	adds	r5, r1, #3
 80083f0:	f025 0503 	bic.w	r5, r5, #3
 80083f4:	3508      	adds	r5, #8
 80083f6:	2d0c      	cmp	r5, #12
 80083f8:	bf38      	it	cc
 80083fa:	250c      	movcc	r5, #12
 80083fc:	2d00      	cmp	r5, #0
 80083fe:	4606      	mov	r6, r0
 8008400:	db01      	blt.n	8008406 <_malloc_r+0x1a>
 8008402:	42a9      	cmp	r1, r5
 8008404:	d903      	bls.n	800840e <_malloc_r+0x22>
 8008406:	230c      	movs	r3, #12
 8008408:	6033      	str	r3, [r6, #0]
 800840a:	2000      	movs	r0, #0
 800840c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800840e:	f000 fc8f 	bl	8008d30 <__malloc_lock>
 8008412:	4921      	ldr	r1, [pc, #132]	; (8008498 <_malloc_r+0xac>)
 8008414:	680a      	ldr	r2, [r1, #0]
 8008416:	4614      	mov	r4, r2
 8008418:	b99c      	cbnz	r4, 8008442 <_malloc_r+0x56>
 800841a:	4f20      	ldr	r7, [pc, #128]	; (800849c <_malloc_r+0xb0>)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	b923      	cbnz	r3, 800842a <_malloc_r+0x3e>
 8008420:	4621      	mov	r1, r4
 8008422:	4630      	mov	r0, r6
 8008424:	f000 f938 	bl	8008698 <_sbrk_r>
 8008428:	6038      	str	r0, [r7, #0]
 800842a:	4629      	mov	r1, r5
 800842c:	4630      	mov	r0, r6
 800842e:	f000 f933 	bl	8008698 <_sbrk_r>
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	d123      	bne.n	800847e <_malloc_r+0x92>
 8008436:	230c      	movs	r3, #12
 8008438:	6033      	str	r3, [r6, #0]
 800843a:	4630      	mov	r0, r6
 800843c:	f000 fc7e 	bl	8008d3c <__malloc_unlock>
 8008440:	e7e3      	b.n	800840a <_malloc_r+0x1e>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	1b5b      	subs	r3, r3, r5
 8008446:	d417      	bmi.n	8008478 <_malloc_r+0x8c>
 8008448:	2b0b      	cmp	r3, #11
 800844a:	d903      	bls.n	8008454 <_malloc_r+0x68>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	441c      	add	r4, r3
 8008450:	6025      	str	r5, [r4, #0]
 8008452:	e004      	b.n	800845e <_malloc_r+0x72>
 8008454:	6863      	ldr	r3, [r4, #4]
 8008456:	42a2      	cmp	r2, r4
 8008458:	bf0c      	ite	eq
 800845a:	600b      	streq	r3, [r1, #0]
 800845c:	6053      	strne	r3, [r2, #4]
 800845e:	4630      	mov	r0, r6
 8008460:	f000 fc6c 	bl	8008d3c <__malloc_unlock>
 8008464:	f104 000b 	add.w	r0, r4, #11
 8008468:	1d23      	adds	r3, r4, #4
 800846a:	f020 0007 	bic.w	r0, r0, #7
 800846e:	1ac2      	subs	r2, r0, r3
 8008470:	d0cc      	beq.n	800840c <_malloc_r+0x20>
 8008472:	1a1b      	subs	r3, r3, r0
 8008474:	50a3      	str	r3, [r4, r2]
 8008476:	e7c9      	b.n	800840c <_malloc_r+0x20>
 8008478:	4622      	mov	r2, r4
 800847a:	6864      	ldr	r4, [r4, #4]
 800847c:	e7cc      	b.n	8008418 <_malloc_r+0x2c>
 800847e:	1cc4      	adds	r4, r0, #3
 8008480:	f024 0403 	bic.w	r4, r4, #3
 8008484:	42a0      	cmp	r0, r4
 8008486:	d0e3      	beq.n	8008450 <_malloc_r+0x64>
 8008488:	1a21      	subs	r1, r4, r0
 800848a:	4630      	mov	r0, r6
 800848c:	f000 f904 	bl	8008698 <_sbrk_r>
 8008490:	3001      	adds	r0, #1
 8008492:	d1dd      	bne.n	8008450 <_malloc_r+0x64>
 8008494:	e7cf      	b.n	8008436 <_malloc_r+0x4a>
 8008496:	bf00      	nop
 8008498:	200049a8 	.word	0x200049a8
 800849c:	200049ac 	.word	0x200049ac

080084a0 <iprintf>:
 80084a0:	b40f      	push	{r0, r1, r2, r3}
 80084a2:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <iprintf+0x2c>)
 80084a4:	b513      	push	{r0, r1, r4, lr}
 80084a6:	681c      	ldr	r4, [r3, #0]
 80084a8:	b124      	cbz	r4, 80084b4 <iprintf+0x14>
 80084aa:	69a3      	ldr	r3, [r4, #24]
 80084ac:	b913      	cbnz	r3, 80084b4 <iprintf+0x14>
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 fb14 	bl	8008adc <__sinit>
 80084b4:	ab05      	add	r3, sp, #20
 80084b6:	9a04      	ldr	r2, [sp, #16]
 80084b8:	68a1      	ldr	r1, [r4, #8]
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fc6d 	bl	8008d9c <_vfiprintf_r>
 80084c2:	b002      	add	sp, #8
 80084c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c8:	b004      	add	sp, #16
 80084ca:	4770      	bx	lr
 80084cc:	2000001c 	.word	0x2000001c

080084d0 <_puts_r>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	460e      	mov	r6, r1
 80084d4:	4605      	mov	r5, r0
 80084d6:	b118      	cbz	r0, 80084e0 <_puts_r+0x10>
 80084d8:	6983      	ldr	r3, [r0, #24]
 80084da:	b90b      	cbnz	r3, 80084e0 <_puts_r+0x10>
 80084dc:	f000 fafe 	bl	8008adc <__sinit>
 80084e0:	69ab      	ldr	r3, [r5, #24]
 80084e2:	68ac      	ldr	r4, [r5, #8]
 80084e4:	b913      	cbnz	r3, 80084ec <_puts_r+0x1c>
 80084e6:	4628      	mov	r0, r5
 80084e8:	f000 faf8 	bl	8008adc <__sinit>
 80084ec:	4b2c      	ldr	r3, [pc, #176]	; (80085a0 <_puts_r+0xd0>)
 80084ee:	429c      	cmp	r4, r3
 80084f0:	d120      	bne.n	8008534 <_puts_r+0x64>
 80084f2:	686c      	ldr	r4, [r5, #4]
 80084f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084f6:	07db      	lsls	r3, r3, #31
 80084f8:	d405      	bmi.n	8008506 <_puts_r+0x36>
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	0598      	lsls	r0, r3, #22
 80084fe:	d402      	bmi.n	8008506 <_puts_r+0x36>
 8008500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008502:	f000 fbae 	bl	8008c62 <__retarget_lock_acquire_recursive>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	0719      	lsls	r1, r3, #28
 800850a:	d51d      	bpl.n	8008548 <_puts_r+0x78>
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	b1db      	cbz	r3, 8008548 <_puts_r+0x78>
 8008510:	3e01      	subs	r6, #1
 8008512:	68a3      	ldr	r3, [r4, #8]
 8008514:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008518:	3b01      	subs	r3, #1
 800851a:	60a3      	str	r3, [r4, #8]
 800851c:	bb39      	cbnz	r1, 800856e <_puts_r+0x9e>
 800851e:	2b00      	cmp	r3, #0
 8008520:	da38      	bge.n	8008594 <_puts_r+0xc4>
 8008522:	4622      	mov	r2, r4
 8008524:	210a      	movs	r1, #10
 8008526:	4628      	mov	r0, r5
 8008528:	f000 f8e0 	bl	80086ec <__swbuf_r>
 800852c:	3001      	adds	r0, #1
 800852e:	d011      	beq.n	8008554 <_puts_r+0x84>
 8008530:	250a      	movs	r5, #10
 8008532:	e011      	b.n	8008558 <_puts_r+0x88>
 8008534:	4b1b      	ldr	r3, [pc, #108]	; (80085a4 <_puts_r+0xd4>)
 8008536:	429c      	cmp	r4, r3
 8008538:	d101      	bne.n	800853e <_puts_r+0x6e>
 800853a:	68ac      	ldr	r4, [r5, #8]
 800853c:	e7da      	b.n	80084f4 <_puts_r+0x24>
 800853e:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <_puts_r+0xd8>)
 8008540:	429c      	cmp	r4, r3
 8008542:	bf08      	it	eq
 8008544:	68ec      	ldreq	r4, [r5, #12]
 8008546:	e7d5      	b.n	80084f4 <_puts_r+0x24>
 8008548:	4621      	mov	r1, r4
 800854a:	4628      	mov	r0, r5
 800854c:	f000 f920 	bl	8008790 <__swsetup_r>
 8008550:	2800      	cmp	r0, #0
 8008552:	d0dd      	beq.n	8008510 <_puts_r+0x40>
 8008554:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800855a:	07da      	lsls	r2, r3, #31
 800855c:	d405      	bmi.n	800856a <_puts_r+0x9a>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	059b      	lsls	r3, r3, #22
 8008562:	d402      	bmi.n	800856a <_puts_r+0x9a>
 8008564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008566:	f000 fb7d 	bl	8008c64 <__retarget_lock_release_recursive>
 800856a:	4628      	mov	r0, r5
 800856c:	bd70      	pop	{r4, r5, r6, pc}
 800856e:	2b00      	cmp	r3, #0
 8008570:	da04      	bge.n	800857c <_puts_r+0xac>
 8008572:	69a2      	ldr	r2, [r4, #24]
 8008574:	429a      	cmp	r2, r3
 8008576:	dc06      	bgt.n	8008586 <_puts_r+0xb6>
 8008578:	290a      	cmp	r1, #10
 800857a:	d004      	beq.n	8008586 <_puts_r+0xb6>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	1c5a      	adds	r2, r3, #1
 8008580:	6022      	str	r2, [r4, #0]
 8008582:	7019      	strb	r1, [r3, #0]
 8008584:	e7c5      	b.n	8008512 <_puts_r+0x42>
 8008586:	4622      	mov	r2, r4
 8008588:	4628      	mov	r0, r5
 800858a:	f000 f8af 	bl	80086ec <__swbuf_r>
 800858e:	3001      	adds	r0, #1
 8008590:	d1bf      	bne.n	8008512 <_puts_r+0x42>
 8008592:	e7df      	b.n	8008554 <_puts_r+0x84>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	250a      	movs	r5, #10
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	6022      	str	r2, [r4, #0]
 800859c:	701d      	strb	r5, [r3, #0]
 800859e:	e7db      	b.n	8008558 <_puts_r+0x88>
 80085a0:	0800973c 	.word	0x0800973c
 80085a4:	0800975c 	.word	0x0800975c
 80085a8:	0800971c 	.word	0x0800971c

080085ac <puts>:
 80085ac:	4b02      	ldr	r3, [pc, #8]	; (80085b8 <puts+0xc>)
 80085ae:	4601      	mov	r1, r0
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	f7ff bf8d 	b.w	80084d0 <_puts_r>
 80085b6:	bf00      	nop
 80085b8:	2000001c 	.word	0x2000001c

080085bc <srand>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4b10      	ldr	r3, [pc, #64]	; (8008600 <srand+0x44>)
 80085c0:	681d      	ldr	r5, [r3, #0]
 80085c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80085c4:	4604      	mov	r4, r0
 80085c6:	b9b3      	cbnz	r3, 80085f6 <srand+0x3a>
 80085c8:	2018      	movs	r0, #24
 80085ca:	f7ff fe99 	bl	8008300 <malloc>
 80085ce:	4602      	mov	r2, r0
 80085d0:	63a8      	str	r0, [r5, #56]	; 0x38
 80085d2:	b920      	cbnz	r0, 80085de <srand+0x22>
 80085d4:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <srand+0x48>)
 80085d6:	480c      	ldr	r0, [pc, #48]	; (8008608 <srand+0x4c>)
 80085d8:	2142      	movs	r1, #66	; 0x42
 80085da:	f000 f947 	bl	800886c <__assert_func>
 80085de:	490b      	ldr	r1, [pc, #44]	; (800860c <srand+0x50>)
 80085e0:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <srand+0x54>)
 80085e2:	e9c0 1300 	strd	r1, r3, [r0]
 80085e6:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <srand+0x58>)
 80085e8:	6083      	str	r3, [r0, #8]
 80085ea:	230b      	movs	r3, #11
 80085ec:	8183      	strh	r3, [r0, #12]
 80085ee:	2100      	movs	r1, #0
 80085f0:	2001      	movs	r0, #1
 80085f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80085f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80085f8:	2200      	movs	r2, #0
 80085fa:	611c      	str	r4, [r3, #16]
 80085fc:	615a      	str	r2, [r3, #20]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	2000001c 	.word	0x2000001c
 8008604:	08009668 	.word	0x08009668
 8008608:	0800967f 	.word	0x0800967f
 800860c:	abcd330e 	.word	0xabcd330e
 8008610:	e66d1234 	.word	0xe66d1234
 8008614:	0005deec 	.word	0x0005deec

08008618 <rand>:
 8008618:	4b17      	ldr	r3, [pc, #92]	; (8008678 <rand+0x60>)
 800861a:	b510      	push	{r4, lr}
 800861c:	681c      	ldr	r4, [r3, #0]
 800861e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008620:	b9b3      	cbnz	r3, 8008650 <rand+0x38>
 8008622:	2018      	movs	r0, #24
 8008624:	f7ff fe6c 	bl	8008300 <malloc>
 8008628:	63a0      	str	r0, [r4, #56]	; 0x38
 800862a:	b928      	cbnz	r0, 8008638 <rand+0x20>
 800862c:	4602      	mov	r2, r0
 800862e:	4b13      	ldr	r3, [pc, #76]	; (800867c <rand+0x64>)
 8008630:	4813      	ldr	r0, [pc, #76]	; (8008680 <rand+0x68>)
 8008632:	214e      	movs	r1, #78	; 0x4e
 8008634:	f000 f91a 	bl	800886c <__assert_func>
 8008638:	4a12      	ldr	r2, [pc, #72]	; (8008684 <rand+0x6c>)
 800863a:	4b13      	ldr	r3, [pc, #76]	; (8008688 <rand+0x70>)
 800863c:	e9c0 2300 	strd	r2, r3, [r0]
 8008640:	4b12      	ldr	r3, [pc, #72]	; (800868c <rand+0x74>)
 8008642:	6083      	str	r3, [r0, #8]
 8008644:	230b      	movs	r3, #11
 8008646:	8183      	strh	r3, [r0, #12]
 8008648:	2201      	movs	r2, #1
 800864a:	2300      	movs	r3, #0
 800864c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008650:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008652:	480f      	ldr	r0, [pc, #60]	; (8008690 <rand+0x78>)
 8008654:	690a      	ldr	r2, [r1, #16]
 8008656:	694b      	ldr	r3, [r1, #20]
 8008658:	4c0e      	ldr	r4, [pc, #56]	; (8008694 <rand+0x7c>)
 800865a:	4350      	muls	r0, r2
 800865c:	fb04 0003 	mla	r0, r4, r3, r0
 8008660:	fba2 3404 	umull	r3, r4, r2, r4
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	4404      	add	r4, r0
 8008668:	f144 0000 	adc.w	r0, r4, #0
 800866c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8008670:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008674:	bd10      	pop	{r4, pc}
 8008676:	bf00      	nop
 8008678:	2000001c 	.word	0x2000001c
 800867c:	08009668 	.word	0x08009668
 8008680:	0800967f 	.word	0x0800967f
 8008684:	abcd330e 	.word	0xabcd330e
 8008688:	e66d1234 	.word	0xe66d1234
 800868c:	0005deec 	.word	0x0005deec
 8008690:	5851f42d 	.word	0x5851f42d
 8008694:	4c957f2d 	.word	0x4c957f2d

08008698 <_sbrk_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d06      	ldr	r5, [pc, #24]	; (80086b4 <_sbrk_r+0x1c>)
 800869c:	2300      	movs	r3, #0
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	f7f8 fd54 	bl	8001150 <_sbrk>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d102      	bne.n	80086b2 <_sbrk_r+0x1a>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	b103      	cbz	r3, 80086b2 <_sbrk_r+0x1a>
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	20004f64 	.word	0x20004f64

080086b8 <time>:
 80086b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086ba:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <time+0x30>)
 80086bc:	2200      	movs	r2, #0
 80086be:	4669      	mov	r1, sp
 80086c0:	4604      	mov	r4, r0
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	f000 faba 	bl	8008c3c <_gettimeofday_r>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	bfbe      	ittt	lt
 80086cc:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80086d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086d4:	e9cd 2300 	strdlt	r2, r3, [sp]
 80086d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086dc:	b10c      	cbz	r4, 80086e2 <time+0x2a>
 80086de:	e9c4 0100 	strd	r0, r1, [r4]
 80086e2:	b004      	add	sp, #16
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	bf00      	nop
 80086e8:	2000001c 	.word	0x2000001c

080086ec <__swbuf_r>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	460e      	mov	r6, r1
 80086f0:	4614      	mov	r4, r2
 80086f2:	4605      	mov	r5, r0
 80086f4:	b118      	cbz	r0, 80086fe <__swbuf_r+0x12>
 80086f6:	6983      	ldr	r3, [r0, #24]
 80086f8:	b90b      	cbnz	r3, 80086fe <__swbuf_r+0x12>
 80086fa:	f000 f9ef 	bl	8008adc <__sinit>
 80086fe:	4b21      	ldr	r3, [pc, #132]	; (8008784 <__swbuf_r+0x98>)
 8008700:	429c      	cmp	r4, r3
 8008702:	d12b      	bne.n	800875c <__swbuf_r+0x70>
 8008704:	686c      	ldr	r4, [r5, #4]
 8008706:	69a3      	ldr	r3, [r4, #24]
 8008708:	60a3      	str	r3, [r4, #8]
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	071a      	lsls	r2, r3, #28
 800870e:	d52f      	bpl.n	8008770 <__swbuf_r+0x84>
 8008710:	6923      	ldr	r3, [r4, #16]
 8008712:	b36b      	cbz	r3, 8008770 <__swbuf_r+0x84>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	6820      	ldr	r0, [r4, #0]
 8008718:	1ac0      	subs	r0, r0, r3
 800871a:	6963      	ldr	r3, [r4, #20]
 800871c:	b2f6      	uxtb	r6, r6
 800871e:	4283      	cmp	r3, r0
 8008720:	4637      	mov	r7, r6
 8008722:	dc04      	bgt.n	800872e <__swbuf_r+0x42>
 8008724:	4621      	mov	r1, r4
 8008726:	4628      	mov	r0, r5
 8008728:	f000 f944 	bl	80089b4 <_fflush_r>
 800872c:	bb30      	cbnz	r0, 800877c <__swbuf_r+0x90>
 800872e:	68a3      	ldr	r3, [r4, #8]
 8008730:	3b01      	subs	r3, #1
 8008732:	60a3      	str	r3, [r4, #8]
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	6022      	str	r2, [r4, #0]
 800873a:	701e      	strb	r6, [r3, #0]
 800873c:	6963      	ldr	r3, [r4, #20]
 800873e:	3001      	adds	r0, #1
 8008740:	4283      	cmp	r3, r0
 8008742:	d004      	beq.n	800874e <__swbuf_r+0x62>
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	07db      	lsls	r3, r3, #31
 8008748:	d506      	bpl.n	8008758 <__swbuf_r+0x6c>
 800874a:	2e0a      	cmp	r6, #10
 800874c:	d104      	bne.n	8008758 <__swbuf_r+0x6c>
 800874e:	4621      	mov	r1, r4
 8008750:	4628      	mov	r0, r5
 8008752:	f000 f92f 	bl	80089b4 <_fflush_r>
 8008756:	b988      	cbnz	r0, 800877c <__swbuf_r+0x90>
 8008758:	4638      	mov	r0, r7
 800875a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800875c:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <__swbuf_r+0x9c>)
 800875e:	429c      	cmp	r4, r3
 8008760:	d101      	bne.n	8008766 <__swbuf_r+0x7a>
 8008762:	68ac      	ldr	r4, [r5, #8]
 8008764:	e7cf      	b.n	8008706 <__swbuf_r+0x1a>
 8008766:	4b09      	ldr	r3, [pc, #36]	; (800878c <__swbuf_r+0xa0>)
 8008768:	429c      	cmp	r4, r3
 800876a:	bf08      	it	eq
 800876c:	68ec      	ldreq	r4, [r5, #12]
 800876e:	e7ca      	b.n	8008706 <__swbuf_r+0x1a>
 8008770:	4621      	mov	r1, r4
 8008772:	4628      	mov	r0, r5
 8008774:	f000 f80c 	bl	8008790 <__swsetup_r>
 8008778:	2800      	cmp	r0, #0
 800877a:	d0cb      	beq.n	8008714 <__swbuf_r+0x28>
 800877c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008780:	e7ea      	b.n	8008758 <__swbuf_r+0x6c>
 8008782:	bf00      	nop
 8008784:	0800973c 	.word	0x0800973c
 8008788:	0800975c 	.word	0x0800975c
 800878c:	0800971c 	.word	0x0800971c

08008790 <__swsetup_r>:
 8008790:	4b32      	ldr	r3, [pc, #200]	; (800885c <__swsetup_r+0xcc>)
 8008792:	b570      	push	{r4, r5, r6, lr}
 8008794:	681d      	ldr	r5, [r3, #0]
 8008796:	4606      	mov	r6, r0
 8008798:	460c      	mov	r4, r1
 800879a:	b125      	cbz	r5, 80087a6 <__swsetup_r+0x16>
 800879c:	69ab      	ldr	r3, [r5, #24]
 800879e:	b913      	cbnz	r3, 80087a6 <__swsetup_r+0x16>
 80087a0:	4628      	mov	r0, r5
 80087a2:	f000 f99b 	bl	8008adc <__sinit>
 80087a6:	4b2e      	ldr	r3, [pc, #184]	; (8008860 <__swsetup_r+0xd0>)
 80087a8:	429c      	cmp	r4, r3
 80087aa:	d10f      	bne.n	80087cc <__swsetup_r+0x3c>
 80087ac:	686c      	ldr	r4, [r5, #4]
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087b4:	0719      	lsls	r1, r3, #28
 80087b6:	d42c      	bmi.n	8008812 <__swsetup_r+0x82>
 80087b8:	06dd      	lsls	r5, r3, #27
 80087ba:	d411      	bmi.n	80087e0 <__swsetup_r+0x50>
 80087bc:	2309      	movs	r3, #9
 80087be:	6033      	str	r3, [r6, #0]
 80087c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087c4:	81a3      	strh	r3, [r4, #12]
 80087c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ca:	e03e      	b.n	800884a <__swsetup_r+0xba>
 80087cc:	4b25      	ldr	r3, [pc, #148]	; (8008864 <__swsetup_r+0xd4>)
 80087ce:	429c      	cmp	r4, r3
 80087d0:	d101      	bne.n	80087d6 <__swsetup_r+0x46>
 80087d2:	68ac      	ldr	r4, [r5, #8]
 80087d4:	e7eb      	b.n	80087ae <__swsetup_r+0x1e>
 80087d6:	4b24      	ldr	r3, [pc, #144]	; (8008868 <__swsetup_r+0xd8>)
 80087d8:	429c      	cmp	r4, r3
 80087da:	bf08      	it	eq
 80087dc:	68ec      	ldreq	r4, [r5, #12]
 80087de:	e7e6      	b.n	80087ae <__swsetup_r+0x1e>
 80087e0:	0758      	lsls	r0, r3, #29
 80087e2:	d512      	bpl.n	800880a <__swsetup_r+0x7a>
 80087e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087e6:	b141      	cbz	r1, 80087fa <__swsetup_r+0x6a>
 80087e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087ec:	4299      	cmp	r1, r3
 80087ee:	d002      	beq.n	80087f6 <__swsetup_r+0x66>
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7ff fdab 	bl	800834c <_free_r>
 80087f6:	2300      	movs	r3, #0
 80087f8:	6363      	str	r3, [r4, #52]	; 0x34
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008800:	81a3      	strh	r3, [r4, #12]
 8008802:	2300      	movs	r3, #0
 8008804:	6063      	str	r3, [r4, #4]
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	f043 0308 	orr.w	r3, r3, #8
 8008810:	81a3      	strh	r3, [r4, #12]
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	b94b      	cbnz	r3, 800882a <__swsetup_r+0x9a>
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800881c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008820:	d003      	beq.n	800882a <__swsetup_r+0x9a>
 8008822:	4621      	mov	r1, r4
 8008824:	4630      	mov	r0, r6
 8008826:	f000 fa43 	bl	8008cb0 <__smakebuf_r>
 800882a:	89a0      	ldrh	r0, [r4, #12]
 800882c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008830:	f010 0301 	ands.w	r3, r0, #1
 8008834:	d00a      	beq.n	800884c <__swsetup_r+0xbc>
 8008836:	2300      	movs	r3, #0
 8008838:	60a3      	str	r3, [r4, #8]
 800883a:	6963      	ldr	r3, [r4, #20]
 800883c:	425b      	negs	r3, r3
 800883e:	61a3      	str	r3, [r4, #24]
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	b943      	cbnz	r3, 8008856 <__swsetup_r+0xc6>
 8008844:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008848:	d1ba      	bne.n	80087c0 <__swsetup_r+0x30>
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	0781      	lsls	r1, r0, #30
 800884e:	bf58      	it	pl
 8008850:	6963      	ldrpl	r3, [r4, #20]
 8008852:	60a3      	str	r3, [r4, #8]
 8008854:	e7f4      	b.n	8008840 <__swsetup_r+0xb0>
 8008856:	2000      	movs	r0, #0
 8008858:	e7f7      	b.n	800884a <__swsetup_r+0xba>
 800885a:	bf00      	nop
 800885c:	2000001c 	.word	0x2000001c
 8008860:	0800973c 	.word	0x0800973c
 8008864:	0800975c 	.word	0x0800975c
 8008868:	0800971c 	.word	0x0800971c

0800886c <__assert_func>:
 800886c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800886e:	4614      	mov	r4, r2
 8008870:	461a      	mov	r2, r3
 8008872:	4b09      	ldr	r3, [pc, #36]	; (8008898 <__assert_func+0x2c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4605      	mov	r5, r0
 8008878:	68d8      	ldr	r0, [r3, #12]
 800887a:	b14c      	cbz	r4, 8008890 <__assert_func+0x24>
 800887c:	4b07      	ldr	r3, [pc, #28]	; (800889c <__assert_func+0x30>)
 800887e:	9100      	str	r1, [sp, #0]
 8008880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008884:	4906      	ldr	r1, [pc, #24]	; (80088a0 <__assert_func+0x34>)
 8008886:	462b      	mov	r3, r5
 8008888:	f000 f9a6 	bl	8008bd8 <fiprintf>
 800888c:	f000 fda0 	bl	80093d0 <abort>
 8008890:	4b04      	ldr	r3, [pc, #16]	; (80088a4 <__assert_func+0x38>)
 8008892:	461c      	mov	r4, r3
 8008894:	e7f3      	b.n	800887e <__assert_func+0x12>
 8008896:	bf00      	nop
 8008898:	2000001c 	.word	0x2000001c
 800889c:	080096de 	.word	0x080096de
 80088a0:	080096eb 	.word	0x080096eb
 80088a4:	08009719 	.word	0x08009719

080088a8 <__sflush_r>:
 80088a8:	898a      	ldrh	r2, [r1, #12]
 80088aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ae:	4605      	mov	r5, r0
 80088b0:	0710      	lsls	r0, r2, #28
 80088b2:	460c      	mov	r4, r1
 80088b4:	d458      	bmi.n	8008968 <__sflush_r+0xc0>
 80088b6:	684b      	ldr	r3, [r1, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dc05      	bgt.n	80088c8 <__sflush_r+0x20>
 80088bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dc02      	bgt.n	80088c8 <__sflush_r+0x20>
 80088c2:	2000      	movs	r0, #0
 80088c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ca:	2e00      	cmp	r6, #0
 80088cc:	d0f9      	beq.n	80088c2 <__sflush_r+0x1a>
 80088ce:	2300      	movs	r3, #0
 80088d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088d4:	682f      	ldr	r7, [r5, #0]
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	d032      	beq.n	8008940 <__sflush_r+0x98>
 80088da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	075a      	lsls	r2, r3, #29
 80088e0:	d505      	bpl.n	80088ee <__sflush_r+0x46>
 80088e2:	6863      	ldr	r3, [r4, #4]
 80088e4:	1ac0      	subs	r0, r0, r3
 80088e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088e8:	b10b      	cbz	r3, 80088ee <__sflush_r+0x46>
 80088ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088ec:	1ac0      	subs	r0, r0, r3
 80088ee:	2300      	movs	r3, #0
 80088f0:	4602      	mov	r2, r0
 80088f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088f4:	6a21      	ldr	r1, [r4, #32]
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b0      	blx	r6
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	d106      	bne.n	800890e <__sflush_r+0x66>
 8008900:	6829      	ldr	r1, [r5, #0]
 8008902:	291d      	cmp	r1, #29
 8008904:	d82c      	bhi.n	8008960 <__sflush_r+0xb8>
 8008906:	4a2a      	ldr	r2, [pc, #168]	; (80089b0 <__sflush_r+0x108>)
 8008908:	40ca      	lsrs	r2, r1
 800890a:	07d6      	lsls	r6, r2, #31
 800890c:	d528      	bpl.n	8008960 <__sflush_r+0xb8>
 800890e:	2200      	movs	r2, #0
 8008910:	6062      	str	r2, [r4, #4]
 8008912:	04d9      	lsls	r1, r3, #19
 8008914:	6922      	ldr	r2, [r4, #16]
 8008916:	6022      	str	r2, [r4, #0]
 8008918:	d504      	bpl.n	8008924 <__sflush_r+0x7c>
 800891a:	1c42      	adds	r2, r0, #1
 800891c:	d101      	bne.n	8008922 <__sflush_r+0x7a>
 800891e:	682b      	ldr	r3, [r5, #0]
 8008920:	b903      	cbnz	r3, 8008924 <__sflush_r+0x7c>
 8008922:	6560      	str	r0, [r4, #84]	; 0x54
 8008924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008926:	602f      	str	r7, [r5, #0]
 8008928:	2900      	cmp	r1, #0
 800892a:	d0ca      	beq.n	80088c2 <__sflush_r+0x1a>
 800892c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008930:	4299      	cmp	r1, r3
 8008932:	d002      	beq.n	800893a <__sflush_r+0x92>
 8008934:	4628      	mov	r0, r5
 8008936:	f7ff fd09 	bl	800834c <_free_r>
 800893a:	2000      	movs	r0, #0
 800893c:	6360      	str	r0, [r4, #52]	; 0x34
 800893e:	e7c1      	b.n	80088c4 <__sflush_r+0x1c>
 8008940:	6a21      	ldr	r1, [r4, #32]
 8008942:	2301      	movs	r3, #1
 8008944:	4628      	mov	r0, r5
 8008946:	47b0      	blx	r6
 8008948:	1c41      	adds	r1, r0, #1
 800894a:	d1c7      	bne.n	80088dc <__sflush_r+0x34>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0c4      	beq.n	80088dc <__sflush_r+0x34>
 8008952:	2b1d      	cmp	r3, #29
 8008954:	d001      	beq.n	800895a <__sflush_r+0xb2>
 8008956:	2b16      	cmp	r3, #22
 8008958:	d101      	bne.n	800895e <__sflush_r+0xb6>
 800895a:	602f      	str	r7, [r5, #0]
 800895c:	e7b1      	b.n	80088c2 <__sflush_r+0x1a>
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008964:	81a3      	strh	r3, [r4, #12]
 8008966:	e7ad      	b.n	80088c4 <__sflush_r+0x1c>
 8008968:	690f      	ldr	r7, [r1, #16]
 800896a:	2f00      	cmp	r7, #0
 800896c:	d0a9      	beq.n	80088c2 <__sflush_r+0x1a>
 800896e:	0793      	lsls	r3, r2, #30
 8008970:	680e      	ldr	r6, [r1, #0]
 8008972:	bf08      	it	eq
 8008974:	694b      	ldreq	r3, [r1, #20]
 8008976:	600f      	str	r7, [r1, #0]
 8008978:	bf18      	it	ne
 800897a:	2300      	movne	r3, #0
 800897c:	eba6 0807 	sub.w	r8, r6, r7
 8008980:	608b      	str	r3, [r1, #8]
 8008982:	f1b8 0f00 	cmp.w	r8, #0
 8008986:	dd9c      	ble.n	80088c2 <__sflush_r+0x1a>
 8008988:	6a21      	ldr	r1, [r4, #32]
 800898a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800898c:	4643      	mov	r3, r8
 800898e:	463a      	mov	r2, r7
 8008990:	4628      	mov	r0, r5
 8008992:	47b0      	blx	r6
 8008994:	2800      	cmp	r0, #0
 8008996:	dc06      	bgt.n	80089a6 <__sflush_r+0xfe>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800899e:	81a3      	strh	r3, [r4, #12]
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089a4:	e78e      	b.n	80088c4 <__sflush_r+0x1c>
 80089a6:	4407      	add	r7, r0
 80089a8:	eba8 0800 	sub.w	r8, r8, r0
 80089ac:	e7e9      	b.n	8008982 <__sflush_r+0xda>
 80089ae:	bf00      	nop
 80089b0:	20400001 	.word	0x20400001

080089b4 <_fflush_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	690b      	ldr	r3, [r1, #16]
 80089b8:	4605      	mov	r5, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	b913      	cbnz	r3, 80089c4 <_fflush_r+0x10>
 80089be:	2500      	movs	r5, #0
 80089c0:	4628      	mov	r0, r5
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	b118      	cbz	r0, 80089ce <_fflush_r+0x1a>
 80089c6:	6983      	ldr	r3, [r0, #24]
 80089c8:	b90b      	cbnz	r3, 80089ce <_fflush_r+0x1a>
 80089ca:	f000 f887 	bl	8008adc <__sinit>
 80089ce:	4b14      	ldr	r3, [pc, #80]	; (8008a20 <_fflush_r+0x6c>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	d11b      	bne.n	8008a0c <_fflush_r+0x58>
 80089d4:	686c      	ldr	r4, [r5, #4]
 80089d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0ef      	beq.n	80089be <_fflush_r+0xa>
 80089de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089e0:	07d0      	lsls	r0, r2, #31
 80089e2:	d404      	bmi.n	80089ee <_fflush_r+0x3a>
 80089e4:	0599      	lsls	r1, r3, #22
 80089e6:	d402      	bmi.n	80089ee <_fflush_r+0x3a>
 80089e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ea:	f000 f93a 	bl	8008c62 <__retarget_lock_acquire_recursive>
 80089ee:	4628      	mov	r0, r5
 80089f0:	4621      	mov	r1, r4
 80089f2:	f7ff ff59 	bl	80088a8 <__sflush_r>
 80089f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f8:	07da      	lsls	r2, r3, #31
 80089fa:	4605      	mov	r5, r0
 80089fc:	d4e0      	bmi.n	80089c0 <_fflush_r+0xc>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	059b      	lsls	r3, r3, #22
 8008a02:	d4dd      	bmi.n	80089c0 <_fflush_r+0xc>
 8008a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a06:	f000 f92d 	bl	8008c64 <__retarget_lock_release_recursive>
 8008a0a:	e7d9      	b.n	80089c0 <_fflush_r+0xc>
 8008a0c:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <_fflush_r+0x70>)
 8008a0e:	429c      	cmp	r4, r3
 8008a10:	d101      	bne.n	8008a16 <_fflush_r+0x62>
 8008a12:	68ac      	ldr	r4, [r5, #8]
 8008a14:	e7df      	b.n	80089d6 <_fflush_r+0x22>
 8008a16:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <_fflush_r+0x74>)
 8008a18:	429c      	cmp	r4, r3
 8008a1a:	bf08      	it	eq
 8008a1c:	68ec      	ldreq	r4, [r5, #12]
 8008a1e:	e7da      	b.n	80089d6 <_fflush_r+0x22>
 8008a20:	0800973c 	.word	0x0800973c
 8008a24:	0800975c 	.word	0x0800975c
 8008a28:	0800971c 	.word	0x0800971c

08008a2c <std>:
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	4604      	mov	r4, r0
 8008a32:	e9c0 3300 	strd	r3, r3, [r0]
 8008a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a3a:	6083      	str	r3, [r0, #8]
 8008a3c:	8181      	strh	r1, [r0, #12]
 8008a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a40:	81c2      	strh	r2, [r0, #14]
 8008a42:	6183      	str	r3, [r0, #24]
 8008a44:	4619      	mov	r1, r3
 8008a46:	2208      	movs	r2, #8
 8008a48:	305c      	adds	r0, #92	; 0x5c
 8008a4a:	f7ff fc77 	bl	800833c <memset>
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <std+0x38>)
 8008a50:	6263      	str	r3, [r4, #36]	; 0x24
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <std+0x3c>)
 8008a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a56:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <std+0x40>)
 8008a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a5a:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <std+0x44>)
 8008a5c:	6224      	str	r4, [r4, #32]
 8008a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a60:	bd10      	pop	{r4, pc}
 8008a62:	bf00      	nop
 8008a64:	08009325 	.word	0x08009325
 8008a68:	08009347 	.word	0x08009347
 8008a6c:	0800937f 	.word	0x0800937f
 8008a70:	080093a3 	.word	0x080093a3

08008a74 <_cleanup_r>:
 8008a74:	4901      	ldr	r1, [pc, #4]	; (8008a7c <_cleanup_r+0x8>)
 8008a76:	f000 b8c1 	b.w	8008bfc <_fwalk_reent>
 8008a7a:	bf00      	nop
 8008a7c:	080089b5 	.word	0x080089b5

08008a80 <__sfmoreglue>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	1e4a      	subs	r2, r1, #1
 8008a84:	2568      	movs	r5, #104	; 0x68
 8008a86:	4355      	muls	r5, r2
 8008a88:	460e      	mov	r6, r1
 8008a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a8e:	f7ff fcad 	bl	80083ec <_malloc_r>
 8008a92:	4604      	mov	r4, r0
 8008a94:	b140      	cbz	r0, 8008aa8 <__sfmoreglue+0x28>
 8008a96:	2100      	movs	r1, #0
 8008a98:	e9c0 1600 	strd	r1, r6, [r0]
 8008a9c:	300c      	adds	r0, #12
 8008a9e:	60a0      	str	r0, [r4, #8]
 8008aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008aa4:	f7ff fc4a 	bl	800833c <memset>
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}

08008aac <__sfp_lock_acquire>:
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <__sfp_lock_acquire+0x8>)
 8008aae:	f000 b8d8 	b.w	8008c62 <__retarget_lock_acquire_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	20004f60 	.word	0x20004f60

08008ab8 <__sfp_lock_release>:
 8008ab8:	4801      	ldr	r0, [pc, #4]	; (8008ac0 <__sfp_lock_release+0x8>)
 8008aba:	f000 b8d3 	b.w	8008c64 <__retarget_lock_release_recursive>
 8008abe:	bf00      	nop
 8008ac0:	20004f60 	.word	0x20004f60

08008ac4 <__sinit_lock_acquire>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	; (8008acc <__sinit_lock_acquire+0x8>)
 8008ac6:	f000 b8cc 	b.w	8008c62 <__retarget_lock_acquire_recursive>
 8008aca:	bf00      	nop
 8008acc:	20004f5b 	.word	0x20004f5b

08008ad0 <__sinit_lock_release>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <__sinit_lock_release+0x8>)
 8008ad2:	f000 b8c7 	b.w	8008c64 <__retarget_lock_release_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	20004f5b 	.word	0x20004f5b

08008adc <__sinit>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	4604      	mov	r4, r0
 8008ae0:	f7ff fff0 	bl	8008ac4 <__sinit_lock_acquire>
 8008ae4:	69a3      	ldr	r3, [r4, #24]
 8008ae6:	b11b      	cbz	r3, 8008af0 <__sinit+0x14>
 8008ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aec:	f7ff bff0 	b.w	8008ad0 <__sinit_lock_release>
 8008af0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008af4:	6523      	str	r3, [r4, #80]	; 0x50
 8008af6:	4b13      	ldr	r3, [pc, #76]	; (8008b44 <__sinit+0x68>)
 8008af8:	4a13      	ldr	r2, [pc, #76]	; (8008b48 <__sinit+0x6c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008afe:	42a3      	cmp	r3, r4
 8008b00:	bf04      	itt	eq
 8008b02:	2301      	moveq	r3, #1
 8008b04:	61a3      	streq	r3, [r4, #24]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f820 	bl	8008b4c <__sfp>
 8008b0c:	6060      	str	r0, [r4, #4]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 f81c 	bl	8008b4c <__sfp>
 8008b14:	60a0      	str	r0, [r4, #8]
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 f818 	bl	8008b4c <__sfp>
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	60e0      	str	r0, [r4, #12]
 8008b20:	2104      	movs	r1, #4
 8008b22:	6860      	ldr	r0, [r4, #4]
 8008b24:	f7ff ff82 	bl	8008a2c <std>
 8008b28:	68a0      	ldr	r0, [r4, #8]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	2109      	movs	r1, #9
 8008b2e:	f7ff ff7d 	bl	8008a2c <std>
 8008b32:	68e0      	ldr	r0, [r4, #12]
 8008b34:	2202      	movs	r2, #2
 8008b36:	2112      	movs	r1, #18
 8008b38:	f7ff ff78 	bl	8008a2c <std>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	61a3      	str	r3, [r4, #24]
 8008b40:	e7d2      	b.n	8008ae8 <__sinit+0xc>
 8008b42:	bf00      	nop
 8008b44:	08009664 	.word	0x08009664
 8008b48:	08008a75 	.word	0x08008a75

08008b4c <__sfp>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	4607      	mov	r7, r0
 8008b50:	f7ff ffac 	bl	8008aac <__sfp_lock_acquire>
 8008b54:	4b1e      	ldr	r3, [pc, #120]	; (8008bd0 <__sfp+0x84>)
 8008b56:	681e      	ldr	r6, [r3, #0]
 8008b58:	69b3      	ldr	r3, [r6, #24]
 8008b5a:	b913      	cbnz	r3, 8008b62 <__sfp+0x16>
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff ffbd 	bl	8008adc <__sinit>
 8008b62:	3648      	adds	r6, #72	; 0x48
 8008b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	d503      	bpl.n	8008b74 <__sfp+0x28>
 8008b6c:	6833      	ldr	r3, [r6, #0]
 8008b6e:	b30b      	cbz	r3, 8008bb4 <__sfp+0x68>
 8008b70:	6836      	ldr	r6, [r6, #0]
 8008b72:	e7f7      	b.n	8008b64 <__sfp+0x18>
 8008b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b78:	b9d5      	cbnz	r5, 8008bb0 <__sfp+0x64>
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <__sfp+0x88>)
 8008b7c:	60e3      	str	r3, [r4, #12]
 8008b7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b82:	6665      	str	r5, [r4, #100]	; 0x64
 8008b84:	f000 f86c 	bl	8008c60 <__retarget_lock_init_recursive>
 8008b88:	f7ff ff96 	bl	8008ab8 <__sfp_lock_release>
 8008b8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b94:	6025      	str	r5, [r4, #0]
 8008b96:	61a5      	str	r5, [r4, #24]
 8008b98:	2208      	movs	r2, #8
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ba0:	f7ff fbcc 	bl	800833c <memset>
 8008ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bac:	4620      	mov	r0, r4
 8008bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb0:	3468      	adds	r4, #104	; 0x68
 8008bb2:	e7d9      	b.n	8008b68 <__sfp+0x1c>
 8008bb4:	2104      	movs	r1, #4
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	f7ff ff62 	bl	8008a80 <__sfmoreglue>
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	6030      	str	r0, [r6, #0]
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d1d5      	bne.n	8008b70 <__sfp+0x24>
 8008bc4:	f7ff ff78 	bl	8008ab8 <__sfp_lock_release>
 8008bc8:	230c      	movs	r3, #12
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	e7ee      	b.n	8008bac <__sfp+0x60>
 8008bce:	bf00      	nop
 8008bd0:	08009664 	.word	0x08009664
 8008bd4:	ffff0001 	.word	0xffff0001

08008bd8 <fiprintf>:
 8008bd8:	b40e      	push	{r1, r2, r3}
 8008bda:	b503      	push	{r0, r1, lr}
 8008bdc:	4601      	mov	r1, r0
 8008bde:	ab03      	add	r3, sp, #12
 8008be0:	4805      	ldr	r0, [pc, #20]	; (8008bf8 <fiprintf+0x20>)
 8008be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be6:	6800      	ldr	r0, [r0, #0]
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	f000 f8d7 	bl	8008d9c <_vfiprintf_r>
 8008bee:	b002      	add	sp, #8
 8008bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf4:	b003      	add	sp, #12
 8008bf6:	4770      	bx	lr
 8008bf8:	2000001c 	.word	0x2000001c

08008bfc <_fwalk_reent>:
 8008bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c00:	4606      	mov	r6, r0
 8008c02:	4688      	mov	r8, r1
 8008c04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c08:	2700      	movs	r7, #0
 8008c0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c0e:	f1b9 0901 	subs.w	r9, r9, #1
 8008c12:	d505      	bpl.n	8008c20 <_fwalk_reent+0x24>
 8008c14:	6824      	ldr	r4, [r4, #0]
 8008c16:	2c00      	cmp	r4, #0
 8008c18:	d1f7      	bne.n	8008c0a <_fwalk_reent+0xe>
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c20:	89ab      	ldrh	r3, [r5, #12]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d907      	bls.n	8008c36 <_fwalk_reent+0x3a>
 8008c26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	d003      	beq.n	8008c36 <_fwalk_reent+0x3a>
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4630      	mov	r0, r6
 8008c32:	47c0      	blx	r8
 8008c34:	4307      	orrs	r7, r0
 8008c36:	3568      	adds	r5, #104	; 0x68
 8008c38:	e7e9      	b.n	8008c0e <_fwalk_reent+0x12>
	...

08008c3c <_gettimeofday_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	4d07      	ldr	r5, [pc, #28]	; (8008c5c <_gettimeofday_r+0x20>)
 8008c40:	2300      	movs	r3, #0
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	4611      	mov	r1, r2
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	f000 fc63 	bl	8009514 <_gettimeofday>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	d102      	bne.n	8008c58 <_gettimeofday_r+0x1c>
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	b103      	cbz	r3, 8008c58 <_gettimeofday_r+0x1c>
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	bd38      	pop	{r3, r4, r5, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20004f64 	.word	0x20004f64

08008c60 <__retarget_lock_init_recursive>:
 8008c60:	4770      	bx	lr

08008c62 <__retarget_lock_acquire_recursive>:
 8008c62:	4770      	bx	lr

08008c64 <__retarget_lock_release_recursive>:
 8008c64:	4770      	bx	lr

08008c66 <__swhatbuf_r>:
 8008c66:	b570      	push	{r4, r5, r6, lr}
 8008c68:	460e      	mov	r6, r1
 8008c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6e:	2900      	cmp	r1, #0
 8008c70:	b096      	sub	sp, #88	; 0x58
 8008c72:	4614      	mov	r4, r2
 8008c74:	461d      	mov	r5, r3
 8008c76:	da07      	bge.n	8008c88 <__swhatbuf_r+0x22>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	602b      	str	r3, [r5, #0]
 8008c7c:	89b3      	ldrh	r3, [r6, #12]
 8008c7e:	061a      	lsls	r2, r3, #24
 8008c80:	d410      	bmi.n	8008ca4 <__swhatbuf_r+0x3e>
 8008c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c86:	e00e      	b.n	8008ca6 <__swhatbuf_r+0x40>
 8008c88:	466a      	mov	r2, sp
 8008c8a:	f000 fbb9 	bl	8009400 <_fstat_r>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	dbf2      	blt.n	8008c78 <__swhatbuf_r+0x12>
 8008c92:	9a01      	ldr	r2, [sp, #4]
 8008c94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c9c:	425a      	negs	r2, r3
 8008c9e:	415a      	adcs	r2, r3
 8008ca0:	602a      	str	r2, [r5, #0]
 8008ca2:	e7ee      	b.n	8008c82 <__swhatbuf_r+0x1c>
 8008ca4:	2340      	movs	r3, #64	; 0x40
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	b016      	add	sp, #88	; 0x58
 8008cac:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cb0 <__smakebuf_r>:
 8008cb0:	898b      	ldrh	r3, [r1, #12]
 8008cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cb4:	079d      	lsls	r5, r3, #30
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	460c      	mov	r4, r1
 8008cba:	d507      	bpl.n	8008ccc <__smakebuf_r+0x1c>
 8008cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	6163      	str	r3, [r4, #20]
 8008cc8:	b002      	add	sp, #8
 8008cca:	bd70      	pop	{r4, r5, r6, pc}
 8008ccc:	ab01      	add	r3, sp, #4
 8008cce:	466a      	mov	r2, sp
 8008cd0:	f7ff ffc9 	bl	8008c66 <__swhatbuf_r>
 8008cd4:	9900      	ldr	r1, [sp, #0]
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7ff fb87 	bl	80083ec <_malloc_r>
 8008cde:	b948      	cbnz	r0, 8008cf4 <__smakebuf_r+0x44>
 8008ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce4:	059a      	lsls	r2, r3, #22
 8008ce6:	d4ef      	bmi.n	8008cc8 <__smakebuf_r+0x18>
 8008ce8:	f023 0303 	bic.w	r3, r3, #3
 8008cec:	f043 0302 	orr.w	r3, r3, #2
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	e7e3      	b.n	8008cbc <__smakebuf_r+0xc>
 8008cf4:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <__smakebuf_r+0x7c>)
 8008cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	6020      	str	r0, [r4, #0]
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	9b00      	ldr	r3, [sp, #0]
 8008d04:	6163      	str	r3, [r4, #20]
 8008d06:	9b01      	ldr	r3, [sp, #4]
 8008d08:	6120      	str	r0, [r4, #16]
 8008d0a:	b15b      	cbz	r3, 8008d24 <__smakebuf_r+0x74>
 8008d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 fb87 	bl	8009424 <_isatty_r>
 8008d16:	b128      	cbz	r0, 8008d24 <__smakebuf_r+0x74>
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f023 0303 	bic.w	r3, r3, #3
 8008d1e:	f043 0301 	orr.w	r3, r3, #1
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	89a0      	ldrh	r0, [r4, #12]
 8008d26:	4305      	orrs	r5, r0
 8008d28:	81a5      	strh	r5, [r4, #12]
 8008d2a:	e7cd      	b.n	8008cc8 <__smakebuf_r+0x18>
 8008d2c:	08008a75 	.word	0x08008a75

08008d30 <__malloc_lock>:
 8008d30:	4801      	ldr	r0, [pc, #4]	; (8008d38 <__malloc_lock+0x8>)
 8008d32:	f7ff bf96 	b.w	8008c62 <__retarget_lock_acquire_recursive>
 8008d36:	bf00      	nop
 8008d38:	20004f5c 	.word	0x20004f5c

08008d3c <__malloc_unlock>:
 8008d3c:	4801      	ldr	r0, [pc, #4]	; (8008d44 <__malloc_unlock+0x8>)
 8008d3e:	f7ff bf91 	b.w	8008c64 <__retarget_lock_release_recursive>
 8008d42:	bf00      	nop
 8008d44:	20004f5c 	.word	0x20004f5c

08008d48 <__sfputc_r>:
 8008d48:	6893      	ldr	r3, [r2, #8]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	b410      	push	{r4}
 8008d50:	6093      	str	r3, [r2, #8]
 8008d52:	da08      	bge.n	8008d66 <__sfputc_r+0x1e>
 8008d54:	6994      	ldr	r4, [r2, #24]
 8008d56:	42a3      	cmp	r3, r4
 8008d58:	db01      	blt.n	8008d5e <__sfputc_r+0x16>
 8008d5a:	290a      	cmp	r1, #10
 8008d5c:	d103      	bne.n	8008d66 <__sfputc_r+0x1e>
 8008d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d62:	f7ff bcc3 	b.w	80086ec <__swbuf_r>
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	1c58      	adds	r0, r3, #1
 8008d6a:	6010      	str	r0, [r2, #0]
 8008d6c:	7019      	strb	r1, [r3, #0]
 8008d6e:	4608      	mov	r0, r1
 8008d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <__sfputs_r>:
 8008d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d78:	4606      	mov	r6, r0
 8008d7a:	460f      	mov	r7, r1
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	18d5      	adds	r5, r2, r3
 8008d80:	42ac      	cmp	r4, r5
 8008d82:	d101      	bne.n	8008d88 <__sfputs_r+0x12>
 8008d84:	2000      	movs	r0, #0
 8008d86:	e007      	b.n	8008d98 <__sfputs_r+0x22>
 8008d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8c:	463a      	mov	r2, r7
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7ff ffda 	bl	8008d48 <__sfputc_r>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d1f3      	bne.n	8008d80 <__sfputs_r+0xa>
 8008d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d9c <_vfiprintf_r>:
 8008d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da0:	460d      	mov	r5, r1
 8008da2:	b09d      	sub	sp, #116	; 0x74
 8008da4:	4614      	mov	r4, r2
 8008da6:	4698      	mov	r8, r3
 8008da8:	4606      	mov	r6, r0
 8008daa:	b118      	cbz	r0, 8008db4 <_vfiprintf_r+0x18>
 8008dac:	6983      	ldr	r3, [r0, #24]
 8008dae:	b90b      	cbnz	r3, 8008db4 <_vfiprintf_r+0x18>
 8008db0:	f7ff fe94 	bl	8008adc <__sinit>
 8008db4:	4b89      	ldr	r3, [pc, #548]	; (8008fdc <_vfiprintf_r+0x240>)
 8008db6:	429d      	cmp	r5, r3
 8008db8:	d11b      	bne.n	8008df2 <_vfiprintf_r+0x56>
 8008dba:	6875      	ldr	r5, [r6, #4]
 8008dbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dbe:	07d9      	lsls	r1, r3, #31
 8008dc0:	d405      	bmi.n	8008dce <_vfiprintf_r+0x32>
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	059a      	lsls	r2, r3, #22
 8008dc6:	d402      	bmi.n	8008dce <_vfiprintf_r+0x32>
 8008dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dca:	f7ff ff4a 	bl	8008c62 <__retarget_lock_acquire_recursive>
 8008dce:	89ab      	ldrh	r3, [r5, #12]
 8008dd0:	071b      	lsls	r3, r3, #28
 8008dd2:	d501      	bpl.n	8008dd8 <_vfiprintf_r+0x3c>
 8008dd4:	692b      	ldr	r3, [r5, #16]
 8008dd6:	b9eb      	cbnz	r3, 8008e14 <_vfiprintf_r+0x78>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7ff fcd8 	bl	8008790 <__swsetup_r>
 8008de0:	b1c0      	cbz	r0, 8008e14 <_vfiprintf_r+0x78>
 8008de2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008de4:	07dc      	lsls	r4, r3, #31
 8008de6:	d50e      	bpl.n	8008e06 <_vfiprintf_r+0x6a>
 8008de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dec:	b01d      	add	sp, #116	; 0x74
 8008dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df2:	4b7b      	ldr	r3, [pc, #492]	; (8008fe0 <_vfiprintf_r+0x244>)
 8008df4:	429d      	cmp	r5, r3
 8008df6:	d101      	bne.n	8008dfc <_vfiprintf_r+0x60>
 8008df8:	68b5      	ldr	r5, [r6, #8]
 8008dfa:	e7df      	b.n	8008dbc <_vfiprintf_r+0x20>
 8008dfc:	4b79      	ldr	r3, [pc, #484]	; (8008fe4 <_vfiprintf_r+0x248>)
 8008dfe:	429d      	cmp	r5, r3
 8008e00:	bf08      	it	eq
 8008e02:	68f5      	ldreq	r5, [r6, #12]
 8008e04:	e7da      	b.n	8008dbc <_vfiprintf_r+0x20>
 8008e06:	89ab      	ldrh	r3, [r5, #12]
 8008e08:	0598      	lsls	r0, r3, #22
 8008e0a:	d4ed      	bmi.n	8008de8 <_vfiprintf_r+0x4c>
 8008e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e0e:	f7ff ff29 	bl	8008c64 <__retarget_lock_release_recursive>
 8008e12:	e7e9      	b.n	8008de8 <_vfiprintf_r+0x4c>
 8008e14:	2300      	movs	r3, #0
 8008e16:	9309      	str	r3, [sp, #36]	; 0x24
 8008e18:	2320      	movs	r3, #32
 8008e1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e22:	2330      	movs	r3, #48	; 0x30
 8008e24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fe8 <_vfiprintf_r+0x24c>
 8008e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e2c:	f04f 0901 	mov.w	r9, #1
 8008e30:	4623      	mov	r3, r4
 8008e32:	469a      	mov	sl, r3
 8008e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e38:	b10a      	cbz	r2, 8008e3e <_vfiprintf_r+0xa2>
 8008e3a:	2a25      	cmp	r2, #37	; 0x25
 8008e3c:	d1f9      	bne.n	8008e32 <_vfiprintf_r+0x96>
 8008e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e42:	d00b      	beq.n	8008e5c <_vfiprintf_r+0xc0>
 8008e44:	465b      	mov	r3, fp
 8008e46:	4622      	mov	r2, r4
 8008e48:	4629      	mov	r1, r5
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f7ff ff93 	bl	8008d76 <__sfputs_r>
 8008e50:	3001      	adds	r0, #1
 8008e52:	f000 80aa 	beq.w	8008faa <_vfiprintf_r+0x20e>
 8008e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e58:	445a      	add	r2, fp
 8008e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 80a2 	beq.w	8008faa <_vfiprintf_r+0x20e>
 8008e66:	2300      	movs	r3, #0
 8008e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e70:	f10a 0a01 	add.w	sl, sl, #1
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	9307      	str	r3, [sp, #28]
 8008e78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e7c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e7e:	4654      	mov	r4, sl
 8008e80:	2205      	movs	r2, #5
 8008e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e86:	4858      	ldr	r0, [pc, #352]	; (8008fe8 <_vfiprintf_r+0x24c>)
 8008e88:	f7f7 f9c2 	bl	8000210 <memchr>
 8008e8c:	9a04      	ldr	r2, [sp, #16]
 8008e8e:	b9d8      	cbnz	r0, 8008ec8 <_vfiprintf_r+0x12c>
 8008e90:	06d1      	lsls	r1, r2, #27
 8008e92:	bf44      	itt	mi
 8008e94:	2320      	movmi	r3, #32
 8008e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e9a:	0713      	lsls	r3, r2, #28
 8008e9c:	bf44      	itt	mi
 8008e9e:	232b      	movmi	r3, #43	; 0x2b
 8008ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eaa:	d015      	beq.n	8008ed8 <_vfiprintf_r+0x13c>
 8008eac:	9a07      	ldr	r2, [sp, #28]
 8008eae:	4654      	mov	r4, sl
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f04f 0c0a 	mov.w	ip, #10
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ebc:	3b30      	subs	r3, #48	; 0x30
 8008ebe:	2b09      	cmp	r3, #9
 8008ec0:	d94e      	bls.n	8008f60 <_vfiprintf_r+0x1c4>
 8008ec2:	b1b0      	cbz	r0, 8008ef2 <_vfiprintf_r+0x156>
 8008ec4:	9207      	str	r2, [sp, #28]
 8008ec6:	e014      	b.n	8008ef2 <_vfiprintf_r+0x156>
 8008ec8:	eba0 0308 	sub.w	r3, r0, r8
 8008ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	46a2      	mov	sl, r4
 8008ed6:	e7d2      	b.n	8008e7e <_vfiprintf_r+0xe2>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	1d19      	adds	r1, r3, #4
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	9103      	str	r1, [sp, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	bfbb      	ittet	lt
 8008ee4:	425b      	neglt	r3, r3
 8008ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eea:	9307      	strge	r3, [sp, #28]
 8008eec:	9307      	strlt	r3, [sp, #28]
 8008eee:	bfb8      	it	lt
 8008ef0:	9204      	strlt	r2, [sp, #16]
 8008ef2:	7823      	ldrb	r3, [r4, #0]
 8008ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ef6:	d10c      	bne.n	8008f12 <_vfiprintf_r+0x176>
 8008ef8:	7863      	ldrb	r3, [r4, #1]
 8008efa:	2b2a      	cmp	r3, #42	; 0x2a
 8008efc:	d135      	bne.n	8008f6a <_vfiprintf_r+0x1ce>
 8008efe:	9b03      	ldr	r3, [sp, #12]
 8008f00:	1d1a      	adds	r2, r3, #4
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	9203      	str	r2, [sp, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	bfb8      	it	lt
 8008f0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f0e:	3402      	adds	r4, #2
 8008f10:	9305      	str	r3, [sp, #20]
 8008f12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ff8 <_vfiprintf_r+0x25c>
 8008f16:	7821      	ldrb	r1, [r4, #0]
 8008f18:	2203      	movs	r2, #3
 8008f1a:	4650      	mov	r0, sl
 8008f1c:	f7f7 f978 	bl	8000210 <memchr>
 8008f20:	b140      	cbz	r0, 8008f34 <_vfiprintf_r+0x198>
 8008f22:	2340      	movs	r3, #64	; 0x40
 8008f24:	eba0 000a 	sub.w	r0, r0, sl
 8008f28:	fa03 f000 	lsl.w	r0, r3, r0
 8008f2c:	9b04      	ldr	r3, [sp, #16]
 8008f2e:	4303      	orrs	r3, r0
 8008f30:	3401      	adds	r4, #1
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f38:	482c      	ldr	r0, [pc, #176]	; (8008fec <_vfiprintf_r+0x250>)
 8008f3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f3e:	2206      	movs	r2, #6
 8008f40:	f7f7 f966 	bl	8000210 <memchr>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d03f      	beq.n	8008fc8 <_vfiprintf_r+0x22c>
 8008f48:	4b29      	ldr	r3, [pc, #164]	; (8008ff0 <_vfiprintf_r+0x254>)
 8008f4a:	bb1b      	cbnz	r3, 8008f94 <_vfiprintf_r+0x1f8>
 8008f4c:	9b03      	ldr	r3, [sp, #12]
 8008f4e:	3307      	adds	r3, #7
 8008f50:	f023 0307 	bic.w	r3, r3, #7
 8008f54:	3308      	adds	r3, #8
 8008f56:	9303      	str	r3, [sp, #12]
 8008f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5a:	443b      	add	r3, r7
 8008f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5e:	e767      	b.n	8008e30 <_vfiprintf_r+0x94>
 8008f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f64:	460c      	mov	r4, r1
 8008f66:	2001      	movs	r0, #1
 8008f68:	e7a5      	b.n	8008eb6 <_vfiprintf_r+0x11a>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	3401      	adds	r4, #1
 8008f6e:	9305      	str	r3, [sp, #20]
 8008f70:	4619      	mov	r1, r3
 8008f72:	f04f 0c0a 	mov.w	ip, #10
 8008f76:	4620      	mov	r0, r4
 8008f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f7c:	3a30      	subs	r2, #48	; 0x30
 8008f7e:	2a09      	cmp	r2, #9
 8008f80:	d903      	bls.n	8008f8a <_vfiprintf_r+0x1ee>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0c5      	beq.n	8008f12 <_vfiprintf_r+0x176>
 8008f86:	9105      	str	r1, [sp, #20]
 8008f88:	e7c3      	b.n	8008f12 <_vfiprintf_r+0x176>
 8008f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f8e:	4604      	mov	r4, r0
 8008f90:	2301      	movs	r3, #1
 8008f92:	e7f0      	b.n	8008f76 <_vfiprintf_r+0x1da>
 8008f94:	ab03      	add	r3, sp, #12
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	462a      	mov	r2, r5
 8008f9a:	4b16      	ldr	r3, [pc, #88]	; (8008ff4 <_vfiprintf_r+0x258>)
 8008f9c:	a904      	add	r1, sp, #16
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f3af 8000 	nop.w
 8008fa4:	4607      	mov	r7, r0
 8008fa6:	1c78      	adds	r0, r7, #1
 8008fa8:	d1d6      	bne.n	8008f58 <_vfiprintf_r+0x1bc>
 8008faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fac:	07d9      	lsls	r1, r3, #31
 8008fae:	d405      	bmi.n	8008fbc <_vfiprintf_r+0x220>
 8008fb0:	89ab      	ldrh	r3, [r5, #12]
 8008fb2:	059a      	lsls	r2, r3, #22
 8008fb4:	d402      	bmi.n	8008fbc <_vfiprintf_r+0x220>
 8008fb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fb8:	f7ff fe54 	bl	8008c64 <__retarget_lock_release_recursive>
 8008fbc:	89ab      	ldrh	r3, [r5, #12]
 8008fbe:	065b      	lsls	r3, r3, #25
 8008fc0:	f53f af12 	bmi.w	8008de8 <_vfiprintf_r+0x4c>
 8008fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fc6:	e711      	b.n	8008dec <_vfiprintf_r+0x50>
 8008fc8:	ab03      	add	r3, sp, #12
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	462a      	mov	r2, r5
 8008fce:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <_vfiprintf_r+0x258>)
 8008fd0:	a904      	add	r1, sp, #16
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f000 f880 	bl	80090d8 <_printf_i>
 8008fd8:	e7e4      	b.n	8008fa4 <_vfiprintf_r+0x208>
 8008fda:	bf00      	nop
 8008fdc:	0800973c 	.word	0x0800973c
 8008fe0:	0800975c 	.word	0x0800975c
 8008fe4:	0800971c 	.word	0x0800971c
 8008fe8:	0800977c 	.word	0x0800977c
 8008fec:	08009786 	.word	0x08009786
 8008ff0:	00000000 	.word	0x00000000
 8008ff4:	08008d77 	.word	0x08008d77
 8008ff8:	08009782 	.word	0x08009782

08008ffc <_printf_common>:
 8008ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009000:	4616      	mov	r6, r2
 8009002:	4699      	mov	r9, r3
 8009004:	688a      	ldr	r2, [r1, #8]
 8009006:	690b      	ldr	r3, [r1, #16]
 8009008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800900c:	4293      	cmp	r3, r2
 800900e:	bfb8      	it	lt
 8009010:	4613      	movlt	r3, r2
 8009012:	6033      	str	r3, [r6, #0]
 8009014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009018:	4607      	mov	r7, r0
 800901a:	460c      	mov	r4, r1
 800901c:	b10a      	cbz	r2, 8009022 <_printf_common+0x26>
 800901e:	3301      	adds	r3, #1
 8009020:	6033      	str	r3, [r6, #0]
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	0699      	lsls	r1, r3, #26
 8009026:	bf42      	ittt	mi
 8009028:	6833      	ldrmi	r3, [r6, #0]
 800902a:	3302      	addmi	r3, #2
 800902c:	6033      	strmi	r3, [r6, #0]
 800902e:	6825      	ldr	r5, [r4, #0]
 8009030:	f015 0506 	ands.w	r5, r5, #6
 8009034:	d106      	bne.n	8009044 <_printf_common+0x48>
 8009036:	f104 0a19 	add.w	sl, r4, #25
 800903a:	68e3      	ldr	r3, [r4, #12]
 800903c:	6832      	ldr	r2, [r6, #0]
 800903e:	1a9b      	subs	r3, r3, r2
 8009040:	42ab      	cmp	r3, r5
 8009042:	dc26      	bgt.n	8009092 <_printf_common+0x96>
 8009044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009048:	1e13      	subs	r3, r2, #0
 800904a:	6822      	ldr	r2, [r4, #0]
 800904c:	bf18      	it	ne
 800904e:	2301      	movne	r3, #1
 8009050:	0692      	lsls	r2, r2, #26
 8009052:	d42b      	bmi.n	80090ac <_printf_common+0xb0>
 8009054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009058:	4649      	mov	r1, r9
 800905a:	4638      	mov	r0, r7
 800905c:	47c0      	blx	r8
 800905e:	3001      	adds	r0, #1
 8009060:	d01e      	beq.n	80090a0 <_printf_common+0xa4>
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	68e5      	ldr	r5, [r4, #12]
 8009066:	6832      	ldr	r2, [r6, #0]
 8009068:	f003 0306 	and.w	r3, r3, #6
 800906c:	2b04      	cmp	r3, #4
 800906e:	bf08      	it	eq
 8009070:	1aad      	subeq	r5, r5, r2
 8009072:	68a3      	ldr	r3, [r4, #8]
 8009074:	6922      	ldr	r2, [r4, #16]
 8009076:	bf0c      	ite	eq
 8009078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800907c:	2500      	movne	r5, #0
 800907e:	4293      	cmp	r3, r2
 8009080:	bfc4      	itt	gt
 8009082:	1a9b      	subgt	r3, r3, r2
 8009084:	18ed      	addgt	r5, r5, r3
 8009086:	2600      	movs	r6, #0
 8009088:	341a      	adds	r4, #26
 800908a:	42b5      	cmp	r5, r6
 800908c:	d11a      	bne.n	80090c4 <_printf_common+0xc8>
 800908e:	2000      	movs	r0, #0
 8009090:	e008      	b.n	80090a4 <_printf_common+0xa8>
 8009092:	2301      	movs	r3, #1
 8009094:	4652      	mov	r2, sl
 8009096:	4649      	mov	r1, r9
 8009098:	4638      	mov	r0, r7
 800909a:	47c0      	blx	r8
 800909c:	3001      	adds	r0, #1
 800909e:	d103      	bne.n	80090a8 <_printf_common+0xac>
 80090a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a8:	3501      	adds	r5, #1
 80090aa:	e7c6      	b.n	800903a <_printf_common+0x3e>
 80090ac:	18e1      	adds	r1, r4, r3
 80090ae:	1c5a      	adds	r2, r3, #1
 80090b0:	2030      	movs	r0, #48	; 0x30
 80090b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090b6:	4422      	add	r2, r4
 80090b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090c0:	3302      	adds	r3, #2
 80090c2:	e7c7      	b.n	8009054 <_printf_common+0x58>
 80090c4:	2301      	movs	r3, #1
 80090c6:	4622      	mov	r2, r4
 80090c8:	4649      	mov	r1, r9
 80090ca:	4638      	mov	r0, r7
 80090cc:	47c0      	blx	r8
 80090ce:	3001      	adds	r0, #1
 80090d0:	d0e6      	beq.n	80090a0 <_printf_common+0xa4>
 80090d2:	3601      	adds	r6, #1
 80090d4:	e7d9      	b.n	800908a <_printf_common+0x8e>
	...

080090d8 <_printf_i>:
 80090d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090dc:	460c      	mov	r4, r1
 80090de:	4691      	mov	r9, r2
 80090e0:	7e27      	ldrb	r7, [r4, #24]
 80090e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090e4:	2f78      	cmp	r7, #120	; 0x78
 80090e6:	4680      	mov	r8, r0
 80090e8:	469a      	mov	sl, r3
 80090ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090ee:	d807      	bhi.n	8009100 <_printf_i+0x28>
 80090f0:	2f62      	cmp	r7, #98	; 0x62
 80090f2:	d80a      	bhi.n	800910a <_printf_i+0x32>
 80090f4:	2f00      	cmp	r7, #0
 80090f6:	f000 80d8 	beq.w	80092aa <_printf_i+0x1d2>
 80090fa:	2f58      	cmp	r7, #88	; 0x58
 80090fc:	f000 80a3 	beq.w	8009246 <_printf_i+0x16e>
 8009100:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009108:	e03a      	b.n	8009180 <_printf_i+0xa8>
 800910a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800910e:	2b15      	cmp	r3, #21
 8009110:	d8f6      	bhi.n	8009100 <_printf_i+0x28>
 8009112:	a001      	add	r0, pc, #4	; (adr r0, 8009118 <_printf_i+0x40>)
 8009114:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009118:	08009171 	.word	0x08009171
 800911c:	08009185 	.word	0x08009185
 8009120:	08009101 	.word	0x08009101
 8009124:	08009101 	.word	0x08009101
 8009128:	08009101 	.word	0x08009101
 800912c:	08009101 	.word	0x08009101
 8009130:	08009185 	.word	0x08009185
 8009134:	08009101 	.word	0x08009101
 8009138:	08009101 	.word	0x08009101
 800913c:	08009101 	.word	0x08009101
 8009140:	08009101 	.word	0x08009101
 8009144:	08009291 	.word	0x08009291
 8009148:	080091b5 	.word	0x080091b5
 800914c:	08009273 	.word	0x08009273
 8009150:	08009101 	.word	0x08009101
 8009154:	08009101 	.word	0x08009101
 8009158:	080092b3 	.word	0x080092b3
 800915c:	08009101 	.word	0x08009101
 8009160:	080091b5 	.word	0x080091b5
 8009164:	08009101 	.word	0x08009101
 8009168:	08009101 	.word	0x08009101
 800916c:	0800927b 	.word	0x0800927b
 8009170:	680b      	ldr	r3, [r1, #0]
 8009172:	1d1a      	adds	r2, r3, #4
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	600a      	str	r2, [r1, #0]
 8009178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800917c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009180:	2301      	movs	r3, #1
 8009182:	e0a3      	b.n	80092cc <_printf_i+0x1f4>
 8009184:	6825      	ldr	r5, [r4, #0]
 8009186:	6808      	ldr	r0, [r1, #0]
 8009188:	062e      	lsls	r6, r5, #24
 800918a:	f100 0304 	add.w	r3, r0, #4
 800918e:	d50a      	bpl.n	80091a6 <_printf_i+0xce>
 8009190:	6805      	ldr	r5, [r0, #0]
 8009192:	600b      	str	r3, [r1, #0]
 8009194:	2d00      	cmp	r5, #0
 8009196:	da03      	bge.n	80091a0 <_printf_i+0xc8>
 8009198:	232d      	movs	r3, #45	; 0x2d
 800919a:	426d      	negs	r5, r5
 800919c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091a0:	485e      	ldr	r0, [pc, #376]	; (800931c <_printf_i+0x244>)
 80091a2:	230a      	movs	r3, #10
 80091a4:	e019      	b.n	80091da <_printf_i+0x102>
 80091a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80091aa:	6805      	ldr	r5, [r0, #0]
 80091ac:	600b      	str	r3, [r1, #0]
 80091ae:	bf18      	it	ne
 80091b0:	b22d      	sxthne	r5, r5
 80091b2:	e7ef      	b.n	8009194 <_printf_i+0xbc>
 80091b4:	680b      	ldr	r3, [r1, #0]
 80091b6:	6825      	ldr	r5, [r4, #0]
 80091b8:	1d18      	adds	r0, r3, #4
 80091ba:	6008      	str	r0, [r1, #0]
 80091bc:	0628      	lsls	r0, r5, #24
 80091be:	d501      	bpl.n	80091c4 <_printf_i+0xec>
 80091c0:	681d      	ldr	r5, [r3, #0]
 80091c2:	e002      	b.n	80091ca <_printf_i+0xf2>
 80091c4:	0669      	lsls	r1, r5, #25
 80091c6:	d5fb      	bpl.n	80091c0 <_printf_i+0xe8>
 80091c8:	881d      	ldrh	r5, [r3, #0]
 80091ca:	4854      	ldr	r0, [pc, #336]	; (800931c <_printf_i+0x244>)
 80091cc:	2f6f      	cmp	r7, #111	; 0x6f
 80091ce:	bf0c      	ite	eq
 80091d0:	2308      	moveq	r3, #8
 80091d2:	230a      	movne	r3, #10
 80091d4:	2100      	movs	r1, #0
 80091d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091da:	6866      	ldr	r6, [r4, #4]
 80091dc:	60a6      	str	r6, [r4, #8]
 80091de:	2e00      	cmp	r6, #0
 80091e0:	bfa2      	ittt	ge
 80091e2:	6821      	ldrge	r1, [r4, #0]
 80091e4:	f021 0104 	bicge.w	r1, r1, #4
 80091e8:	6021      	strge	r1, [r4, #0]
 80091ea:	b90d      	cbnz	r5, 80091f0 <_printf_i+0x118>
 80091ec:	2e00      	cmp	r6, #0
 80091ee:	d04d      	beq.n	800928c <_printf_i+0x1b4>
 80091f0:	4616      	mov	r6, r2
 80091f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80091f6:	fb03 5711 	mls	r7, r3, r1, r5
 80091fa:	5dc7      	ldrb	r7, [r0, r7]
 80091fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009200:	462f      	mov	r7, r5
 8009202:	42bb      	cmp	r3, r7
 8009204:	460d      	mov	r5, r1
 8009206:	d9f4      	bls.n	80091f2 <_printf_i+0x11a>
 8009208:	2b08      	cmp	r3, #8
 800920a:	d10b      	bne.n	8009224 <_printf_i+0x14c>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	07df      	lsls	r7, r3, #31
 8009210:	d508      	bpl.n	8009224 <_printf_i+0x14c>
 8009212:	6923      	ldr	r3, [r4, #16]
 8009214:	6861      	ldr	r1, [r4, #4]
 8009216:	4299      	cmp	r1, r3
 8009218:	bfde      	ittt	le
 800921a:	2330      	movle	r3, #48	; 0x30
 800921c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009220:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009224:	1b92      	subs	r2, r2, r6
 8009226:	6122      	str	r2, [r4, #16]
 8009228:	f8cd a000 	str.w	sl, [sp]
 800922c:	464b      	mov	r3, r9
 800922e:	aa03      	add	r2, sp, #12
 8009230:	4621      	mov	r1, r4
 8009232:	4640      	mov	r0, r8
 8009234:	f7ff fee2 	bl	8008ffc <_printf_common>
 8009238:	3001      	adds	r0, #1
 800923a:	d14c      	bne.n	80092d6 <_printf_i+0x1fe>
 800923c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009240:	b004      	add	sp, #16
 8009242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009246:	4835      	ldr	r0, [pc, #212]	; (800931c <_printf_i+0x244>)
 8009248:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	680e      	ldr	r6, [r1, #0]
 8009250:	061f      	lsls	r7, r3, #24
 8009252:	f856 5b04 	ldr.w	r5, [r6], #4
 8009256:	600e      	str	r6, [r1, #0]
 8009258:	d514      	bpl.n	8009284 <_printf_i+0x1ac>
 800925a:	07d9      	lsls	r1, r3, #31
 800925c:	bf44      	itt	mi
 800925e:	f043 0320 	orrmi.w	r3, r3, #32
 8009262:	6023      	strmi	r3, [r4, #0]
 8009264:	b91d      	cbnz	r5, 800926e <_printf_i+0x196>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	f023 0320 	bic.w	r3, r3, #32
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	2310      	movs	r3, #16
 8009270:	e7b0      	b.n	80091d4 <_printf_i+0xfc>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	f043 0320 	orr.w	r3, r3, #32
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	2378      	movs	r3, #120	; 0x78
 800927c:	4828      	ldr	r0, [pc, #160]	; (8009320 <_printf_i+0x248>)
 800927e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009282:	e7e3      	b.n	800924c <_printf_i+0x174>
 8009284:	065e      	lsls	r6, r3, #25
 8009286:	bf48      	it	mi
 8009288:	b2ad      	uxthmi	r5, r5
 800928a:	e7e6      	b.n	800925a <_printf_i+0x182>
 800928c:	4616      	mov	r6, r2
 800928e:	e7bb      	b.n	8009208 <_printf_i+0x130>
 8009290:	680b      	ldr	r3, [r1, #0]
 8009292:	6826      	ldr	r6, [r4, #0]
 8009294:	6960      	ldr	r0, [r4, #20]
 8009296:	1d1d      	adds	r5, r3, #4
 8009298:	600d      	str	r5, [r1, #0]
 800929a:	0635      	lsls	r5, r6, #24
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	d501      	bpl.n	80092a4 <_printf_i+0x1cc>
 80092a0:	6018      	str	r0, [r3, #0]
 80092a2:	e002      	b.n	80092aa <_printf_i+0x1d2>
 80092a4:	0671      	lsls	r1, r6, #25
 80092a6:	d5fb      	bpl.n	80092a0 <_printf_i+0x1c8>
 80092a8:	8018      	strh	r0, [r3, #0]
 80092aa:	2300      	movs	r3, #0
 80092ac:	6123      	str	r3, [r4, #16]
 80092ae:	4616      	mov	r6, r2
 80092b0:	e7ba      	b.n	8009228 <_printf_i+0x150>
 80092b2:	680b      	ldr	r3, [r1, #0]
 80092b4:	1d1a      	adds	r2, r3, #4
 80092b6:	600a      	str	r2, [r1, #0]
 80092b8:	681e      	ldr	r6, [r3, #0]
 80092ba:	6862      	ldr	r2, [r4, #4]
 80092bc:	2100      	movs	r1, #0
 80092be:	4630      	mov	r0, r6
 80092c0:	f7f6 ffa6 	bl	8000210 <memchr>
 80092c4:	b108      	cbz	r0, 80092ca <_printf_i+0x1f2>
 80092c6:	1b80      	subs	r0, r0, r6
 80092c8:	6060      	str	r0, [r4, #4]
 80092ca:	6863      	ldr	r3, [r4, #4]
 80092cc:	6123      	str	r3, [r4, #16]
 80092ce:	2300      	movs	r3, #0
 80092d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d4:	e7a8      	b.n	8009228 <_printf_i+0x150>
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	4632      	mov	r2, r6
 80092da:	4649      	mov	r1, r9
 80092dc:	4640      	mov	r0, r8
 80092de:	47d0      	blx	sl
 80092e0:	3001      	adds	r0, #1
 80092e2:	d0ab      	beq.n	800923c <_printf_i+0x164>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	079b      	lsls	r3, r3, #30
 80092e8:	d413      	bmi.n	8009312 <_printf_i+0x23a>
 80092ea:	68e0      	ldr	r0, [r4, #12]
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	4298      	cmp	r0, r3
 80092f0:	bfb8      	it	lt
 80092f2:	4618      	movlt	r0, r3
 80092f4:	e7a4      	b.n	8009240 <_printf_i+0x168>
 80092f6:	2301      	movs	r3, #1
 80092f8:	4632      	mov	r2, r6
 80092fa:	4649      	mov	r1, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	47d0      	blx	sl
 8009300:	3001      	adds	r0, #1
 8009302:	d09b      	beq.n	800923c <_printf_i+0x164>
 8009304:	3501      	adds	r5, #1
 8009306:	68e3      	ldr	r3, [r4, #12]
 8009308:	9903      	ldr	r1, [sp, #12]
 800930a:	1a5b      	subs	r3, r3, r1
 800930c:	42ab      	cmp	r3, r5
 800930e:	dcf2      	bgt.n	80092f6 <_printf_i+0x21e>
 8009310:	e7eb      	b.n	80092ea <_printf_i+0x212>
 8009312:	2500      	movs	r5, #0
 8009314:	f104 0619 	add.w	r6, r4, #25
 8009318:	e7f5      	b.n	8009306 <_printf_i+0x22e>
 800931a:	bf00      	nop
 800931c:	0800978d 	.word	0x0800978d
 8009320:	0800979e 	.word	0x0800979e

08009324 <__sread>:
 8009324:	b510      	push	{r4, lr}
 8009326:	460c      	mov	r4, r1
 8009328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800932c:	f000 f89c 	bl	8009468 <_read_r>
 8009330:	2800      	cmp	r0, #0
 8009332:	bfab      	itete	ge
 8009334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009336:	89a3      	ldrhlt	r3, [r4, #12]
 8009338:	181b      	addge	r3, r3, r0
 800933a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800933e:	bfac      	ite	ge
 8009340:	6563      	strge	r3, [r4, #84]	; 0x54
 8009342:	81a3      	strhlt	r3, [r4, #12]
 8009344:	bd10      	pop	{r4, pc}

08009346 <__swrite>:
 8009346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800934a:	461f      	mov	r7, r3
 800934c:	898b      	ldrh	r3, [r1, #12]
 800934e:	05db      	lsls	r3, r3, #23
 8009350:	4605      	mov	r5, r0
 8009352:	460c      	mov	r4, r1
 8009354:	4616      	mov	r6, r2
 8009356:	d505      	bpl.n	8009364 <__swrite+0x1e>
 8009358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935c:	2302      	movs	r3, #2
 800935e:	2200      	movs	r2, #0
 8009360:	f000 f870 	bl	8009444 <_lseek_r>
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800936a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800936e:	81a3      	strh	r3, [r4, #12]
 8009370:	4632      	mov	r2, r6
 8009372:	463b      	mov	r3, r7
 8009374:	4628      	mov	r0, r5
 8009376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800937a:	f000 b817 	b.w	80093ac <_write_r>

0800937e <__sseek>:
 800937e:	b510      	push	{r4, lr}
 8009380:	460c      	mov	r4, r1
 8009382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009386:	f000 f85d 	bl	8009444 <_lseek_r>
 800938a:	1c43      	adds	r3, r0, #1
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	bf15      	itete	ne
 8009390:	6560      	strne	r0, [r4, #84]	; 0x54
 8009392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800939a:	81a3      	strheq	r3, [r4, #12]
 800939c:	bf18      	it	ne
 800939e:	81a3      	strhne	r3, [r4, #12]
 80093a0:	bd10      	pop	{r4, pc}

080093a2 <__sclose>:
 80093a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a6:	f000 b81b 	b.w	80093e0 <_close_r>
	...

080093ac <_write_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4d07      	ldr	r5, [pc, #28]	; (80093cc <_write_r+0x20>)
 80093b0:	4604      	mov	r4, r0
 80093b2:	4608      	mov	r0, r1
 80093b4:	4611      	mov	r1, r2
 80093b6:	2200      	movs	r2, #0
 80093b8:	602a      	str	r2, [r5, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f7f7 fe77 	bl	80010ae <_write>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d102      	bne.n	80093ca <_write_r+0x1e>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b103      	cbz	r3, 80093ca <_write_r+0x1e>
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	20004f64 	.word	0x20004f64

080093d0 <abort>:
 80093d0:	b508      	push	{r3, lr}
 80093d2:	2006      	movs	r0, #6
 80093d4:	f000 f882 	bl	80094dc <raise>
 80093d8:	2001      	movs	r0, #1
 80093da:	f7f7 fe41 	bl	8001060 <_exit>
	...

080093e0 <_close_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d06      	ldr	r5, [pc, #24]	; (80093fc <_close_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	f7f7 fe7b 	bl	80010e6 <_close>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_close_r+0x1a>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_close_r+0x1a>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	20004f64 	.word	0x20004f64

08009400 <_fstat_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	; (8009420 <_fstat_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	f7f7 fe76 	bl	80010fe <_fstat>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_fstat_r+0x1c>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b103      	cbz	r3, 800941c <_fstat_r+0x1c>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	20004f64 	.word	0x20004f64

08009424 <_isatty_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d06      	ldr	r5, [pc, #24]	; (8009440 <_isatty_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7f7 fe75 	bl	800111e <_isatty>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_isatty_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_isatty_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	20004f64 	.word	0x20004f64

08009444 <_lseek_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d07      	ldr	r5, [pc, #28]	; (8009464 <_lseek_r+0x20>)
 8009448:	4604      	mov	r4, r0
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	2200      	movs	r2, #0
 8009450:	602a      	str	r2, [r5, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	f7f7 fe6e 	bl	8001134 <_lseek>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_lseek_r+0x1e>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_lseek_r+0x1e>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	20004f64 	.word	0x20004f64

08009468 <_read_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	; (8009488 <_read_r+0x20>)
 800946c:	4604      	mov	r4, r0
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	2200      	movs	r2, #0
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f7f7 fdfc 	bl	8001074 <_read>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_read_r+0x1e>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_read_r+0x1e>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	20004f64 	.word	0x20004f64

0800948c <_raise_r>:
 800948c:	291f      	cmp	r1, #31
 800948e:	b538      	push	{r3, r4, r5, lr}
 8009490:	4604      	mov	r4, r0
 8009492:	460d      	mov	r5, r1
 8009494:	d904      	bls.n	80094a0 <_raise_r+0x14>
 8009496:	2316      	movs	r3, #22
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80094a2:	b112      	cbz	r2, 80094aa <_raise_r+0x1e>
 80094a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094a8:	b94b      	cbnz	r3, 80094be <_raise_r+0x32>
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 f830 	bl	8009510 <_getpid_r>
 80094b0:	462a      	mov	r2, r5
 80094b2:	4601      	mov	r1, r0
 80094b4:	4620      	mov	r0, r4
 80094b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ba:	f000 b817 	b.w	80094ec <_kill_r>
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d00a      	beq.n	80094d8 <_raise_r+0x4c>
 80094c2:	1c59      	adds	r1, r3, #1
 80094c4:	d103      	bne.n	80094ce <_raise_r+0x42>
 80094c6:	2316      	movs	r3, #22
 80094c8:	6003      	str	r3, [r0, #0]
 80094ca:	2001      	movs	r0, #1
 80094cc:	e7e7      	b.n	800949e <_raise_r+0x12>
 80094ce:	2400      	movs	r4, #0
 80094d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094d4:	4628      	mov	r0, r5
 80094d6:	4798      	blx	r3
 80094d8:	2000      	movs	r0, #0
 80094da:	e7e0      	b.n	800949e <_raise_r+0x12>

080094dc <raise>:
 80094dc:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <raise+0xc>)
 80094de:	4601      	mov	r1, r0
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f7ff bfd3 	b.w	800948c <_raise_r>
 80094e6:	bf00      	nop
 80094e8:	2000001c 	.word	0x2000001c

080094ec <_kill_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d07      	ldr	r5, [pc, #28]	; (800950c <_kill_r+0x20>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	f7f7 fda1 	bl	8001040 <_kill>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d102      	bne.n	8009508 <_kill_r+0x1c>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	b103      	cbz	r3, 8009508 <_kill_r+0x1c>
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	bd38      	pop	{r3, r4, r5, pc}
 800950a:	bf00      	nop
 800950c:	20004f64 	.word	0x20004f64

08009510 <_getpid_r>:
 8009510:	f7f7 bd8e 	b.w	8001030 <_getpid>

08009514 <_gettimeofday>:
 8009514:	4b02      	ldr	r3, [pc, #8]	; (8009520 <_gettimeofday+0xc>)
 8009516:	2258      	movs	r2, #88	; 0x58
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800951e:	4770      	bx	lr
 8009520:	20004f64 	.word	0x20004f64

08009524 <_init>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	bf00      	nop
 8009528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800952a:	bc08      	pop	{r3}
 800952c:	469e      	mov	lr, r3
 800952e:	4770      	bx	lr

08009530 <_fini>:
 8009530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009532:	bf00      	nop
 8009534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009536:	bc08      	pop	{r3}
 8009538:	469e      	mov	lr, r3
 800953a:	4770      	bx	lr
