
RtConcepts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000938c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d0  080097d0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097d8  080097d8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d8  080097d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080097e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ee8  20000080  08009860  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f68  08009860  00024f68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002164c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f17  00000000  00000000  000416fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00045618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d8  00000000  00000000  00046e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056ee  00000000  00000000  00048540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8c3  00000000  00000000  0004dc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001067fc  00000000  00000000  000684f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016eced  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007194  00000000  00000000  0016ed40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00175ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00175ef8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009544 	.word	0x08009544

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08009544 	.word	0x08009544

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <__io_putchar>:

#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)

#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005b0:	1d39      	adds	r1, r7, #4
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	2201      	movs	r2, #1
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <__io_putchar+0x20>)
 80005ba:	f002 fe97 	bl	80032ec <HAL_UART_Transmit>
	return ch;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200049b4 	.word	0x200049b4

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fe44 	bl	800125e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8fb 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f9e7 	bl	80009ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005de:	f000 f987 	bl	80008f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e2:	f000 f9b5 	bl	8000950 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e6:	f003 fd89 	bl	80040fc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dispatcherQueue */
  dispatcherQueueHandle = osMessageQueueNew (16, sizeof(request_t), &dispatcherQueue_attributes);
 80005ea:	4a6d      	ldr	r2, [pc, #436]	; (80007a0 <main+0x1d4>)
 80005ec:	210c      	movs	r1, #12
 80005ee:	2010      	movs	r0, #16
 80005f0:	f004 f9de 	bl	80049b0 <osMessageQueueNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a6b      	ldr	r2, [pc, #428]	; (80007a4 <main+0x1d8>)
 80005f8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fa:	4a6b      	ldr	r2, [pc, #428]	; (80007a8 <main+0x1dc>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	486b      	ldr	r0, [pc, #428]	; (80007ac <main+0x1e0>)
 8000600:	f003 fde6 	bl	80041d0 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a6a      	ldr	r2, [pc, #424]	; (80007b0 <main+0x1e4>)
 8000608:	6013      	str	r3, [r2, #0]

  /* creation of dispatcher */
  dispatcherHandle = osThreadNew(dispatch, NULL, &dispatcher_attributes);
 800060a:	4a6a      	ldr	r2, [pc, #424]	; (80007b4 <main+0x1e8>)
 800060c:	2100      	movs	r1, #0
 800060e:	486a      	ldr	r0, [pc, #424]	; (80007b8 <main+0x1ec>)
 8000610:	f003 fdde 	bl	80041d0 <osThreadNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a69      	ldr	r2, [pc, #420]	; (80007bc <main+0x1f0>)
 8000618:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  srand(time(NULL));
 800061a:	2000      	movs	r0, #0
 800061c:	f008 f85c 	bl	80086d8 <time>
 8000620:	4602      	mov	r2, r0
 8000622:	460b      	mov	r3, r1
 8000624:	4613      	mov	r3, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f007 ffd8 	bl	80085dc <srand>
  	for (int i = 0; i < TOTAL_SERVICES; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
 8000630:	e0ae      	b.n	8000790 <main+0x1c4>
  		osMessageQueueAttr_t* serviceQueueAttr = malloc(sizeof(osMessageQueueAttr_t));
 8000632:	2018      	movs	r0, #24
 8000634:	f007 fe74 	bl	8008320 <malloc>
 8000638:	4603      	mov	r3, r0
 800063a:	623b      	str	r3, [r7, #32]
  		memset(serviceQueueAttr, 0, sizeof(*serviceQueueAttr));
 800063c:	2218      	movs	r2, #24
 800063e:	2100      	movs	r1, #0
 8000640:	6a38      	ldr	r0, [r7, #32]
 8000642:	f007 fe8b 	bl	800835c <memset>
  		serviceQueueAttr -> name = names[i];
 8000646:	4a5e      	ldr	r2, [pc, #376]	; (80007c0 <main+0x1f4>)
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800064e:	6a3b      	ldr	r3, [r7, #32]
 8000650:	601a      	str	r2, [r3, #0]
  		osMessageQueueId_t* serviceQueue = osMessageQueueNew(16, sizeof(request_t), serviceQueueAttr);
 8000652:	6a3a      	ldr	r2, [r7, #32]
 8000654:	210c      	movs	r1, #12
 8000656:	2010      	movs	r0, #16
 8000658:	f004 f9aa 	bl	80049b0 <osMessageQueueNew>
 800065c:	61f8      	str	r0, [r7, #28]
  		free(serviceQueueAttr);
 800065e:	6a38      	ldr	r0, [r7, #32]
 8000660:	f007 fe66 	bl	8008330 <free>

  		osMutexAttr_t* serviceLockAttributes = malloc(sizeof(osMutexAttr_t));
 8000664:	2010      	movs	r0, #16
 8000666:	f007 fe5b 	bl	8008320 <malloc>
 800066a:	4603      	mov	r3, r0
 800066c:	61bb      	str	r3, [r7, #24]
  		memset(serviceLockAttributes, 0, sizeof(*serviceLockAttributes));
 800066e:	2210      	movs	r2, #16
 8000670:	2100      	movs	r1, #0
 8000672:	69b8      	ldr	r0, [r7, #24]
 8000674:	f007 fe72 	bl	800835c <memset>
  		serviceLockAttributes -> name = names[i];
 8000678:	4a51      	ldr	r2, [pc, #324]	; (80007c0 <main+0x1f4>)
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	601a      	str	r2, [r3, #0]
  		osMutexId_t serviceLock = osMutexNew(serviceLockAttributes);
 8000684:	69b8      	ldr	r0, [r7, #24]
 8000686:	f003 fef1 	bl	800446c <osMutexNew>
 800068a:	6178      	str	r0, [r7, #20]
  		free(serviceLockAttributes);
 800068c:	69b8      	ldr	r0, [r7, #24]
 800068e:	f007 fe4f 	bl	8008330 <free>

  		osSemaphoreAttr_t* semaphoreAttr = malloc(sizeof(osSemaphoreAttr_t));
 8000692:	2010      	movs	r0, #16
 8000694:	f007 fe44 	bl	8008320 <malloc>
 8000698:	4603      	mov	r3, r0
 800069a:	613b      	str	r3, [r7, #16]
  		memset(semaphoreAttr, 0, sizeof(*semaphoreAttr));
 800069c:	2210      	movs	r2, #16
 800069e:	2100      	movs	r1, #0
 80006a0:	6938      	ldr	r0, [r7, #16]
 80006a2:	f007 fe5b 	bl	800835c <memset>
  		semaphoreAttr -> name = names[i];
 80006a6:	4a46      	ldr	r2, [pc, #280]	; (80007c0 <main+0x1f4>)
 80006a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	601a      	str	r2, [r3, #0]
  		osSemaphoreId_t semaphore = osSemaphoreNew(teams[i], teams[i], semaphoreAttr);
 80006b2:	4a44      	ldr	r2, [pc, #272]	; (80007c4 <main+0x1f8>)
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ba:	4618      	mov	r0, r3
 80006bc:	4a41      	ldr	r2, [pc, #260]	; (80007c4 <main+0x1f8>)
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c4:	693a      	ldr	r2, [r7, #16]
 80006c6:	4619      	mov	r1, r3
 80006c8:	f004 f818 	bl	80046fc <osSemaphoreNew>
 80006cc:	60f8      	str	r0, [r7, #12]
  		free(semaphoreAttr);
 80006ce:	6938      	ldr	r0, [r7, #16]
 80006d0:	f007 fe2e 	bl	8008330 <free>

  		services[i].name = names[i];
 80006d4:	4a3a      	ldr	r2, [pc, #232]	; (80007c0 <main+0x1f4>)
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80006dc:	483a      	ldr	r0, [pc, #232]	; (80007c8 <main+0x1fc>)
 80006de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006e0:	4613      	mov	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4403      	add	r3, r0
 80006ea:	330c      	adds	r3, #12
 80006ec:	6019      	str	r1, [r3, #0]
  		services[i].queue = serviceQueue;
 80006ee:	4936      	ldr	r1, [pc, #216]	; (80007c8 <main+0x1fc>)
 80006f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f2:	4613      	mov	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	440b      	add	r3, r1
 80006fc:	69fa      	ldr	r2, [r7, #28]
 80006fe:	601a      	str	r2, [r3, #0]
  		services[i].mutex = serviceLock;
 8000700:	4931      	ldr	r1, [pc, #196]	; (80007c8 <main+0x1fc>)
 8000702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000704:	4613      	mov	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	440b      	add	r3, r1
 800070e:	3304      	adds	r3, #4
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	601a      	str	r2, [r3, #0]
  		services[i].semaphore = semaphore;
 8000714:	492c      	ldr	r1, [pc, #176]	; (80007c8 <main+0x1fc>)
 8000716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	440b      	add	r3, r1
 8000722:	3308      	adds	r3, #8
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	601a      	str	r2, [r3, #0]

  		osThreadAttr_t* serviceTaskAttrs = malloc(sizeof(osThreadAttr_t));
 8000728:	2024      	movs	r0, #36	; 0x24
 800072a:	f007 fdf9 	bl	8008320 <malloc>
 800072e:	4603      	mov	r3, r0
 8000730:	60bb      	str	r3, [r7, #8]
  		memset(serviceTaskAttrs, 0, sizeof(*serviceTaskAttrs));
 8000732:	2224      	movs	r2, #36	; 0x24
 8000734:	2100      	movs	r1, #0
 8000736:	68b8      	ldr	r0, [r7, #8]
 8000738:	f007 fe10 	bl	800835c <memset>
  		serviceTaskAttrs -> name = names[i];
 800073c:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <main+0x1f4>)
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	601a      	str	r2, [r3, #0]
  		serviceTaskAttrs -> stack_size = 128 * 4;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074e:	615a      	str	r2, [r3, #20]
  		serviceTaskAttrs -> priority = (osPriority_t) osPriorityLow;
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2208      	movs	r2, #8
 8000754:	619a      	str	r2, [r3, #24]
  		osThreadId_t serviceTaskId = osThreadNew(serviceTask, &services[i], serviceTaskAttrs);
 8000756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <main+0x1fc>)
 8000762:	4413      	add	r3, r2
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	4619      	mov	r1, r3
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <main+0x200>)
 800076a:	f003 fd31 	bl	80041d0 <osThreadNew>
 800076e:	6078      	str	r0, [r7, #4]
  		free(serviceTaskAttrs);
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f007 fddd 	bl	8008330 <free>

  		services[i].task = serviceTaskId;
 8000776:	4914      	ldr	r1, [pc, #80]	; (80007c8 <main+0x1fc>)
 8000778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	440b      	add	r3, r1
 8000784:	3310      	adds	r3, #16
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i < TOTAL_SERVICES; i++) {
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	3301      	adds	r3, #1
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	2b02      	cmp	r3, #2
 8000794:	f77f af4d 	ble.w	8000632 <main+0x66>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000798:	f003 fce4 	bl	8004164 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079c:	e7fe      	b.n	800079c <main+0x1d0>
 800079e:	bf00      	nop
 80007a0:	08009654 	.word	0x08009654
 80007a4:	20004ec4 	.word	0x20004ec4
 80007a8:	0800960c 	.word	0x0800960c
 80007ac:	08000c4d 	.word	0x08000c4d
 80007b0:	200049b0 	.word	0x200049b0
 80007b4:	08009630 	.word	0x08009630
 80007b8:	08000cf9 	.word	0x08000cf9
 80007bc:	20004e78 	.word	0x20004e78
 80007c0:	20000000 	.word	0x20000000
 80007c4:	08009600 	.word	0x08009600
 80007c8:	20004e3c 	.word	0x20004e3c
 80007cc:	08000af1 	.word	0x08000af1

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0b4      	sub	sp, #208	; 0xd0
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007da:	2230      	movs	r2, #48	; 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 fdbc 	bl	800835c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2284      	movs	r2, #132	; 0x84
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f007 fdad 	bl	800835c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000802:	f001 f96d 	bl	8001ae0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <SystemClock_Config+0x114>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a36      	ldr	r2, [pc, #216]	; (80008e4 <SystemClock_Config+0x114>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <SystemClock_Config+0x114>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <SystemClock_Config+0x118>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000826:	4a30      	ldr	r2, [pc, #192]	; (80008e8 <SystemClock_Config+0x118>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <SystemClock_Config+0x118>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083a:	2301      	movs	r3, #1
 800083c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000840:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000852:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000856:	2304      	movs	r3, #4
 8000858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800085c:	2348      	movs	r3, #72	; 0x48
 800085e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000868:	2303      	movs	r3, #3
 800086a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000872:	4618      	mov	r0, r3
 8000874:	f001 f944 	bl	8001b00 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800087e:	f000 faa9 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000888:	2302      	movs	r3, #2
 800088a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008a6:	2102      	movs	r1, #2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fbcd 	bl	8002048 <HAL_RCC_ClockConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008b4:	f000 fa8e 	bl	8000dd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <SystemClock_Config+0x11c>)
 80008ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008bc:	2300      	movs	r3, #0
 80008be:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fdf0 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80008d6:	f000 fa7d 	bl	8000dd4 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	37d0      	adds	r7, #208	; 0xd0
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000
 80008ec:	00200100 	.word	0x00200100

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART3_UART_Init+0x58>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <MX_USART3_UART_Init+0x5c>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_USART3_UART_Init+0x58>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_USART3_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART3_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART3_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART3_UART_Init+0x58>)
 8000934:	f002 fc8c 	bl	8003250 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800093e:	f000 fa49 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200049b4 	.word	0x200049b4
 800094c:	40004800 	.word	0x40004800

08000950 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800095a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2206      	movs	r2, #6
 8000960:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2202      	movs	r2, #2
 8000966:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2202      	movs	r2, #2
 8000972:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2201      	movs	r2, #1
 8000978:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2201      	movs	r2, #1
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	f000 ff5b 	bl	800184e <HAL_PCD_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 fa19 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20004a38 	.word	0x20004a38

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b46      	ldr	r3, [pc, #280]	; (8000adc <MX_GPIO_Init+0x130>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a45      	ldr	r2, [pc, #276]	; (8000adc <MX_GPIO_Init+0x130>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b43      	ldr	r3, [pc, #268]	; (8000adc <MX_GPIO_Init+0x130>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	4b40      	ldr	r3, [pc, #256]	; (8000adc <MX_GPIO_Init+0x130>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a3f      	ldr	r2, [pc, #252]	; (8000adc <MX_GPIO_Init+0x130>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b3d      	ldr	r3, [pc, #244]	; (8000adc <MX_GPIO_Init+0x130>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <MX_GPIO_Init+0x130>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a39      	ldr	r2, [pc, #228]	; (8000adc <MX_GPIO_Init+0x130>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a33      	ldr	r2, [pc, #204]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a27      	ldr	r2, [pc, #156]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a58:	4821      	ldr	r0, [pc, #132]	; (8000ae0 <MX_GPIO_Init+0x134>)
 8000a5a:	f000 fedf 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	4820      	ldr	r0, [pc, #128]	; (8000ae4 <MX_GPIO_Init+0x138>)
 8000a64:	f000 feda 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_GPIO_Init+0x13c>)
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481b      	ldr	r0, [pc, #108]	; (8000aec <MX_GPIO_Init+0x140>)
 8000a7e:	f000 fd21 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a82:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <MX_GPIO_Init+0x134>)
 8000a9c:	f000 fd12 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aa0:	2340      	movs	r3, #64	; 0x40
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <MX_GPIO_Init+0x138>)
 8000ab8:	f000 fd04 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_GPIO_Init+0x138>)
 8000ad0:	f000 fcf8 	bl	80014c4 <HAL_GPIO_Init>

}
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	10110000 	.word	0x10110000
 8000aec:	40020800 	.word	0x40020800

08000af0 <serviceTask>:

/* USER CODE BEGIN 4 */
void serviceTask(void *argument) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	osThreadSuspend(osThreadGetId());
 8000af8:	f003 fc10 	bl	800431c <osThreadGetId>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fc18 	bl	8004334 <osThreadSuspend>

	service_attr_t* settings = (service_attr_t*) argument;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
	struct request req;
	for(;;) {
		osStatus_t mResult = osMutexAcquire(settings -> mutex, 0);
 8000b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fd46 	bl	80045a0 <osMutexAcquire>
 8000b14:	6278      	str	r0, [r7, #36]	; 0x24
		if (mResult == osOK) {
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d158      	bne.n	8000bce <serviceTask+0xde>
			osStatus_t result = osMessageQueueGet(settings -> queue, &req, NULL, 0);
 8000b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	f107 0108 	add.w	r1, r7, #8
 8000b24:	2300      	movs	r3, #0
 8000b26:	2200      	movs	r2, #0
 8000b28:	f004 f83c 	bl	8004ba4 <osMessageQueueGet>
 8000b2c:	6238      	str	r0, [r7, #32]
			osMutexRelease(settings -> mutex);
 8000b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fd92 	bl	800465c <osMutexRelease>

			if (result == osOK) {
 8000b38:	6a3b      	ldr	r3, [r7, #32]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d147      	bne.n	8000bce <serviceTask+0xde>
				printf("Handle\r\n");
 8000b3e:	4827      	ldr	r0, [pc, #156]	; (8000bdc <serviceTask+0xec>)
 8000b40:	f007 fd44 	bl	80085cc <puts>

				for (int i = 0; i < req.groups; i++) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b48:	e03d      	b.n	8000bc6 <serviceTask+0xd6>
					osThreadAttr_t* teamTaskAttrs = malloc(sizeof(osThreadAttr_t));
 8000b4a:	2024      	movs	r0, #36	; 0x24
 8000b4c:	f007 fbe8 	bl	8008320 <malloc>
 8000b50:	4603      	mov	r3, r0
 8000b52:	61fb      	str	r3, [r7, #28]
					memset(teamTaskAttrs, 0, sizeof(*teamTaskAttrs));
 8000b54:	2224      	movs	r2, #36	; 0x24
 8000b56:	2100      	movs	r1, #0
 8000b58:	69f8      	ldr	r0, [r7, #28]
 8000b5a:	f007 fbff 	bl	800835c <memset>
					teamTaskAttrs -> name = NULL;
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
					teamTaskAttrs -> stack_size = 128 * 4;
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6a:	615a      	str	r2, [r3, #20]
					teamTaskAttrs -> priority = (osPriority_t) osPriorityLow;
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	2208      	movs	r2, #8
 8000b70:	619a      	str	r2, [r3, #24]

					task_params_t* params = malloc(sizeof(task_params_t));
 8000b72:	200c      	movs	r0, #12
 8000b74:	f007 fbd4 	bl	8008320 <malloc>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	61bb      	str	r3, [r7, #24]
					memset(params, 0, sizeof(*params));
 8000b7c:	220c      	movs	r2, #12
 8000b7e:	2100      	movs	r1, #0
 8000b80:	69b8      	ldr	r0, [r7, #24]
 8000b82:	f007 fbeb 	bl	800835c <memset>
					params -> semaphore = settings -> semaphore;
 8000b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	605a      	str	r2, [r3, #4]
					params -> time = req.task_time;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	601a      	str	r2, [r3, #0]
					params -> name = settings -> name;
 8000b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b96:	68da      	ldr	r2, [r3, #12]
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	609a      	str	r2, [r3, #8]

					osThreadId_t id = osThreadNew(teamTask, params, teamTaskAttrs);
 8000b9c:	69fa      	ldr	r2, [r7, #28]
 8000b9e:	69b9      	ldr	r1, [r7, #24]
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <serviceTask+0xf0>)
 8000ba2:	f003 fb15 	bl	80041d0 <osThreadNew>
 8000ba6:	6178      	str	r0, [r7, #20]
					if (id == NULL) {
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d105      	bne.n	8000bba <serviceTask+0xca>
						printf("Failed to launch teamTask\n\r");
 8000bae:	480d      	ldr	r0, [pc, #52]	; (8000be4 <serviceTask+0xf4>)
 8000bb0:	f007 fc86 	bl	80084c0 <iprintf>
						free(params);
 8000bb4:	69b8      	ldr	r0, [r7, #24]
 8000bb6:	f007 fbbb 	bl	8008330 <free>
					}
					free(teamTaskAttrs);
 8000bba:	69f8      	ldr	r0, [r7, #28]
 8000bbc:	f007 fbb8 	bl	8008330 <free>
				for (int i = 0; i < req.groups; i++) {
 8000bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	dbbd      	blt.n	8000b4a <serviceTask+0x5a>
				 // printf("Error receiving message\r\n");
			}
		} else {
			 // printf("Failed to acquire lock\r\n");
		}
		osThreadSuspend(osThreadGetId());
 8000bce:	f003 fba5 	bl	800431c <osThreadGetId>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 fbad 	bl	8004334 <osThreadSuspend>
	for(;;) {
 8000bda:	e795      	b.n	8000b08 <serviceTask+0x18>
 8000bdc:	080095a4 	.word	0x080095a4
 8000be0:	08000be9 	.word	0x08000be9
 8000be4:	080095ac 	.word	0x080095ac

08000be8 <teamTask>:
	}
}

void teamTask(void *argument) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	printf("Exec\n\r");
 8000bf0:	4814      	ldr	r0, [pc, #80]	; (8000c44 <teamTask+0x5c>)
 8000bf2:	f007 fc65 	bl	80084c0 <iprintf>
	task_params_t* params = (task_params_t*) argument;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]
	for(;;) {
		osStatus_t result = osSemaphoreAcquire(params -> semaphore, 0);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 fe17 	bl	8004834 <osSemaphoreAcquire>
 8000c06:	60b8      	str	r0, [r7, #8]
		if (result == osOK) {
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f5      	bne.n	8000bfa <teamTask+0x12>
			osDelay(pdMS_TO_TICKS(params -> time));
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c16:	fb02 f303 	mul.w	r3, r2, r3
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <teamTask+0x60>)
 8000c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c20:	099b      	lsrs	r3, r3, #6
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fbf4 	bl	8004410 <osDelay>
			osSemaphoreRelease(params -> semaphore);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f003 fe67 	bl	8004900 <osSemaphoreRelease>
			free(params);
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f007 fb7c 	bl	8008330 <free>
			params = NULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
			break;
 8000c3c:	bf00      	nop
		}
	}
	osThreadExit();
 8000c3e:	f003 fbe1 	bl	8004404 <osThreadExit>
 8000c42:	bf00      	nop
 8000c44:	080095c8 	.word	0x080095c8
 8000c48:	10624dd3 	.word	0x10624dd3

08000c4c <StartDefaultTask>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;) {
	  int service_num = rand() % TOTAL_SERVICES;
 8000c54:	f007 fcf0 	bl	8008638 <rand>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <StartDefaultTask+0x98>)
 8000c5c:	fb83 3102 	smull	r3, r1, r3, r2
 8000c60:	17d3      	asrs	r3, r2, #31
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	460b      	mov	r3, r1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	440b      	add	r3, r1
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
	  int team_num = rand() % 4 + 1;
 8000c6e:	f007 fce3 	bl	8008638 <rand>
 8000c72:	4603      	mov	r3, r0
 8000c74:	425a      	negs	r2, r3
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	f002 0203 	and.w	r2, r2, #3
 8000c7e:	bf58      	it	pl
 8000c80:	4253      	negpl	r3, r2
 8000c82:	3301      	adds	r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
	  int time_ms = rand() % 10;
 8000c86:	f007 fcd7 	bl	8008638 <rand>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <StartDefaultTask+0x9c>)
 8000c8e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c92:	1099      	asrs	r1, r3, #2
 8000c94:	17d3      	asrs	r3, r2, #31
 8000c96:	1ac9      	subs	r1, r1, r3
 8000c98:	460b      	mov	r3, r1
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	61fb      	str	r3, [r7, #28]

	  struct request req = {
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	617b      	str	r3, [r7, #20]
			  .service = service_num,
			  .groups = team_num,
			  .task_time = time_ms,
	  };

	  osStatus_t qResult = osMessageQueuePut(dispatcherQueueHandle, &req, 0, 0);
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <StartDefaultTask+0xa0>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	f107 010c 	add.w	r1, r7, #12
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f003 fefe 	bl	8004abc <osMessageQueuePut>
 8000cc0:	61b8      	str	r0, [r7, #24]
	  if (qResult == osOK) {
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d107      	bne.n	8000cd8 <StartDefaultTask+0x8c>
		  printf("Generated\r\n");
 8000cc8:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <StartDefaultTask+0xa4>)
 8000cca:	f007 fc7f 	bl	80085cc <puts>
		  osThreadResume(dispatcherHandle);
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <StartDefaultTask+0xa8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fb62 	bl	800439c <osThreadResume>
	  } else {
		  // printf("Failed to send dispatcher request\r\n");
	  }
	  osDelay(pdMS_TO_TICKS(DELAY));
 8000cd8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cdc:	f003 fb98 	bl	8004410 <osDelay>
  for (;;) {
 8000ce0:	e7b8      	b.n	8000c54 <StartDefaultTask+0x8>
 8000ce2:	bf00      	nop
 8000ce4:	55555556 	.word	0x55555556
 8000ce8:	66666667 	.word	0x66666667
 8000cec:	20004ec4 	.word	0x20004ec4
 8000cf0:	080095d0 	.word	0x080095d0
 8000cf4:	20004e78 	.word	0x20004e78

08000cf8 <dispatch>:
* @brief Function implementing the dispatcher thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispatch */
void dispatch(void *argument) {
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispatch */
  /* Infinite loop */
	osThreadSuspend(osThreadGetId());
 8000d00:	f003 fb0c 	bl	800431c <osThreadGetId>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 fb14 	bl	8004334 <osThreadSuspend>

	struct request req;
	osStatus_t mResult = osOK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
	osStatus_t putResult = osOK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
	for(;;) {
		osStatus_t getResult = osOK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (mResult == osOK && putResult == osOK) {
 8000d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10b      	bne.n	8000d36 <dispatch+0x3e>
 8000d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d108      	bne.n	8000d36 <dispatch+0x3e>
			getResult = osMessageQueueGet(dispatcherQueueHandle, &req, NULL, 0);
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <dispatch+0xac>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	f107 0120 	add.w	r1, r7, #32
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f003 ff38 	bl	8004ba4 <osMessageQueueGet>
 8000d34:	62f8      	str	r0, [r7, #44]	; 0x2c
		}
		if (getResult == osOK) {
 8000d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1eb      	bne.n	8000d14 <dispatch+0x1c>
		  service_attr_t serviceData = services[req.service];
 8000d3c:	6a3a      	ldr	r2, [r7, #32]
 8000d3e:	491a      	ldr	r1, [pc, #104]	; (8000da8 <dispatch+0xb0>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	f107 040c 	add.w	r4, r7, #12
 8000d4e:	461d      	mov	r5, r3
 8000d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	6023      	str	r3, [r4, #0]
		  mResult = osMutexAcquire(serviceData.mutex, 0);
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fc1f 	bl	80045a0 <osMutexAcquire>
 8000d62:	6378      	str	r0, [r7, #52]	; 0x34
		  if (mResult == osOK) {
 8000d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1d4      	bne.n	8000d14 <dispatch+0x1c>
			  putResult = osMessageQueuePut(serviceData.queue, &req, 0, 0);
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f107 0120 	add.w	r1, r7, #32
 8000d70:	2300      	movs	r3, #0
 8000d72:	2200      	movs	r2, #0
 8000d74:	f003 fea2 	bl	8004abc <osMessageQueuePut>
 8000d78:	6338      	str	r0, [r7, #48]	; 0x30
			  if (putResult == osOK) {
 8000d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <dispatch+0x8e>
				  printf("Dispatched\r\n");
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <dispatch+0xb4>)
 8000d82:	f007 fc23 	bl	80085cc <puts>
			  }
			  osMutexRelease(serviceData.mutex);
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 fc67 	bl	800465c <osMutexRelease>
			  osThreadResume(serviceData.task);
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 fb03 	bl	800439c <osThreadResume>
			  osThreadSuspend(osThreadGetId());
 8000d96:	f003 fac1 	bl	800431c <osThreadGetId>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fac9 	bl	8004334 <osThreadSuspend>
	for(;;) {
 8000da2:	e7b7      	b.n	8000d14 <dispatch+0x1c>
 8000da4:	20004ec4 	.word	0x20004ec4
 8000da8:	20004e3c 	.word	0x20004e3c
 8000dac:	080095dc 	.word	0x080095dc

08000db0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dc2:	f000 fa59 	bl	8001278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <HAL_MspInit+0x4c>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	210f      	movs	r1, #15
 8000e1a:	f06f 0001 	mvn.w	r0, #1
 8000e1e:	f000 fb27 	bl	8001470 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a17      	ldr	r2, [pc, #92]	; (8000eac <HAL_UART_MspInit+0x7c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d128      	bne.n	8000ea4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e94:	2307      	movs	r3, #7
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000ea0:	f000 fb10 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40004800 	.word	0x40004800
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020c00 	.word	0x40020c00

08000eb8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ed8:	d141      	bne.n	8000f5e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_PCD_MspInit+0xb0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_PCD_MspInit+0xb0>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <HAL_PCD_MspInit+0xb0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ef2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f04:	230a      	movs	r3, #10
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4817      	ldr	r0, [pc, #92]	; (8000f6c <HAL_PCD_MspInit+0xb4>)
 8000f10:	f000 fad8 	bl	80014c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4810      	ldr	r0, [pc, #64]	; (8000f6c <HAL_PCD_MspInit+0xb4>)
 8000f2a:	f000 facb 	bl	80014c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_PCD_MspInit+0xb0>)
 8000f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f32:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_PCD_MspInit+0xb0>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	6353      	str	r3, [r2, #52]	; 0x34
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_PCD_MspInit+0xb0>)
 8000f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_PCD_MspInit+0xb0>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_PCD_MspInit+0xb0>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_PCD_MspInit+0xb0>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2019      	movs	r0, #25
 8000f86:	f000 fa73 	bl	8001470 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f000 fa8c 	bl	80014a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <HAL_InitTick+0x9c>)
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_InitTick+0x9c>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_InitTick+0x9c>)
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa8:	f107 0210 	add.w	r2, r7, #16
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fa4a 	bl	800244c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fb8:	f001 fa34 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8000fbc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <HAL_InitTick+0xa0>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	0c9b      	lsrs	r3, r3, #18
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_InitTick+0xa4>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <HAL_InitTick+0xa8>)
 8000fd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_InitTick+0xa4>)
 8000fd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <HAL_InitTick+0xa4>)
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_InitTick+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_InitTick+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <HAL_InitTick+0xa4>)
 8000fee:	f001 fe4f 	bl	8002c90 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d104      	bne.n	8001002 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ff8:	4806      	ldr	r0, [pc, #24]	; (8001014 <HAL_InitTick+0xa4>)
 8000ffa:	f001 feab 	bl	8002d54 <HAL_TIM_Base_Start_IT>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3730      	adds	r7, #48	; 0x30
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	431bde83 	.word	0x431bde83
 8001014:	20004ec8 	.word	0x20004ec8
 8001018:	40010000 	.word	0x40010000

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800104e:	f001 fef9 	bl	8002e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20004ec8 	.word	0x20004ec8

0800105c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
	return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_kill>:

int _kill(int pid, int sig)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001076:	f007 f929 	bl	80082cc <__errno>
 800107a:	4603      	mov	r3, r0
 800107c:	2216      	movs	r2, #22
 800107e:	601a      	str	r2, [r3, #0]
	return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_exit>:

void _exit (int status)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffe7 	bl	800106c <_kill>
	while (1) {}		/* Make sure we hang here */
 800109e:	e7fe      	b.n	800109e <_exit+0x12>

080010a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e00a      	b.n	80010c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	4601      	mov	r1, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <_read+0x12>
	}

return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e009      	b.n	8001100 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa57 	bl	80005a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf1      	blt.n	80010ec <_write+0x12>
	}
	return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_close>:

int _close(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
	return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113a:	605a      	str	r2, [r3, #4]
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_isatty>:

int _isatty(int file)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	return 1;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
	return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f007 f88e 	bl	80082cc <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20050000 	.word	0x20050000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	2000009c 	.word	0x2000009c
 80011e4:	20004f68 	.word	0x20004f68

080011e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001212:	490e      	ldr	r1, [pc, #56]	; (800124c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001214:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001228:	4c0b      	ldr	r4, [pc, #44]	; (8001258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001236:	f7ff ffd7 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f007 f84d 	bl	80082d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff f9c5 	bl	80005cc <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001250:	080097e0 	.word	0x080097e0
  ldr r2, =_sbss
 8001254:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001258:	20004f68 	.word	0x20004f68

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>

0800125e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001262:	2003      	movs	r0, #3
 8001264:	f000 f8f9 	bl	800145a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff fe81 	bl	8000f70 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800126e:	f7ff fdb7 	bl	8000de0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000014 	.word	0x20000014
 800129c:	20004f14 	.word	0x20004f14

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20004f14 	.word	0x20004f14

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000014 	.word	0x20000014

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	4313      	orrs	r3, r2
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	05fa0000 	.word	0x05fa0000

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	; (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff4c 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001482:	f7ff ff61 	bl	8001348 <__NVIC_GetPriorityGrouping>
 8001486:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f7ff ffb1 	bl	80013f4 <NVIC_EncodePriority>
 8001492:	4602      	mov	r2, r0
 8001494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff80 	bl	80013a0 <__NVIC_SetPriority>
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff54 	bl	8001364 <__NVIC_EnableIRQ>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e175      	b.n	80017d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8164 	bne.w	80017ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d00b      	beq.n	8001522 <HAL_GPIO_Init+0x5e>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001516:	2b11      	cmp	r3, #17
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b12      	cmp	r3, #18
 8001520:	d130      	bne.n	8001584 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	f003 0201 	and.w	r2, r3, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x100>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b12      	cmp	r3, #18
 80015c2:	d123      	bne.n	800160c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0203 	and.w	r2, r3, #3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80be 	beq.w	80017ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	4b66      	ldr	r3, [pc, #408]	; (80017e8 <HAL_GPIO_Init+0x324>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a65      	ldr	r2, [pc, #404]	; (80017e8 <HAL_GPIO_Init+0x324>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_GPIO_Init+0x324>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001666:	4a61      	ldr	r2, [pc, #388]	; (80017ec <HAL_GPIO_Init+0x328>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <HAL_GPIO_Init+0x32c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d037      	beq.n	8001702 <HAL_GPIO_Init+0x23e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a57      	ldr	r2, [pc, #348]	; (80017f4 <HAL_GPIO_Init+0x330>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d031      	beq.n	80016fe <HAL_GPIO_Init+0x23a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a56      	ldr	r2, [pc, #344]	; (80017f8 <HAL_GPIO_Init+0x334>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d02b      	beq.n	80016fa <HAL_GPIO_Init+0x236>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a55      	ldr	r2, [pc, #340]	; (80017fc <HAL_GPIO_Init+0x338>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d025      	beq.n	80016f6 <HAL_GPIO_Init+0x232>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a54      	ldr	r2, [pc, #336]	; (8001800 <HAL_GPIO_Init+0x33c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01f      	beq.n	80016f2 <HAL_GPIO_Init+0x22e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a53      	ldr	r2, [pc, #332]	; (8001804 <HAL_GPIO_Init+0x340>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x22a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a52      	ldr	r2, [pc, #328]	; (8001808 <HAL_GPIO_Init+0x344>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x226>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a51      	ldr	r2, [pc, #324]	; (800180c <HAL_GPIO_Init+0x348>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x222>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a50      	ldr	r2, [pc, #320]	; (8001810 <HAL_GPIO_Init+0x34c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x21e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4f      	ldr	r2, [pc, #316]	; (8001814 <HAL_GPIO_Init+0x350>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x21a>
 80016da:	2309      	movs	r3, #9
 80016dc:	e012      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016de:	230a      	movs	r3, #10
 80016e0:	e010      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016e2:	2308      	movs	r3, #8
 80016e4:	e00e      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016e6:	2307      	movs	r3, #7
 80016e8:	e00c      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016ea:	2306      	movs	r3, #6
 80016ec:	e00a      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016ee:	2305      	movs	r3, #5
 80016f0:	e008      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016f6:	2303      	movs	r3, #3
 80016f8:	e004      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x240>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x240>
 8001702:	2300      	movs	r3, #0
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f002 0203 	and.w	r2, r2, #3
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	4093      	lsls	r3, r2
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001714:	4935      	ldr	r1, [pc, #212]	; (80017ec <HAL_GPIO_Init+0x328>)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <HAL_GPIO_Init+0x354>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001746:	4a34      	ldr	r2, [pc, #208]	; (8001818 <HAL_GPIO_Init+0x354>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <HAL_GPIO_Init+0x354>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001770:	4a29      	ldr	r2, [pc, #164]	; (8001818 <HAL_GPIO_Init+0x354>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_GPIO_Init+0x354>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_GPIO_Init+0x354>)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_GPIO_Init+0x354>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_GPIO_Init+0x354>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	f67f ae86 	bls.w	80014e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40021000 	.word	0x40021000
 8001804:	40021400 	.word	0x40021400
 8001808:	40021800 	.word	0x40021800
 800180c:	40021c00 	.word	0x40021c00
 8001810:	40022000 	.word	0x40022000
 8001814:	40022400 	.word	0x40022400
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800184e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001850:	b08f      	sub	sp, #60	; 0x3c
 8001852:	af0a      	add	r7, sp, #40	; 0x28
 8001854:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e116      	b.n	8001a8e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fb1c 	bl	8000eb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2203      	movs	r2, #3
 8001884:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 f9c4 	bl	8003c2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	687e      	ldr	r6, [r7, #4]
 80018ac:	466d      	mov	r5, sp
 80018ae:	f106 0410 	add.w	r4, r6, #16
 80018b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018be:	e885 0003 	stmia.w	r5, {r0, r1}
 80018c2:	1d33      	adds	r3, r6, #4
 80018c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c6:	6838      	ldr	r0, [r7, #0]
 80018c8:	f002 f958 	bl	8003b7c <USB_CoreInit>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2202      	movs	r2, #2
 80018d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0d7      	b.n	8001a8e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 f9b2 	bl	8003c4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e04a      	b.n	8001986 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	333d      	adds	r3, #61	; 0x3d
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	333c      	adds	r3, #60	; 0x3c
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	b298      	uxth	r0, r3
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	3342      	adds	r3, #66	; 0x42
 800192c:	4602      	mov	r2, r0
 800192e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	333f      	adds	r3, #63	; 0x3f
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3344      	adds	r3, #68	; 0x44
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	3348      	adds	r3, #72	; 0x48
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	3350      	adds	r3, #80	; 0x50
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	3301      	adds	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	d3af      	bcc.n	80018f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e044      	b.n	8001a20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3b5      	bcc.n	8001996 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	687e      	ldr	r6, [r7, #4]
 8001a32:	466d      	mov	r5, sp
 8001a34:	f106 0410 	add.w	r4, r6, #16
 8001a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a44:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a48:	1d33      	adds	r3, r6, #4
 8001a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4c:	6838      	ldr	r0, [r7, #0]
 8001a4e:	f002 f929 	bl	8003ca4 <USB_DevInit>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e014      	b.n	8001a8e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d102      	bne.n	8001a82 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f80b 	bl	8001a98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 fadb 	bl	8004042 <USB_DevDisconnect>

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001a98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_PCDEx_ActivateLPM+0x44>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	10000003 	.word	0x10000003

08001ae0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40007000 	.word	0x40007000

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e291      	b.n	800203a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8087 	beq.w	8001c32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b24:	4b96      	ldr	r3, [pc, #600]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d00c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b30:	4b93      	ldr	r3, [pc, #588]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d112      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62>
 8001b3c:	4b90      	ldr	r3, [pc, #576]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b48:	d10b      	bne.n	8001b62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	4b8d      	ldr	r3, [pc, #564]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d06c      	beq.n	8001c30 <HAL_RCC_OscConfig+0x130>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d168      	bne.n	8001c30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e26b      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x7a>
 8001b6c:	4b84      	ldr	r3, [pc, #528]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a83      	ldr	r2, [pc, #524]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e02e      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x9c>
 8001b82:	4b7f      	ldr	r3, [pc, #508]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7e      	ldr	r2, [pc, #504]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7b      	ldr	r2, [pc, #492]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xc0>
 8001ba6:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a75      	ldr	r2, [pc, #468]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a72      	ldr	r2, [pc, #456]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd8>
 8001bc0:	4b6f      	ldr	r3, [pc, #444]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6e      	ldr	r2, [pc, #440]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a6b      	ldr	r2, [pc, #428]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fb5e 	bl	80012a0 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fb5a 	bl	80012a0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e21f      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b61      	ldr	r3, [pc, #388]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0xe8>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fb4a 	bl	80012a0 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fb46 	bl	80012a0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e20b      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x110>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d069      	beq.n	8001d12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4a:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x190>
 8001c56:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x17a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1df      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	493d      	ldr	r1, [pc, #244]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	e040      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c98:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a38      	ldr	r2, [pc, #224]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fafc 	bl	80012a0 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff faf8 	bl	80012a0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1bd      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4929      	ldr	r1, [pc, #164]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
 8001cde:	e018      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a26      	ldr	r2, [pc, #152]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff fad8 	bl	80012a0 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fad4 	bl	80012a0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e199      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d038      	beq.n	8001d90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d019      	beq.n	8001d5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff fab5 	bl	80012a0 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fab1 	bl	80012a0 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e176      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x23a>
 8001d58:	e01a      	b.n	8001d90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_RCC_OscConfig+0x280>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d66:	f7ff fa9b 	bl	80012a0 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fa97 	bl	80012a0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d903      	bls.n	8001d84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e15c      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
 8001d80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1ee      	bne.n	8001d6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a4 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b8b      	ldr	r3, [pc, #556]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b88      	ldr	r3, [pc, #544]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a87      	ldr	r2, [pc, #540]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b85      	ldr	r3, [pc, #532]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <HAL_RCC_OscConfig+0x4d0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001dd2:	4b7f      	ldr	r3, [pc, #508]	; (8001fd0 <HAL_RCC_OscConfig+0x4d0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a7e      	ldr	r2, [pc, #504]	; (8001fd0 <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fa5f 	bl	80012a0 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7ff fa5b 	bl	80012a0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e120      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	4b75      	ldr	r3, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0x4d0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x31a>
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	4a6e      	ldr	r2, [pc, #440]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6713      	str	r3, [r2, #112]	; 0x70
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_OscConfig+0x376>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x33c>
 8001e22:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	4a66      	ldr	r2, [pc, #408]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3a:	e01c      	b.n	8001e76 <HAL_RCC_OscConfig+0x376>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x35e>
 8001e44:	4b61      	ldr	r3, [pc, #388]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	4a60      	ldr	r2, [pc, #384]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e50:	4b5e      	ldr	r3, [pc, #376]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a5d      	ldr	r2, [pc, #372]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0x376>
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	4a5a      	ldr	r2, [pc, #360]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6a:	4b58      	ldr	r3, [pc, #352]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fa0f 	bl	80012a0 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff fa0b 	bl	80012a0 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0ce      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ee      	beq.n	8001e86 <HAL_RCC_OscConfig+0x386>
 8001ea8:	e014      	b.n	8001ed4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f9f9 	bl	80012a0 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff f9f5 	bl	80012a0 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ee      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eda:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a3b      	ldr	r2, [pc, #236]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80a4 	beq.w	8002038 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d06b      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d149      	bne.n	8001f98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f04:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff f9c6 	bl	80012a0 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff f9c2 	bl	80012a0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e087      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	019b      	lsls	r3, r3, #6
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff f996 	bl	80012a0 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7ff f992 	bl	80012a0 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e057      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x478>
 8001f96:	e04f      	b.n	8002038 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f97c 	bl	80012a0 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff f978 	bl	80012a0 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e03d      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x4ac>
 8001fca:	e035      	b.n	8002038 <HAL_RCC_OscConfig+0x538>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x544>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d028      	beq.n	8002034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d121      	bne.n	8002034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d11a      	bne.n	8002034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800200a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800200c:	4293      	cmp	r3, r2
 800200e:	d111      	bne.n	8002034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	3b01      	subs	r3, #1
 800201e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0d0      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b6a      	ldr	r3, [pc, #424]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d910      	bls.n	8002090 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 020f 	bic.w	r2, r3, #15
 8002076:	4965      	ldr	r1, [pc, #404]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b63      	ldr	r3, [pc, #396]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0b8      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a8:	4b59      	ldr	r3, [pc, #356]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a58      	ldr	r2, [pc, #352]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c0:	4b53      	ldr	r3, [pc, #332]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a52      	ldr	r2, [pc, #328]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	494d      	ldr	r1, [pc, #308]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d040      	beq.n	800216c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d115      	bne.n	800212a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e07f      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	4b41      	ldr	r3, [pc, #260]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e073      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e06b      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212a:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f023 0203 	bic.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4936      	ldr	r1, [pc, #216]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 8002138:	4313      	orrs	r3, r2
 800213a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800213c:	f7ff f8b0 	bl	80012a0 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7ff f8ac 	bl	80012a0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e053      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 020c 	and.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d1eb      	bne.n	8002144 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d210      	bcs.n	800219c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 020f 	bic.w	r2, r3, #15
 8002182:	4922      	ldr	r1, [pc, #136]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e032      	b.n	8002202 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4916      	ldr	r1, [pc, #88]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	490e      	ldr	r1, [pc, #56]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021da:	f000 f821 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	490a      	ldr	r1, [pc, #40]	; (8002214 <HAL_RCC_ClockConfig+0x1cc>)
 80021ec:	5ccb      	ldrb	r3, [r1, r3]
 80021ee:	fa22 f303 	lsr.w	r3, r2, r3
 80021f2:	4a09      	ldr	r2, [pc, #36]	; (8002218 <HAL_RCC_ClockConfig+0x1d0>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_RCC_ClockConfig+0x1d4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe feb8 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00
 8002210:	40023800 	.word	0x40023800
 8002214:	0800966c 	.word	0x0800966c
 8002218:	2000000c 	.word	0x2000000c
 800221c:	20000010 	.word	0x20000010

08002220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	2300      	movs	r3, #0
 8002232:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002238:	4b67      	ldr	r3, [pc, #412]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d00d      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x40>
 8002244:	2b08      	cmp	r3, #8
 8002246:	f200 80bd 	bhi.w	80023c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x34>
 800224e:	2b04      	cmp	r3, #4
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x3a>
 8002252:	e0b7      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4b61      	ldr	r3, [pc, #388]	; (80023dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002256:	60bb      	str	r3, [r7, #8]
      break;
 8002258:	e0b7      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800225a:	4b61      	ldr	r3, [pc, #388]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800225c:	60bb      	str	r3, [r7, #8]
      break;
 800225e:	e0b4      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002260:	4b5d      	ldr	r3, [pc, #372]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002268:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800226a:	4b5b      	ldr	r3, [pc, #364]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d04d      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002276:	4b58      	ldr	r3, [pc, #352]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	099b      	lsrs	r3, r3, #6
 800227c:	461a      	mov	r2, r3
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002286:	f04f 0100 	mov.w	r1, #0
 800228a:	ea02 0800 	and.w	r8, r2, r0
 800228e:	ea03 0901 	and.w	r9, r3, r1
 8002292:	4640      	mov	r0, r8
 8002294:	4649      	mov	r1, r9
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	014b      	lsls	r3, r1, #5
 80022a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022a4:	0142      	lsls	r2, r0, #5
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	ebb0 0008 	subs.w	r0, r0, r8
 80022ae:	eb61 0109 	sbc.w	r1, r1, r9
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	018b      	lsls	r3, r1, #6
 80022bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022c0:	0182      	lsls	r2, r0, #6
 80022c2:	1a12      	subs	r2, r2, r0
 80022c4:	eb63 0301 	sbc.w	r3, r3, r1
 80022c8:	f04f 0000 	mov.w	r0, #0
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	00d9      	lsls	r1, r3, #3
 80022d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022d6:	00d0      	lsls	r0, r2, #3
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	eb12 0208 	adds.w	r2, r2, r8
 80022e0:	eb43 0309 	adc.w	r3, r3, r9
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	0259      	lsls	r1, r3, #9
 80022ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022f2:	0250      	lsls	r0, r2, #9
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	f7fd ffd4 	bl	80002b0 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e04a      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	461a      	mov	r2, r3
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002322:	f04f 0100 	mov.w	r1, #0
 8002326:	ea02 0400 	and.w	r4, r2, r0
 800232a:	ea03 0501 	and.w	r5, r3, r1
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	014b      	lsls	r3, r1, #5
 800233c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002340:	0142      	lsls	r2, r0, #5
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	1b00      	subs	r0, r0, r4
 8002348:	eb61 0105 	sbc.w	r1, r1, r5
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	018b      	lsls	r3, r1, #6
 8002356:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800235a:	0182      	lsls	r2, r0, #6
 800235c:	1a12      	subs	r2, r2, r0
 800235e:	eb63 0301 	sbc.w	r3, r3, r1
 8002362:	f04f 0000 	mov.w	r0, #0
 8002366:	f04f 0100 	mov.w	r1, #0
 800236a:	00d9      	lsls	r1, r3, #3
 800236c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002370:	00d0      	lsls	r0, r2, #3
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	1912      	adds	r2, r2, r4
 8002378:	eb45 0303 	adc.w	r3, r5, r3
 800237c:	f04f 0000 	mov.w	r0, #0
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	0299      	lsls	r1, r3, #10
 8002386:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800238a:	0290      	lsls	r0, r2, #10
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	461a      	mov	r2, r3
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	f7fd ff88 	bl	80002b0 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	3301      	adds	r3, #1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	60bb      	str	r3, [r7, #8]
      break;
 80023c2:	e002      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023c6:	60bb      	str	r3, [r7, #8]
      break;
 80023c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ca:	68bb      	ldr	r3, [r7, #8]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	00f42400 	.word	0x00f42400
 80023e0:	007a1200 	.word	0x007a1200

080023e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	2000000c 	.word	0x2000000c

080023fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002400:	f7ff fff0 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0a9b      	lsrs	r3, r3, #10
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	0800967c 	.word	0x0800967c

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffdc 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0b5b      	lsrs	r3, r3, #13
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	0800967c 	.word	0x0800967c

0800244c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	220f      	movs	r2, #15
 800245a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCC_GetClockConfig+0x5c>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_RCC_GetClockConfig+0x5c>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	08db      	lsrs	r3, r3, #3
 8002486:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_RCC_GetClockConfig+0x60>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 020f 	and.w	r2, r3, #15
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	601a      	str	r2, [r3, #0]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40023c00 	.word	0x40023c00

080024b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d012      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024d8:	4b69      	ldr	r3, [pc, #420]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a68      	ldr	r2, [pc, #416]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024e2:	6093      	str	r3, [r2, #8]
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ec:	4964      	ldr	r1, [pc, #400]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d017      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800250a:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	4959      	ldr	r1, [pc, #356]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002528:	d101      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800252a:	2301      	movs	r3, #1
 800252c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002536:	2301      	movs	r3, #1
 8002538:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d017      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002546:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800254c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	494a      	ldr	r1, [pc, #296]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002564:	d101      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002566:	2301      	movs	r3, #1
 8002568:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002582:	2301      	movs	r3, #1
 8002584:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 808b 	beq.w	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4a39      	ldr	r2, [pc, #228]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259e:	6413      	str	r3, [r2, #64]	; 0x40
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a34      	ldr	r2, [pc, #208]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b8:	f7fe fe72 	bl	80012a0 <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c0:	f7fe fe6e 	bl	80012a0 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e357      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025d2:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025de:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d035      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d02e      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002604:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	4a1a      	ldr	r2, [pc, #104]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d114      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fe36 	bl	80012a0 <HAL_GetTick>
 8002634:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002636:	e00a      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7fe fe32 	bl	80012a0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e319      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0ee      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002666:	d111      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002676:	400b      	ands	r3, r1
 8002678:	4901      	ldr	r1, [pc, #4]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
 800267e:	e00b      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002680:	40023800 	.word	0x40023800
 8002684:	40007000 	.word	0x40007000
 8002688:	0ffffcff 	.word	0x0ffffcff
 800268c:	4bb1      	ldr	r3, [pc, #708]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4ab0      	ldr	r2, [pc, #704]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002692:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002696:	6093      	str	r3, [r2, #8]
 8002698:	4bae      	ldr	r3, [pc, #696]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800269a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	49ab      	ldr	r1, [pc, #684]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d010      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026b6:	4ba7      	ldr	r3, [pc, #668]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026bc:	4aa5      	ldr	r2, [pc, #660]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026c6:	4ba3      	ldr	r3, [pc, #652]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	49a0      	ldr	r1, [pc, #640]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e4:	4b9b      	ldr	r3, [pc, #620]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f2:	4998      	ldr	r1, [pc, #608]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002706:	4b93      	ldr	r3, [pc, #588]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002714:	498f      	ldr	r1, [pc, #572]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002728:	4b8a      	ldr	r3, [pc, #552]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002736:	4987      	ldr	r1, [pc, #540]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800274a:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	497e      	ldr	r1, [pc, #504]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800276c:	4b79      	ldr	r3, [pc, #484]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	4976      	ldr	r1, [pc, #472]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800278e:	4b71      	ldr	r3, [pc, #452]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f023 020c 	bic.w	r2, r3, #12
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279c:	496d      	ldr	r1, [pc, #436]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027b0:	4b68      	ldr	r3, [pc, #416]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	4965      	ldr	r1, [pc, #404]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027d2:	4b60      	ldr	r3, [pc, #384]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e0:	495c      	ldr	r1, [pc, #368]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027f4:	4b57      	ldr	r3, [pc, #348]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	4954      	ldr	r1, [pc, #336]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002816:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	494b      	ldr	r1, [pc, #300]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002838:	4b46      	ldr	r3, [pc, #280]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	4943      	ldr	r1, [pc, #268]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800285a:	4b3e      	ldr	r3, [pc, #248]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002868:	493a      	ldr	r1, [pc, #232]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800287c:	4b35      	ldr	r3, [pc, #212]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288a:	4932      	ldr	r1, [pc, #200]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d011      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800289e:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ac:	4929      	ldr	r1, [pc, #164]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028bc:	d101      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028ce:	2301      	movs	r3, #1
 80028d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ec:	4919      	ldr	r1, [pc, #100]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002910:	4910      	ldr	r1, [pc, #64]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d006      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80d9 	beq.w	8002ade <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a08      	ldr	r2, [pc, #32]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002932:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002938:	f7fe fcb2 	bl	80012a0 <HAL_GetTick>
 800293c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800293e:	e00b      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002940:	f7fe fcae 	bl	80012a0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d904      	bls.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e197      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002958:	4b6c      	ldr	r3, [pc, #432]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1ed      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d021      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11d      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002978:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800297a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800297e:	0c1b      	lsrs	r3, r3, #16
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002986:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298c:	0e1b      	lsrs	r3, r3, #24
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	019a      	lsls	r2, r3, #6
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	431a      	orrs	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	061b      	lsls	r3, r3, #24
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	071b      	lsls	r3, r3, #28
 80029ac:	4957      	ldr	r1, [pc, #348]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d02e      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029de:	d129      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029e0:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f4:	0f1b      	lsrs	r3, r3, #28
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	019a      	lsls	r2, r3, #6
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	071b      	lsls	r3, r3, #28
 8002a14:	493d      	ldr	r1, [pc, #244]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a1c:	4b3b      	ldr	r3, [pc, #236]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a22:	f023 021f 	bic.w	r2, r3, #31
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	4937      	ldr	r1, [pc, #220]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01d      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a40:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a46:	0e1b      	lsrs	r3, r3, #24
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a54:	0f1b      	lsrs	r3, r3, #28
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	019a      	lsls	r2, r3, #6
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	071b      	lsls	r3, r3, #28
 8002a74:	4925      	ldr	r1, [pc, #148]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d011      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	019a      	lsls	r2, r3, #6
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	061b      	lsls	r3, r3, #24
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	071b      	lsls	r3, r3, #28
 8002aa4:	4919      	ldr	r1, [pc, #100]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a16      	ldr	r2, [pc, #88]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fbf2 	bl	80012a0 <HAL_GetTick>
 8002abc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ac0:	f7fe fbee 	bl	80012a0 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0d7      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 80cd 	bne.w	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af2:	f7fe fbd5 	bl	80012a0 <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002afa:	f7fe fbd1 	bl	80012a0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	; 0x64
 8002b06:	d903      	bls.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0ba      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b10:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1c:	d0ed      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d02e      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d12a      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b46:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b54:	4b4d      	ldr	r3, [pc, #308]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	0f1b      	lsrs	r3, r3, #28
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	019a      	lsls	r2, r3, #6
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	041b      	lsls	r3, r3, #16
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	061b      	lsls	r3, r3, #24
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	071b      	lsls	r3, r3, #28
 8002b7a:	4944      	ldr	r1, [pc, #272]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b82:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	3b01      	subs	r3, #1
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	493d      	ldr	r1, [pc, #244]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d022      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bb0:	d11d      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb8:	0e1b      	lsrs	r3, r3, #24
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bc0:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	0f1b      	lsrs	r3, r3, #28
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	019a      	lsls	r2, r3, #6
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	071b      	lsls	r3, r3, #28
 8002be6:	4929      	ldr	r1, [pc, #164]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d028      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bfa:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	0e1b      	lsrs	r3, r3, #24
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c08:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	019a      	lsls	r2, r3, #6
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	041b      	lsls	r3, r3, #16
 8002c20:	431a      	orrs	r2, r3
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	071b      	lsls	r3, r3, #28
 8002c2e:	4917      	ldr	r1, [pc, #92]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	4911      	ldr	r1, [pc, #68]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c58:	f7fe fb22 	bl	80012a0 <HAL_GetTick>
 8002c5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c60:	f7fe fb1e 	bl	80012a0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e007      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c7e:	d1ef      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800

08002c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e049      	b.n	8002d36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f841 	bl	8002d3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	f000 fa00 	bl	80030d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e054      	b.n	8002e16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d022      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d01d      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d018      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <HAL_TIM_Base_Start_IT+0xd8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1f      	ldr	r2, [pc, #124]	; (8002e30 <HAL_TIM_Base_Start_IT+0xdc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00e      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <HAL_TIM_Base_Start_IT+0xe0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_TIM_Base_Start_IT+0xe4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x80>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <HAL_TIM_Base_Start_IT+0xe8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d115      	bne.n	8002e00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_TIM_Base_Start_IT+0xec>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d015      	beq.n	8002e12 <HAL_TIM_Base_Start_IT+0xbe>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d011      	beq.n	8002e12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfe:	e008      	b.n	8002e12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e000      	b.n	8002e14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40010000 	.word	0x40010000
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	40010400 	.word	0x40010400
 8002e38:	40014000 	.word	0x40014000
 8002e3c:	40001800 	.word	0x40001800
 8002e40:	00010007 	.word	0x00010007

08002e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d122      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d11b      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0202 	mvn.w	r2, #2
 8002e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f905 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f8f7 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f908 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0204 	mvn.w	r2, #4
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f8db 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f8cd 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f8de 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0208 	mvn.w	r2, #8
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8b1 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8a3 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f8b4 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0210 	mvn.w	r2, #16
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2208      	movs	r2, #8
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f887 	bl	8003096 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f879 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f88a 	bl	80030aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0201 	mvn.w	r2, #1
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fef4 	bl	8000db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b80      	cmp	r3, #128	; 0x80
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe0:	2b80      	cmp	r3, #128	; 0x80
 8002fe2:	d107      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f91a 	bl	8003228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003002:	d10e      	bne.n	8003022 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d107      	bne.n	8003022 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800301a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f90d 	bl	800323c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d10e      	bne.n	800304e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d107      	bne.n	800304e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f838 	bl	80030be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d10e      	bne.n	800307a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b20      	cmp	r3, #32
 8003068:	d107      	bne.n	800307a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f06f 0220 	mvn.w	r2, #32
 8003072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8cd 	bl	8003214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a40      	ldr	r2, [pc, #256]	; (80031e8 <TIM_Base_SetConfig+0x114>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d013      	beq.n	8003114 <TIM_Base_SetConfig+0x40>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f2:	d00f      	beq.n	8003114 <TIM_Base_SetConfig+0x40>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3d      	ldr	r2, [pc, #244]	; (80031ec <TIM_Base_SetConfig+0x118>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00b      	beq.n	8003114 <TIM_Base_SetConfig+0x40>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a3c      	ldr	r2, [pc, #240]	; (80031f0 <TIM_Base_SetConfig+0x11c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d007      	beq.n	8003114 <TIM_Base_SetConfig+0x40>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3b      	ldr	r2, [pc, #236]	; (80031f4 <TIM_Base_SetConfig+0x120>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3a      	ldr	r2, [pc, #232]	; (80031f8 <TIM_Base_SetConfig+0x124>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d108      	bne.n	8003126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2f      	ldr	r2, [pc, #188]	; (80031e8 <TIM_Base_SetConfig+0x114>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02b      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003134:	d027      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2c      	ldr	r2, [pc, #176]	; (80031ec <TIM_Base_SetConfig+0x118>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d023      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <TIM_Base_SetConfig+0x11c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01f      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2a      	ldr	r2, [pc, #168]	; (80031f4 <TIM_Base_SetConfig+0x120>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01b      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <TIM_Base_SetConfig+0x124>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d017      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a28      	ldr	r2, [pc, #160]	; (80031fc <TIM_Base_SetConfig+0x128>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a27      	ldr	r2, [pc, #156]	; (8003200 <TIM_Base_SetConfig+0x12c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00f      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <TIM_Base_SetConfig+0x130>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00b      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a25      	ldr	r2, [pc, #148]	; (8003208 <TIM_Base_SetConfig+0x134>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d007      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a24      	ldr	r2, [pc, #144]	; (800320c <TIM_Base_SetConfig+0x138>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d003      	beq.n	8003186 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a23      	ldr	r2, [pc, #140]	; (8003210 <TIM_Base_SetConfig+0x13c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d108      	bne.n	8003198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <TIM_Base_SetConfig+0x114>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_Base_SetConfig+0xf8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <TIM_Base_SetConfig+0x124>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40010000 	.word	0x40010000
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40000800 	.word	0x40000800
 80031f4:	40000c00 	.word	0x40000c00
 80031f8:	40010400 	.word	0x40010400
 80031fc:	40014000 	.word	0x40014000
 8003200:	40014400 	.word	0x40014400
 8003204:	40014800 	.word	0x40014800
 8003208:	40001800 	.word	0x40001800
 800320c:	40001c00 	.word	0x40001c00
 8003210:	40002000 	.word	0x40002000

08003214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e040      	b.n	80032e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd fddc 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	; 0x24
 800327c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f8c0 	bl	8003414 <UART_SetConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e022      	b.n	80032e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fb16 	bl	80038d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fb9d 	bl	8003a1c <UART_CheckIdleState>
 80032e2:	4603      	mov	r3, r0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003300:	2b20      	cmp	r3, #32
 8003302:	f040 8081 	bne.w	8003408 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_UART_Transmit+0x26>
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e079      	b.n	800340a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_UART_Transmit+0x38>
 8003320:	2302      	movs	r3, #2
 8003322:	e072      	b.n	800340a <HAL_UART_Transmit+0x11e>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2221      	movs	r2, #33	; 0x21
 8003338:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800333a:	f7fd ffb1 	bl	80012a0 <HAL_GetTick>
 800333e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003358:	d108      	bne.n	800336c <HAL_UART_Transmit+0x80>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d104      	bne.n	800336c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	e003      	b.n	8003374 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800337c:	e02c      	b.n	80033d8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fb7a 	bl	8003a82 <UART_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e038      	b.n	800340a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	3302      	adds	r3, #2
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	e007      	b.n	80033c6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	3301      	adds	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1cc      	bne.n	800337e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2200      	movs	r2, #0
 80033ec:	2140      	movs	r1, #64	; 0x40
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fb47 	bl	8003a82 <UART_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e005      	b.n	800340a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4ba7      	ldr	r3, [pc, #668]	; (80036dc <UART_SetConfig+0x2c8>)
 8003440:	4013      	ands	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	6979      	ldr	r1, [r7, #20]
 8003448:	430b      	orrs	r3, r1
 800344a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a95      	ldr	r2, [pc, #596]	; (80036e0 <UART_SetConfig+0x2cc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d120      	bne.n	80034d2 <UART_SetConfig+0xbe>
 8003490:	4b94      	ldr	r3, [pc, #592]	; (80036e4 <UART_SetConfig+0x2d0>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b03      	cmp	r3, #3
 800349c:	d816      	bhi.n	80034cc <UART_SetConfig+0xb8>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <UART_SetConfig+0x90>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	080034c1 	.word	0x080034c1
 80034ac:	080034bb 	.word	0x080034bb
 80034b0:	080034c7 	.word	0x080034c7
 80034b4:	2301      	movs	r3, #1
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e14f      	b.n	800375a <UART_SetConfig+0x346>
 80034ba:	2302      	movs	r3, #2
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e14c      	b.n	800375a <UART_SetConfig+0x346>
 80034c0:	2304      	movs	r3, #4
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e149      	b.n	800375a <UART_SetConfig+0x346>
 80034c6:	2308      	movs	r3, #8
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e146      	b.n	800375a <UART_SetConfig+0x346>
 80034cc:	2310      	movs	r3, #16
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e143      	b.n	800375a <UART_SetConfig+0x346>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a84      	ldr	r2, [pc, #528]	; (80036e8 <UART_SetConfig+0x2d4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d132      	bne.n	8003542 <UART_SetConfig+0x12e>
 80034dc:	4b81      	ldr	r3, [pc, #516]	; (80036e4 <UART_SetConfig+0x2d0>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d828      	bhi.n	800353c <UART_SetConfig+0x128>
 80034ea:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <UART_SetConfig+0xdc>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	08003525 	.word	0x08003525
 80034f4:	0800353d 	.word	0x0800353d
 80034f8:	0800353d 	.word	0x0800353d
 80034fc:	0800353d 	.word	0x0800353d
 8003500:	08003531 	.word	0x08003531
 8003504:	0800353d 	.word	0x0800353d
 8003508:	0800353d 	.word	0x0800353d
 800350c:	0800353d 	.word	0x0800353d
 8003510:	0800352b 	.word	0x0800352b
 8003514:	0800353d 	.word	0x0800353d
 8003518:	0800353d 	.word	0x0800353d
 800351c:	0800353d 	.word	0x0800353d
 8003520:	08003537 	.word	0x08003537
 8003524:	2300      	movs	r3, #0
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	e117      	b.n	800375a <UART_SetConfig+0x346>
 800352a:	2302      	movs	r3, #2
 800352c:	77fb      	strb	r3, [r7, #31]
 800352e:	e114      	b.n	800375a <UART_SetConfig+0x346>
 8003530:	2304      	movs	r3, #4
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e111      	b.n	800375a <UART_SetConfig+0x346>
 8003536:	2308      	movs	r3, #8
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e10e      	b.n	800375a <UART_SetConfig+0x346>
 800353c:	2310      	movs	r3, #16
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e10b      	b.n	800375a <UART_SetConfig+0x346>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a69      	ldr	r2, [pc, #420]	; (80036ec <UART_SetConfig+0x2d8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d120      	bne.n	800358e <UART_SetConfig+0x17a>
 800354c:	4b65      	ldr	r3, [pc, #404]	; (80036e4 <UART_SetConfig+0x2d0>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003556:	2b30      	cmp	r3, #48	; 0x30
 8003558:	d013      	beq.n	8003582 <UART_SetConfig+0x16e>
 800355a:	2b30      	cmp	r3, #48	; 0x30
 800355c:	d814      	bhi.n	8003588 <UART_SetConfig+0x174>
 800355e:	2b20      	cmp	r3, #32
 8003560:	d009      	beq.n	8003576 <UART_SetConfig+0x162>
 8003562:	2b20      	cmp	r3, #32
 8003564:	d810      	bhi.n	8003588 <UART_SetConfig+0x174>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <UART_SetConfig+0x15c>
 800356a:	2b10      	cmp	r3, #16
 800356c:	d006      	beq.n	800357c <UART_SetConfig+0x168>
 800356e:	e00b      	b.n	8003588 <UART_SetConfig+0x174>
 8003570:	2300      	movs	r3, #0
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e0f1      	b.n	800375a <UART_SetConfig+0x346>
 8003576:	2302      	movs	r3, #2
 8003578:	77fb      	strb	r3, [r7, #31]
 800357a:	e0ee      	b.n	800375a <UART_SetConfig+0x346>
 800357c:	2304      	movs	r3, #4
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e0eb      	b.n	800375a <UART_SetConfig+0x346>
 8003582:	2308      	movs	r3, #8
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e0e8      	b.n	800375a <UART_SetConfig+0x346>
 8003588:	2310      	movs	r3, #16
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e0e5      	b.n	800375a <UART_SetConfig+0x346>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a57      	ldr	r2, [pc, #348]	; (80036f0 <UART_SetConfig+0x2dc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d120      	bne.n	80035da <UART_SetConfig+0x1c6>
 8003598:	4b52      	ldr	r3, [pc, #328]	; (80036e4 <UART_SetConfig+0x2d0>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035a2:	2bc0      	cmp	r3, #192	; 0xc0
 80035a4:	d013      	beq.n	80035ce <UART_SetConfig+0x1ba>
 80035a6:	2bc0      	cmp	r3, #192	; 0xc0
 80035a8:	d814      	bhi.n	80035d4 <UART_SetConfig+0x1c0>
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	d009      	beq.n	80035c2 <UART_SetConfig+0x1ae>
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d810      	bhi.n	80035d4 <UART_SetConfig+0x1c0>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <UART_SetConfig+0x1a8>
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d006      	beq.n	80035c8 <UART_SetConfig+0x1b4>
 80035ba:	e00b      	b.n	80035d4 <UART_SetConfig+0x1c0>
 80035bc:	2300      	movs	r3, #0
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e0cb      	b.n	800375a <UART_SetConfig+0x346>
 80035c2:	2302      	movs	r3, #2
 80035c4:	77fb      	strb	r3, [r7, #31]
 80035c6:	e0c8      	b.n	800375a <UART_SetConfig+0x346>
 80035c8:	2304      	movs	r3, #4
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e0c5      	b.n	800375a <UART_SetConfig+0x346>
 80035ce:	2308      	movs	r3, #8
 80035d0:	77fb      	strb	r3, [r7, #31]
 80035d2:	e0c2      	b.n	800375a <UART_SetConfig+0x346>
 80035d4:	2310      	movs	r3, #16
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e0bf      	b.n	800375a <UART_SetConfig+0x346>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a45      	ldr	r2, [pc, #276]	; (80036f4 <UART_SetConfig+0x2e0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d125      	bne.n	8003630 <UART_SetConfig+0x21c>
 80035e4:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <UART_SetConfig+0x2d0>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f2:	d017      	beq.n	8003624 <UART_SetConfig+0x210>
 80035f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f8:	d817      	bhi.n	800362a <UART_SetConfig+0x216>
 80035fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fe:	d00b      	beq.n	8003618 <UART_SetConfig+0x204>
 8003600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003604:	d811      	bhi.n	800362a <UART_SetConfig+0x216>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <UART_SetConfig+0x1fe>
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d006      	beq.n	800361e <UART_SetConfig+0x20a>
 8003610:	e00b      	b.n	800362a <UART_SetConfig+0x216>
 8003612:	2300      	movs	r3, #0
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e0a0      	b.n	800375a <UART_SetConfig+0x346>
 8003618:	2302      	movs	r3, #2
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e09d      	b.n	800375a <UART_SetConfig+0x346>
 800361e:	2304      	movs	r3, #4
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e09a      	b.n	800375a <UART_SetConfig+0x346>
 8003624:	2308      	movs	r3, #8
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e097      	b.n	800375a <UART_SetConfig+0x346>
 800362a:	2310      	movs	r3, #16
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	e094      	b.n	800375a <UART_SetConfig+0x346>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a30      	ldr	r2, [pc, #192]	; (80036f8 <UART_SetConfig+0x2e4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d125      	bne.n	8003686 <UART_SetConfig+0x272>
 800363a:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <UART_SetConfig+0x2d0>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003648:	d017      	beq.n	800367a <UART_SetConfig+0x266>
 800364a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800364e:	d817      	bhi.n	8003680 <UART_SetConfig+0x26c>
 8003650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003654:	d00b      	beq.n	800366e <UART_SetConfig+0x25a>
 8003656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365a:	d811      	bhi.n	8003680 <UART_SetConfig+0x26c>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <UART_SetConfig+0x254>
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d006      	beq.n	8003674 <UART_SetConfig+0x260>
 8003666:	e00b      	b.n	8003680 <UART_SetConfig+0x26c>
 8003668:	2301      	movs	r3, #1
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e075      	b.n	800375a <UART_SetConfig+0x346>
 800366e:	2302      	movs	r3, #2
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e072      	b.n	800375a <UART_SetConfig+0x346>
 8003674:	2304      	movs	r3, #4
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e06f      	b.n	800375a <UART_SetConfig+0x346>
 800367a:	2308      	movs	r3, #8
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e06c      	b.n	800375a <UART_SetConfig+0x346>
 8003680:	2310      	movs	r3, #16
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e069      	b.n	800375a <UART_SetConfig+0x346>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <UART_SetConfig+0x2e8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d137      	bne.n	8003700 <UART_SetConfig+0x2ec>
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <UART_SetConfig+0x2d0>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800369a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800369e:	d017      	beq.n	80036d0 <UART_SetConfig+0x2bc>
 80036a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036a4:	d817      	bhi.n	80036d6 <UART_SetConfig+0x2c2>
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036aa:	d00b      	beq.n	80036c4 <UART_SetConfig+0x2b0>
 80036ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b0:	d811      	bhi.n	80036d6 <UART_SetConfig+0x2c2>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <UART_SetConfig+0x2aa>
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ba:	d006      	beq.n	80036ca <UART_SetConfig+0x2b6>
 80036bc:	e00b      	b.n	80036d6 <UART_SetConfig+0x2c2>
 80036be:	2300      	movs	r3, #0
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e04a      	b.n	800375a <UART_SetConfig+0x346>
 80036c4:	2302      	movs	r3, #2
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e047      	b.n	800375a <UART_SetConfig+0x346>
 80036ca:	2304      	movs	r3, #4
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e044      	b.n	800375a <UART_SetConfig+0x346>
 80036d0:	2308      	movs	r3, #8
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e041      	b.n	800375a <UART_SetConfig+0x346>
 80036d6:	2310      	movs	r3, #16
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e03e      	b.n	800375a <UART_SetConfig+0x346>
 80036dc:	efff69f3 	.word	0xefff69f3
 80036e0:	40011000 	.word	0x40011000
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40004400 	.word	0x40004400
 80036ec:	40004800 	.word	0x40004800
 80036f0:	40004c00 	.word	0x40004c00
 80036f4:	40005000 	.word	0x40005000
 80036f8:	40011400 	.word	0x40011400
 80036fc:	40007800 	.word	0x40007800
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a71      	ldr	r2, [pc, #452]	; (80038cc <UART_SetConfig+0x4b8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d125      	bne.n	8003756 <UART_SetConfig+0x342>
 800370a:	4b71      	ldr	r3, [pc, #452]	; (80038d0 <UART_SetConfig+0x4bc>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003714:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003718:	d017      	beq.n	800374a <UART_SetConfig+0x336>
 800371a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800371e:	d817      	bhi.n	8003750 <UART_SetConfig+0x33c>
 8003720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003724:	d00b      	beq.n	800373e <UART_SetConfig+0x32a>
 8003726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372a:	d811      	bhi.n	8003750 <UART_SetConfig+0x33c>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <UART_SetConfig+0x324>
 8003730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003734:	d006      	beq.n	8003744 <UART_SetConfig+0x330>
 8003736:	e00b      	b.n	8003750 <UART_SetConfig+0x33c>
 8003738:	2300      	movs	r3, #0
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e00d      	b.n	800375a <UART_SetConfig+0x346>
 800373e:	2302      	movs	r3, #2
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e00a      	b.n	800375a <UART_SetConfig+0x346>
 8003744:	2304      	movs	r3, #4
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e007      	b.n	800375a <UART_SetConfig+0x346>
 800374a:	2308      	movs	r3, #8
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e004      	b.n	800375a <UART_SetConfig+0x346>
 8003750:	2310      	movs	r3, #16
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e001      	b.n	800375a <UART_SetConfig+0x346>
 8003756:	2310      	movs	r3, #16
 8003758:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003762:	d15b      	bne.n	800381c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003764:	7ffb      	ldrb	r3, [r7, #31]
 8003766:	2b08      	cmp	r3, #8
 8003768:	d827      	bhi.n	80037ba <UART_SetConfig+0x3a6>
 800376a:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <UART_SetConfig+0x35c>)
 800376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003770:	08003795 	.word	0x08003795
 8003774:	0800379d 	.word	0x0800379d
 8003778:	080037a5 	.word	0x080037a5
 800377c:	080037bb 	.word	0x080037bb
 8003780:	080037ab 	.word	0x080037ab
 8003784:	080037bb 	.word	0x080037bb
 8003788:	080037bb 	.word	0x080037bb
 800378c:	080037bb 	.word	0x080037bb
 8003790:	080037b3 	.word	0x080037b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7fe fe32 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8003798:	61b8      	str	r0, [r7, #24]
        break;
 800379a:	e013      	b.n	80037c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7fe fe42 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 80037a0:	61b8      	str	r0, [r7, #24]
        break;
 80037a2:	e00f      	b.n	80037c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a4:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <UART_SetConfig+0x4c0>)
 80037a6:	61bb      	str	r3, [r7, #24]
        break;
 80037a8:	e00c      	b.n	80037c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037aa:	f7fe fd39 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80037ae:	61b8      	str	r0, [r7, #24]
        break;
 80037b0:	e008      	b.n	80037c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b6:	61bb      	str	r3, [r7, #24]
        break;
 80037b8:	e004      	b.n	80037c4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	77bb      	strb	r3, [r7, #30]
        break;
 80037c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d074      	beq.n	80038b4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	005a      	lsls	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	b29b      	uxth	r3, r3
 80037e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b0f      	cmp	r3, #15
 80037e6:	d916      	bls.n	8003816 <UART_SetConfig+0x402>
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ee:	d212      	bcs.n	8003816 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f023 030f 	bic.w	r3, r3, #15
 80037f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	b29a      	uxth	r2, r3
 8003806:	89fb      	ldrh	r3, [r7, #14]
 8003808:	4313      	orrs	r3, r2
 800380a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	89fa      	ldrh	r2, [r7, #14]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	e04e      	b.n	80038b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	77bb      	strb	r3, [r7, #30]
 800381a:	e04b      	b.n	80038b4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800381c:	7ffb      	ldrb	r3, [r7, #31]
 800381e:	2b08      	cmp	r3, #8
 8003820:	d827      	bhi.n	8003872 <UART_SetConfig+0x45e>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <UART_SetConfig+0x414>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	0800384d 	.word	0x0800384d
 800382c:	08003855 	.word	0x08003855
 8003830:	0800385d 	.word	0x0800385d
 8003834:	08003873 	.word	0x08003873
 8003838:	08003863 	.word	0x08003863
 800383c:	08003873 	.word	0x08003873
 8003840:	08003873 	.word	0x08003873
 8003844:	08003873 	.word	0x08003873
 8003848:	0800386b 	.word	0x0800386b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7fe fdd6 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8003850:	61b8      	str	r0, [r7, #24]
        break;
 8003852:	e013      	b.n	800387c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003854:	f7fe fde6 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8003858:	61b8      	str	r0, [r7, #24]
        break;
 800385a:	e00f      	b.n	800387c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <UART_SetConfig+0x4c0>)
 800385e:	61bb      	str	r3, [r7, #24]
        break;
 8003860:	e00c      	b.n	800387c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003862:	f7fe fcdd 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8003866:	61b8      	str	r0, [r7, #24]
        break;
 8003868:	e008      	b.n	800387c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800386a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386e:	61bb      	str	r3, [r7, #24]
        break;
 8003870:	e004      	b.n	800387c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	77bb      	strb	r3, [r7, #30]
        break;
 800387a:	bf00      	nop
    }

    if (pclk != 0U)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d018      	beq.n	80038b4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	085a      	lsrs	r2, r3, #1
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	441a      	add	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	b29b      	uxth	r3, r3
 8003896:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b0f      	cmp	r3, #15
 800389c:	d908      	bls.n	80038b0 <UART_SetConfig+0x49c>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d204      	bcs.n	80038b0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	e001      	b.n	80038b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40007c00 	.word	0x40007c00
 80038d0:	40023800 	.word	0x40023800
 80038d4:	00f42400 	.word	0x00f42400

080038d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01a      	beq.n	80039ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d6:	d10a      	bne.n	80039ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
  }
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a2c:	f7fd fc38 	bl	80012a0 <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d10e      	bne.n	8003a5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f817 	bl	8003a82 <UART_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e00d      	b.n	8003a7a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	603b      	str	r3, [r7, #0]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a92:	e05e      	b.n	8003b52 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a9a:	d05a      	beq.n	8003b52 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9c:	f7fd fc00 	bl	80012a0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11b      	bne.n	8003aea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ac0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0201 	bic.w	r2, r2, #1
 8003ad0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e043      	b.n	8003b72 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02c      	beq.n	8003b52 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b06:	d124      	bne.n	8003b52 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e00f      	b.n	8003b72 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d091      	beq.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	f107 001c 	add.w	r0, r7, #28
 8003b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d120      	bne.n	8003bd6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <USB_CoreInit+0xac>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa5a 	bl	8004084 <USB_CoreReset>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	e010      	b.n	8003bf8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fa4e 	bl	8004084 <USB_CoreReset>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d10b      	bne.n	8003c16 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f043 0206 	orr.w	r2, r3, #6
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f043 0220 	orr.w	r2, r3, #32
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c22:	b004      	add	sp, #16
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	ffbdffbf 	.word	0xffbdffbf

08003c2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 0201 	bic.w	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d106      	bne.n	8003c7a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]
 8003c78:	e00b      	b.n	8003c92 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]
 8003c8c:	e001      	b.n	8003c92 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e003      	b.n	8003c9a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003c92:	2032      	movs	r0, #50	; 0x32
 8003c94:	f7fd fb10 	bl	80012b8 <HAL_Delay>

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	e009      	b.n	8003cd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	3340      	adds	r3, #64	; 0x40
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	2200      	movs	r2, #0
 8003cd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	2b0e      	cmp	r3, #14
 8003cdc:	d9f2      	bls.n	8003cc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11c      	bne.n	8003d1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf2:	f043 0302 	orr.w	r3, r3, #2
 8003cf6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e005      	b.n	8003d2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d30:	461a      	mov	r2, r3
 8003d32:	2300      	movs	r3, #0
 8003d34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d44:	461a      	mov	r2, r3
 8003d46:	680b      	ldr	r3, [r1, #0]
 8003d48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d10c      	bne.n	8003d6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d56:	2100      	movs	r1, #0
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f959 	bl	8004010 <USB_SetDevSpeed>
 8003d5e:	e018      	b.n	8003d92 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d60:	2101      	movs	r1, #1
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f954 	bl	8004010 <USB_SetDevSpeed>
 8003d68:	e013      	b.n	8003d92 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d10c      	bne.n	8003d8a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d104      	bne.n	8003d80 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d76:	2100      	movs	r1, #0
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f949 	bl	8004010 <USB_SetDevSpeed>
 8003d7e:	e008      	b.n	8003d92 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d80:	2101      	movs	r1, #1
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f944 	bl	8004010 <USB_SetDevSpeed>
 8003d88:	e003      	b.n	8003d92 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d8a:	2103      	movs	r1, #3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f93f 	bl	8004010 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d92:	2110      	movs	r1, #16
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f8f3 	bl	8003f80 <USB_FlushTxFifo>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f911 	bl	8003fcc <USB_FlushRxFifo>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	e043      	b.n	8003e66 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df4:	d118      	bne.n	8003e28 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	e013      	b.n	8003e3a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e008      	b.n	8003e3a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	461a      	mov	r2, r3
 8003e36:	2300      	movs	r3, #0
 8003e38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e46:	461a      	mov	r2, r3
 8003e48:	2300      	movs	r3, #0
 8003e4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	3301      	adds	r3, #1
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d3b7      	bcc.n	8003dde <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e043      	b.n	8003efc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8a:	d118      	bne.n	8003ebe <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e013      	b.n	8003ed0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	e008      	b.n	8003ed0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	461a      	mov	r2, r3
 8003ede:	2300      	movs	r3, #0
 8003ee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ef4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d3b7      	bcc.n	8003e74 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f043 0210 	orr.w	r2, r3, #16
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <USB_DevInit+0x2d4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f043 0208 	orr.w	r2, r3, #8
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699a      	ldr	r2, [r3, #24]
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <USB_DevInit+0x2d8>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f74:	b004      	add	sp, #16
 8003f76:	4770      	bx	lr
 8003f78:	803c3800 	.word	0x803c3800
 8003f7c:	40000004 	.word	0x40000004

08003f80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	019b      	lsls	r3, r3, #6
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <USB_FlushTxFifo+0x48>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e006      	b.n	8003fba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d0f0      	beq.n	8003f9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	00030d40 	.word	0x00030d40

08003fcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2210      	movs	r2, #16
 8003fdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <USB_FlushRxFifo+0x40>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e006      	b.n	8003ffe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d0f0      	beq.n	8003fde <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	00030d40 	.word	0x00030d40

08004010 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800405c:	f023 0303 	bic.w	r3, r3, #3
 8004060:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004070:	f043 0302 	orr.w	r3, r3, #2
 8004074:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <USB_CoreReset+0x64>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e01b      	b.n	80040da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	daf2      	bge.n	8004090 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <USB_CoreReset+0x64>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e006      	b.n	80040da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d0f0      	beq.n	80040ba <USB_CoreReset+0x36>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	00030d40 	.word	0x00030d40

080040ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004102:	f3ef 8305 	mrs	r3, IPSR
 8004106:	60bb      	str	r3, [r7, #8]
  return(result);
 8004108:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10f      	bne.n	800412e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410e:	f3ef 8310 	mrs	r3, PRIMASK
 8004112:	607b      	str	r3, [r7, #4]
  return(result);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d105      	bne.n	8004126 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800411a:	f3ef 8311 	mrs	r3, BASEPRI
 800411e:	603b      	str	r3, [r7, #0]
  return(result);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <osKernelInitialize+0x3a>
 8004126:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <osKernelInitialize+0x64>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d103      	bne.n	8004136 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800412e:	f06f 0305 	mvn.w	r3, #5
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e00c      	b.n	8004150 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <osKernelInitialize+0x64>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <osKernelInitialize+0x64>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e002      	b.n	8004150 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800414a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800414e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004150:	68fb      	ldr	r3, [r7, #12]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	200000a0 	.word	0x200000a0

08004164 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800416a:	f3ef 8305 	mrs	r3, IPSR
 800416e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004170:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10f      	bne.n	8004196 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004176:	f3ef 8310 	mrs	r3, PRIMASK
 800417a:	607b      	str	r3, [r7, #4]
  return(result);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004182:	f3ef 8311 	mrs	r3, BASEPRI
 8004186:	603b      	str	r3, [r7, #0]
  return(result);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <osKernelStart+0x3a>
 800418e:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <osKernelStart+0x68>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d103      	bne.n	800419e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004196:	f06f 0305 	mvn.w	r3, #5
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e010      	b.n	80041c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <osKernelStart+0x68>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d109      	bne.n	80041ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80041a6:	f7ff ffa1 	bl	80040ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <osKernelStart+0x68>)
 80041ac:	2202      	movs	r2, #2
 80041ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80041b0:	f002 fac2 	bl	8006738 <vTaskStartScheduler>
      stat = osOK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e002      	b.n	80041c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041c0:	68fb      	ldr	r3, [r7, #12]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	200000a0 	.word	0x200000a0

080041d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b090      	sub	sp, #64	; 0x40
 80041d4:	af04      	add	r7, sp, #16
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041e0:	f3ef 8305 	mrs	r3, IPSR
 80041e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80041e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 808f 	bne.w	800430c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ee:	f3ef 8310 	mrs	r3, PRIMASK
 80041f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041fa:	f3ef 8311 	mrs	r3, BASEPRI
 80041fe:	617b      	str	r3, [r7, #20]
  return(result);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <osThreadNew+0x3e>
 8004206:	4b44      	ldr	r3, [pc, #272]	; (8004318 <osThreadNew+0x148>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d07e      	beq.n	800430c <osThreadNew+0x13c>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d07b      	beq.n	800430c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004218:	2318      	movs	r3, #24
 800421a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800421c:	2300      	movs	r3, #0
 800421e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004224:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d045      	beq.n	80042b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <osThreadNew+0x6a>
        name = attr->name;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <osThreadNew+0x90>
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	2b38      	cmp	r3, #56	; 0x38
 8004252:	d805      	bhi.n	8004260 <osThreadNew+0x90>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <osThreadNew+0x94>
        return (NULL);
 8004260:	2300      	movs	r3, #0
 8004262:	e054      	b.n	800430e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	089b      	lsrs	r3, r3, #2
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00e      	beq.n	800429a <osThreadNew+0xca>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b5b      	cmp	r3, #91	; 0x5b
 8004282:	d90a      	bls.n	800429a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004288:	2b00      	cmp	r3, #0
 800428a:	d006      	beq.n	800429a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <osThreadNew+0xca>
        mem = 1;
 8004294:	2301      	movs	r3, #1
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	e010      	b.n	80042bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10c      	bne.n	80042bc <osThreadNew+0xec>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <osThreadNew+0xec>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <osThreadNew+0xec>
          mem = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	623b      	str	r3, [r7, #32]
 80042b6:	e001      	b.n	80042bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d110      	bne.n	80042e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042ca:	9202      	str	r2, [sp, #8]
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f001 fecd 	bl	8006078 <xTaskCreateStatic>
 80042de:	4603      	mov	r3, r0
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	e013      	b.n	800430c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d110      	bne.n	800430c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	f107 0310 	add.w	r3, r7, #16
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f001 ff1e 	bl	800613e <xTaskCreate>
 8004302:	4603      	mov	r3, r0
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <osThreadNew+0x13c>
          hTask = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800430c:	693b      	ldr	r3, [r7, #16]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3730      	adds	r7, #48	; 0x30
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200000a0 	.word	0x200000a0

0800431c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8004322:	f002 fe67 	bl	8006ff4 <xTaskGetCurrentTaskHandle>
 8004326:	6078      	str	r0, [r7, #4]

  return (id);
 8004328:	687b      	ldr	r3, [r7, #4]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004340:	f3ef 8305 	mrs	r3, IPSR
 8004344:	617b      	str	r3, [r7, #20]
  return(result);
 8004346:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10f      	bne.n	800436c <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800434c:	f3ef 8310 	mrs	r3, PRIMASK
 8004350:	613b      	str	r3, [r7, #16]
  return(result);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004358:	f3ef 8311 	mrs	r3, BASEPRI
 800435c:	60fb      	str	r3, [r7, #12]
  return(result);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d007      	beq.n	8004374 <osThreadSuspend+0x40>
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <osThreadSuspend+0x64>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d103      	bne.n	8004374 <osThreadSuspend+0x40>
    stat = osErrorISR;
 800436c:	f06f 0305 	mvn.w	r3, #5
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	e00b      	b.n	800438c <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 800437a:	f06f 0303 	mvn.w	r3, #3
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e004      	b.n	800438c <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8004386:	69b8      	ldr	r0, [r7, #24]
 8004388:	f002 f8ca 	bl	8006520 <vTaskSuspend>
  }

  return (stat);
 800438c:	69fb      	ldr	r3, [r7, #28]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200000a0 	.word	0x200000a0

0800439c <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a8:	f3ef 8305 	mrs	r3, IPSR
 80043ac:	617b      	str	r3, [r7, #20]
  return(result);
 80043ae:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10f      	bne.n	80043d4 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b4:	f3ef 8310 	mrs	r3, PRIMASK
 80043b8:	613b      	str	r3, [r7, #16]
  return(result);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043c0:	f3ef 8311 	mrs	r3, BASEPRI
 80043c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <osThreadResume+0x40>
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <osThreadResume+0x64>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d103      	bne.n	80043dc <osThreadResume+0x40>
    stat = osErrorISR;
 80043d4:	f06f 0305 	mvn.w	r3, #5
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	e00b      	b.n	80043f4 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <osThreadResume+0x4e>
    stat = osErrorParameter;
 80043e2:	f06f 0303 	mvn.w	r3, #3
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	e004      	b.n	80043f4 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 80043ee:	69b8      	ldr	r0, [r7, #24]
 80043f0:	f002 f942 	bl	8006678 <vTaskResume>
  }

  return (stat);
 80043f4:	69fb      	ldr	r3, [r7, #28]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200000a0 	.word	0x200000a0

08004404 <osThreadExit>:

__NO_RETURN void osThreadExit (void) {
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8004408:	2000      	movs	r0, #0
 800440a:	f001 ffdf 	bl	80063cc <vTaskDelete>
#endif
  for (;;);
 800440e:	e7fe      	b.n	800440e <osThreadExit+0xa>

08004410 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004418:	f3ef 8305 	mrs	r3, IPSR
 800441c:	613b      	str	r3, [r7, #16]
  return(result);
 800441e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10f      	bne.n	8004444 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004424:	f3ef 8310 	mrs	r3, PRIMASK
 8004428:	60fb      	str	r3, [r7, #12]
  return(result);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004430:	f3ef 8311 	mrs	r3, BASEPRI
 8004434:	60bb      	str	r3, [r7, #8]
  return(result);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <osDelay+0x3c>
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <osDelay+0x58>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d103      	bne.n	800444c <osDelay+0x3c>
    stat = osErrorISR;
 8004444:	f06f 0305 	mvn.w	r3, #5
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	e007      	b.n	800445c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f002 f82c 	bl	80064b4 <vTaskDelay>
    }
  }

  return (stat);
 800445c:	697b      	ldr	r3, [r7, #20]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	200000a0 	.word	0x200000a0

0800446c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004474:	2300      	movs	r3, #0
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004478:	f3ef 8305 	mrs	r3, IPSR
 800447c:	613b      	str	r3, [r7, #16]
  return(result);
 800447e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004480:	2b00      	cmp	r3, #0
 8004482:	f040 8085 	bne.w	8004590 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004486:	f3ef 8310 	mrs	r3, PRIMASK
 800448a:	60fb      	str	r3, [r7, #12]
  return(result);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004492:	f3ef 8311 	mrs	r3, BASEPRI
 8004496:	60bb      	str	r3, [r7, #8]
  return(result);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <osMutexNew+0x3a>
 800449e:	4b3f      	ldr	r3, [pc, #252]	; (800459c <osMutexNew+0x130>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d074      	beq.n	8004590 <osMutexNew+0x124>
    if (attr != NULL) {
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <osMutexNew+0x48>
      type = attr->attr_bits;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	623b      	str	r3, [r7, #32]
 80044b2:	e001      	b.n	80044b8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <osMutexNew+0x5c>
      rmtx = 1U;
 80044c2:	2301      	movs	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	e001      	b.n	80044cc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d15c      	bne.n	8004590 <osMutexNew+0x124>
      mem = -1;
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044da:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d015      	beq.n	800450e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d006      	beq.n	80044f8 <osMutexNew+0x8c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b4f      	cmp	r3, #79	; 0x4f
 80044f0:	d902      	bls.n	80044f8 <osMutexNew+0x8c>
          mem = 1;
 80044f2:	2301      	movs	r3, #1
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e00c      	b.n	8004512 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d108      	bne.n	8004512 <osMutexNew+0xa6>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <osMutexNew+0xa6>
            mem = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	e001      	b.n	8004512 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d112      	bne.n	800453e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4619      	mov	r1, r3
 8004524:	2004      	movs	r0, #4
 8004526:	f000 fe1a 	bl	800515e <xQueueCreateMutexStatic>
 800452a:	6278      	str	r0, [r7, #36]	; 0x24
 800452c:	e016      	b.n	800455c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4619      	mov	r1, r3
 8004534:	2001      	movs	r0, #1
 8004536:	f000 fe12 	bl	800515e <xQueueCreateMutexStatic>
 800453a:	6278      	str	r0, [r7, #36]	; 0x24
 800453c:	e00e      	b.n	800455c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800454a:	2004      	movs	r0, #4
 800454c:	f000 fdef 	bl	800512e <xQueueCreateMutex>
 8004550:	6278      	str	r0, [r7, #36]	; 0x24
 8004552:	e003      	b.n	800455c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004554:	2001      	movs	r0, #1
 8004556:	f000 fdea 	bl	800512e <xQueueCreateMutex>
 800455a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <osMutexNew+0x110>
        if (attr != NULL) {
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <osMutexNew+0x104>
          name = attr->name;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e001      	b.n	8004574 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004578:	f001 fcf6 	bl	8005f68 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	2b00      	cmp	r3, #0
 8004580:	d006      	beq.n	8004590 <osMutexNew+0x124>
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004592:	4618      	mov	r0, r3
 8004594:	3728      	adds	r7, #40	; 0x28
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200000a0 	.word	0x200000a0

080045a0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045be:	f3ef 8305 	mrs	r3, IPSR
 80045c2:	613b      	str	r3, [r7, #16]
  return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ca:	f3ef 8310 	mrs	r3, PRIMASK
 80045ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d105      	bne.n	80045e2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045d6:	f3ef 8311 	mrs	r3, BASEPRI
 80045da:	60bb      	str	r3, [r7, #8]
  return(result);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d007      	beq.n	80045f2 <osMutexAcquire+0x52>
 80045e2:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <osMutexAcquire+0xb8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d103      	bne.n	80045f2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80045ea:	f06f 0305 	mvn.w	r3, #5
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	e02c      	b.n	800464c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80045f8:	f06f 0303 	mvn.w	r3, #3
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e025      	b.n	800464c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d011      	beq.n	800462a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004606:	6839      	ldr	r1, [r7, #0]
 8004608:	69b8      	ldr	r0, [r7, #24]
 800460a:	f000 fdf9 	bl	8005200 <xQueueTakeMutexRecursive>
 800460e:	4603      	mov	r3, r0
 8004610:	2b01      	cmp	r3, #1
 8004612:	d01b      	beq.n	800464c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800461a:	f06f 0301 	mvn.w	r3, #1
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	e014      	b.n	800464c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004622:	f06f 0302 	mvn.w	r3, #2
 8004626:	61fb      	str	r3, [r7, #28]
 8004628:	e010      	b.n	800464c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800462a:	6839      	ldr	r1, [r7, #0]
 800462c:	69b8      	ldr	r0, [r7, #24]
 800462e:	f001 f9b3 	bl	8005998 <xQueueSemaphoreTake>
 8004632:	4603      	mov	r3, r0
 8004634:	2b01      	cmp	r3, #1
 8004636:	d009      	beq.n	800464c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800463e:	f06f 0301 	mvn.w	r3, #1
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	e002      	b.n	800464c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004646:	f06f 0302 	mvn.w	r3, #2
 800464a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800464c:	69fb      	ldr	r3, [r7, #28]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200000a0 	.word	0x200000a0

0800465c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004678:	f3ef 8305 	mrs	r3, IPSR
 800467c:	613b      	str	r3, [r7, #16]
  return(result);
 800467e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10f      	bne.n	80046a4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004684:	f3ef 8310 	mrs	r3, PRIMASK
 8004688:	60fb      	str	r3, [r7, #12]
  return(result);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004690:	f3ef 8311 	mrs	r3, BASEPRI
 8004694:	60bb      	str	r3, [r7, #8]
  return(result);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <osMutexRelease+0x50>
 800469c:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <osMutexRelease+0x9c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d103      	bne.n	80046ac <osMutexRelease+0x50>
    stat = osErrorISR;
 80046a4:	f06f 0305 	mvn.w	r3, #5
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	e01f      	b.n	80046ec <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80046b2:	f06f 0303 	mvn.w	r3, #3
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	e018      	b.n	80046ec <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80046c0:	69b8      	ldr	r0, [r7, #24]
 80046c2:	f000 fd67 	bl	8005194 <xQueueGiveMutexRecursive>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d00f      	beq.n	80046ec <osMutexRelease+0x90>
        stat = osErrorResource;
 80046cc:	f06f 0302 	mvn.w	r3, #2
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	e00b      	b.n	80046ec <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80046d4:	2300      	movs	r3, #0
 80046d6:	2200      	movs	r2, #0
 80046d8:	2100      	movs	r1, #0
 80046da:	69b8      	ldr	r0, [r7, #24]
 80046dc:	f000 fe3a 	bl	8005354 <xQueueGenericSend>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d002      	beq.n	80046ec <osMutexRelease+0x90>
        stat = osErrorResource;
 80046e6:	f06f 0302 	mvn.w	r3, #2
 80046ea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80046ec:	69fb      	ldr	r3, [r7, #28]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200000a0 	.word	0x200000a0

080046fc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08c      	sub	sp, #48	; 0x30
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800470c:	f3ef 8305 	mrs	r3, IPSR
 8004710:	61bb      	str	r3, [r7, #24]
  return(result);
 8004712:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 8086 	bne.w	8004826 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471a:	f3ef 8310 	mrs	r3, PRIMASK
 800471e:	617b      	str	r3, [r7, #20]
  return(result);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d105      	bne.n	8004732 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004726:	f3ef 8311 	mrs	r3, BASEPRI
 800472a:	613b      	str	r3, [r7, #16]
  return(result);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <osSemaphoreNew+0x3e>
 8004732:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <osSemaphoreNew+0x134>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d075      	beq.n	8004826 <osSemaphoreNew+0x12a>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d072      	beq.n	8004826 <osSemaphoreNew+0x12a>
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	429a      	cmp	r2, r3
 8004746:	d86e      	bhi.n	8004826 <osSemaphoreNew+0x12a>
    mem = -1;
 8004748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800474c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d015      	beq.n	8004780 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d006      	beq.n	800476a <osSemaphoreNew+0x6e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b4f      	cmp	r3, #79	; 0x4f
 8004762:	d902      	bls.n	800476a <osSemaphoreNew+0x6e>
        mem = 1;
 8004764:	2301      	movs	r3, #1
 8004766:	623b      	str	r3, [r7, #32]
 8004768:	e00c      	b.n	8004784 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d108      	bne.n	8004784 <osSemaphoreNew+0x88>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <osSemaphoreNew+0x88>
          mem = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	e001      	b.n	8004784 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800478a:	d04c      	beq.n	8004826 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d128      	bne.n	80047e4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10a      	bne.n	80047ae <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2203      	movs	r2, #3
 800479e:	9200      	str	r2, [sp, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2100      	movs	r1, #0
 80047a4:	2001      	movs	r0, #1
 80047a6:	f000 fbc1 	bl	8004f2c <xQueueGenericCreateStatic>
 80047aa:	6278      	str	r0, [r7, #36]	; 0x24
 80047ac:	e005      	b.n	80047ba <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80047ae:	2203      	movs	r2, #3
 80047b0:	2100      	movs	r1, #0
 80047b2:	2001      	movs	r0, #1
 80047b4:	f000 fc3c 	bl	8005030 <xQueueGenericCreate>
 80047b8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d022      	beq.n	8004806 <osSemaphoreNew+0x10a>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d01f      	beq.n	8004806 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80047c6:	2300      	movs	r3, #0
 80047c8:	2200      	movs	r2, #0
 80047ca:	2100      	movs	r1, #0
 80047cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047ce:	f000 fdc1 	bl	8005354 <xQueueGenericSend>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d016      	beq.n	8004806 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80047d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047da:	f001 fa77 	bl	8005ccc <vQueueDelete>
            hSemaphore = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
 80047e2:	e010      	b.n	8004806 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d108      	bne.n	80047fc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	461a      	mov	r2, r3
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fd3c 	bl	8005270 <xQueueCreateCountingSemaphoreStatic>
 80047f8:	6278      	str	r0, [r7, #36]	; 0x24
 80047fa:	e004      	b.n	8004806 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fd71 	bl	80052e6 <xQueueCreateCountingSemaphore>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00c      	beq.n	8004826 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <osSemaphoreNew+0x11e>
          name = attr->name;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	e001      	b.n	800481e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800481e:	69f9      	ldr	r1, [r7, #28]
 8004820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004822:	f001 fba1 	bl	8005f68 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004828:	4618      	mov	r0, r3
 800482a:	3728      	adds	r7, #40	; 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	200000a0 	.word	0x200000a0

08004834 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d103      	bne.n	8004854 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800484c:	f06f 0303 	mvn.w	r3, #3
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e04b      	b.n	80048ec <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004854:	f3ef 8305 	mrs	r3, IPSR
 8004858:	617b      	str	r3, [r7, #20]
  return(result);
 800485a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10f      	bne.n	8004880 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004860:	f3ef 8310 	mrs	r3, PRIMASK
 8004864:	613b      	str	r3, [r7, #16]
  return(result);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800486c:	f3ef 8311 	mrs	r3, BASEPRI
 8004870:	60fb      	str	r3, [r7, #12]
  return(result);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d026      	beq.n	80048c6 <osSemaphoreAcquire+0x92>
 8004878:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <osSemaphoreAcquire+0xc4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d122      	bne.n	80048c6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004886:	f06f 0303 	mvn.w	r3, #3
 800488a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800488c:	e02d      	b.n	80048ea <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004892:	f107 0308 	add.w	r3, r7, #8
 8004896:	461a      	mov	r2, r3
 8004898:	2100      	movs	r1, #0
 800489a:	69b8      	ldr	r0, [r7, #24]
 800489c:	f001 f990 	bl	8005bc0 <xQueueReceiveFromISR>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d003      	beq.n	80048ae <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80048a6:	f06f 0302 	mvn.w	r3, #2
 80048aa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80048ac:	e01d      	b.n	80048ea <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01a      	beq.n	80048ea <osSemaphoreAcquire+0xb6>
 80048b4:	4b11      	ldr	r3, [pc, #68]	; (80048fc <osSemaphoreAcquire+0xc8>)
 80048b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80048c4:	e011      	b.n	80048ea <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80048c6:	6839      	ldr	r1, [r7, #0]
 80048c8:	69b8      	ldr	r0, [r7, #24]
 80048ca:	f001 f865 	bl	8005998 <xQueueSemaphoreTake>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d00b      	beq.n	80048ec <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80048da:	f06f 0301 	mvn.w	r3, #1
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	e004      	b.n	80048ec <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80048e2:	f06f 0302 	mvn.w	r3, #2
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e000      	b.n	80048ec <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80048ea:	bf00      	nop
      }
    }
  }

  return (stat);
 80048ec:	69fb      	ldr	r3, [r7, #28]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200000a0 	.word	0x200000a0
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800490c:	2300      	movs	r3, #0
 800490e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004916:	f06f 0303 	mvn.w	r3, #3
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	e03e      	b.n	800499c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800491e:	f3ef 8305 	mrs	r3, IPSR
 8004922:	617b      	str	r3, [r7, #20]
  return(result);
 8004924:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10f      	bne.n	800494a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492a:	f3ef 8310 	mrs	r3, PRIMASK
 800492e:	613b      	str	r3, [r7, #16]
  return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004936:	f3ef 8311 	mrs	r3, BASEPRI
 800493a:	60fb      	str	r3, [r7, #12]
  return(result);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01e      	beq.n	8004980 <osSemaphoreRelease+0x80>
 8004942:	4b19      	ldr	r3, [pc, #100]	; (80049a8 <osSemaphoreRelease+0xa8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d11a      	bne.n	8004980 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800494e:	f107 0308 	add.w	r3, r7, #8
 8004952:	4619      	mov	r1, r3
 8004954:	69b8      	ldr	r0, [r7, #24]
 8004956:	f000 fea3 	bl	80056a0 <xQueueGiveFromISR>
 800495a:	4603      	mov	r3, r0
 800495c:	2b01      	cmp	r3, #1
 800495e:	d003      	beq.n	8004968 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004960:	f06f 0302 	mvn.w	r3, #2
 8004964:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004966:	e018      	b.n	800499a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d015      	beq.n	800499a <osSemaphoreRelease+0x9a>
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <osSemaphoreRelease+0xac>)
 8004970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800497e:	e00c      	b.n	800499a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004980:	2300      	movs	r3, #0
 8004982:	2200      	movs	r2, #0
 8004984:	2100      	movs	r1, #0
 8004986:	69b8      	ldr	r0, [r7, #24]
 8004988:	f000 fce4 	bl	8005354 <xQueueGenericSend>
 800498c:	4603      	mov	r3, r0
 800498e:	2b01      	cmp	r3, #1
 8004990:	d004      	beq.n	800499c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004992:	f06f 0302 	mvn.w	r3, #2
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	e000      	b.n	800499c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800499a:	bf00      	nop
    }
  }

  return (stat);
 800499c:	69fb      	ldr	r3, [r7, #28]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	200000a0 	.word	0x200000a0
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08c      	sub	sp, #48	; 0x30
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c0:	f3ef 8305 	mrs	r3, IPSR
 80049c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80049c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d16f      	bne.n	8004aac <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049cc:	f3ef 8310 	mrs	r3, PRIMASK
 80049d0:	617b      	str	r3, [r7, #20]
  return(result);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049d8:	f3ef 8311 	mrs	r3, BASEPRI
 80049dc:	613b      	str	r3, [r7, #16]
  return(result);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <osMessageQueueNew+0x3c>
 80049e4:	4b34      	ldr	r3, [pc, #208]	; (8004ab8 <osMessageQueueNew+0x108>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d05f      	beq.n	8004aac <osMessageQueueNew+0xfc>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d05c      	beq.n	8004aac <osMessageQueueNew+0xfc>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d059      	beq.n	8004aac <osMessageQueueNew+0xfc>
    mem = -1;
 80049f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d029      	beq.n	8004a58 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d012      	beq.n	8004a32 <osMessageQueueNew+0x82>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b4f      	cmp	r3, #79	; 0x4f
 8004a12:	d90e      	bls.n	8004a32 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <osMessageQueueNew+0x82>
        mem = 1;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	623b      	str	r3, [r7, #32]
 8004a30:	e014      	b.n	8004a5c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d110      	bne.n	8004a5c <osMessageQueueNew+0xac>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10c      	bne.n	8004a5c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d108      	bne.n	8004a5c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <osMessageQueueNew+0xac>
          mem = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	623b      	str	r3, [r7, #32]
 8004a56:	e001      	b.n	8004a5c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d10b      	bne.n	8004a7a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	9100      	str	r1, [sp, #0]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fa5b 	bl	8004f2c <xQueueGenericCreateStatic>
 8004a76:	6278      	str	r0, [r7, #36]	; 0x24
 8004a78:	e008      	b.n	8004a8c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004a80:	2200      	movs	r2, #0
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fad3 	bl	8005030 <xQueueGenericCreate>
 8004a8a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00c      	beq.n	8004aac <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	e001      	b.n	8004aa4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004aa4:	69f9      	ldr	r1, [r7, #28]
 8004aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aa8:	f001 fa5e 	bl	8005f68 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3728      	adds	r7, #40	; 0x28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200000a0 	.word	0x200000a0

08004abc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ad4:	f3ef 8305 	mrs	r3, IPSR
 8004ad8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ada:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10f      	bne.n	8004b00 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aec:	f3ef 8311 	mrs	r3, BASEPRI
 8004af0:	617b      	str	r3, [r7, #20]
  return(result);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02c      	beq.n	8004b52 <osMessageQueuePut+0x96>
 8004af8:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <osMessageQueuePut+0xe0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d128      	bne.n	8004b52 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <osMessageQueuePut+0x56>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <osMessageQueuePut+0x56>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004b12:	f06f 0303 	mvn.w	r3, #3
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b18:	e039      	b.n	8004b8e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004b1e:	f107 0210 	add.w	r2, r7, #16
 8004b22:	2300      	movs	r3, #0
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	6a38      	ldr	r0, [r7, #32]
 8004b28:	f000 fd1a 	bl	8005560 <xQueueGenericSendFromISR>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d003      	beq.n	8004b3a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004b32:	f06f 0302 	mvn.w	r3, #2
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b38:	e029      	b.n	8004b8e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d026      	beq.n	8004b8e <osMessageQueuePut+0xd2>
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <osMessageQueuePut+0xe4>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b50:	e01d      	b.n	8004b8e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <osMessageQueuePut+0xa2>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004b5e:	f06f 0303 	mvn.w	r3, #3
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	e014      	b.n	8004b90 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b66:	2300      	movs	r3, #0
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	6a38      	ldr	r0, [r7, #32]
 8004b6e:	f000 fbf1 	bl	8005354 <xQueueGenericSend>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d00b      	beq.n	8004b90 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004b7e:	f06f 0301 	mvn.w	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
 8004b84:	e004      	b.n	8004b90 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004b86:	f06f 0302 	mvn.w	r3, #2
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8c:	e000      	b.n	8004b90 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b8e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3728      	adds	r7, #40	; 0x28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200000a0 	.word	0x200000a0
 8004ba0:	e000ed04 	.word	0xe000ed04

08004ba4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bba:	f3ef 8305 	mrs	r3, IPSR
 8004bbe:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bc0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10f      	bne.n	8004be6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bca:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d105      	bne.n	8004bde <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd6:	617b      	str	r3, [r7, #20]
  return(result);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d02c      	beq.n	8004c38 <osMessageQueueGet+0x94>
 8004bde:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <osMessageQueueGet+0xdc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d128      	bne.n	8004c38 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <osMessageQueueGet+0x54>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <osMessageQueueGet+0x54>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004bf8:	f06f 0303 	mvn.w	r3, #3
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bfe:	e038      	b.n	8004c72 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004c04:	f107 0310 	add.w	r3, r7, #16
 8004c08:	461a      	mov	r2, r3
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	6a38      	ldr	r0, [r7, #32]
 8004c0e:	f000 ffd7 	bl	8005bc0 <xQueueReceiveFromISR>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d003      	beq.n	8004c20 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004c18:	f06f 0302 	mvn.w	r3, #2
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c1e:	e028      	b.n	8004c72 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d025      	beq.n	8004c72 <osMessageQueueGet+0xce>
 8004c26:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <osMessageQueueGet+0xe0>)
 8004c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c36:	e01c      	b.n	8004c72 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <osMessageQueueGet+0xa0>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d103      	bne.n	8004c4c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004c44:	f06f 0303 	mvn.w	r3, #3
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	e013      	b.n	8004c74 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	6a38      	ldr	r0, [r7, #32]
 8004c52:	f000 fdbb 	bl	80057cc <xQueueReceive>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d00b      	beq.n	8004c74 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004c62:	f06f 0301 	mvn.w	r3, #1
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	e004      	b.n	8004c74 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004c6a:	f06f 0302 	mvn.w	r3, #2
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	e000      	b.n	8004c74 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c72:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3728      	adds	r7, #40	; 0x28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	200000a0 	.word	0x200000a0
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4a06      	ldr	r2, [pc, #24]	; (8004cb8 <vApplicationGetIdleTaskMemory+0x30>)
 8004c9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2280      	movs	r2, #128	; 0x80
 8004ca4:	601a      	str	r2, [r3, #0]
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	200000a4 	.word	0x200000a4
 8004cb8:	20000100 	.word	0x20000100

08004cbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a07      	ldr	r2, [pc, #28]	; (8004ce8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ccc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4a06      	ldr	r2, [pc, #24]	; (8004cec <vApplicationGetTimerTaskMemory+0x30>)
 8004cd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cda:	601a      	str	r2, [r3, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	20000300 	.word	0x20000300
 8004cec:	2000035c 	.word	0x2000035c

08004cf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f103 0208 	add.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f103 0208 	add.w	r2, r3, #8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f103 0208 	add.w	r2, r3, #8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da8:	d103      	bne.n	8004db2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e00c      	b.n	8004dcc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3308      	adds	r3, #8
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	e002      	b.n	8004dc0 <vListInsert+0x2e>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d2f6      	bcs.n	8004dba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6892      	ldr	r2, [r2, #8]
 8004e1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6852      	ldr	r2, [r2, #4]
 8004e24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d103      	bne.n	8004e38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	1e5a      	subs	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10c      	bne.n	8004e86 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	b672      	cpsid	i
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	b662      	cpsie	i
 8004e80:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004e86:	f002 ff11 	bl	8007cac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	441a      	add	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	68f9      	ldr	r1, [r7, #12]
 8004eba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	441a      	add	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	22ff      	movs	r2, #255	; 0xff
 8004eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	22ff      	movs	r2, #255	; 0xff
 8004ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d114      	bne.n	8004f06 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01a      	beq.n	8004f1a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3310      	adds	r3, #16
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 febd 	bl	8006c68 <xTaskRemoveFromEventList>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d012      	beq.n	8004f1a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <xQueueGenericReset+0xd0>)
 8004ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	e009      	b.n	8004f1a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3310      	adds	r3, #16
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff fef0 	bl	8004cf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3324      	adds	r3, #36	; 0x24
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff feeb 	bl	8004cf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f1a:	f002 fefb 	bl	8007d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f1e:	2301      	movs	r3, #1
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08e      	sub	sp, #56	; 0x38
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10c      	bne.n	8004f5a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	b672      	cpsid	i
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	b662      	cpsie	i
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10c      	bne.n	8004f7a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	b672      	cpsid	i
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	b662      	cpsie	i
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <xQueueGenericCreateStatic+0x5a>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <xQueueGenericCreateStatic+0x5e>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <xQueueGenericCreateStatic+0x60>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10c      	bne.n	8004faa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	b672      	cpsid	i
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	b662      	cpsie	i
 8004fa4:	623b      	str	r3, [r7, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <xQueueGenericCreateStatic+0x8a>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <xQueueGenericCreateStatic+0x8e>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <xQueueGenericCreateStatic+0x90>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10c      	bne.n	8004fda <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	b672      	cpsid	i
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	b662      	cpsie	i
 8004fd4:	61fb      	str	r3, [r7, #28]
}
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fda:	2350      	movs	r3, #80	; 0x50
 8004fdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b50      	cmp	r3, #80	; 0x50
 8004fe2:	d00c      	beq.n	8004ffe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	b672      	cpsid	i
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	b662      	cpsie	i
 8004ff8:	61bb      	str	r3, [r7, #24]
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ffe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00d      	beq.n	8005026 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005012:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	4613      	mov	r3, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f847 	bl	80050b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005028:	4618      	mov	r0, r3
 800502a:	3730      	adds	r7, #48	; 0x30
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10c      	bne.n	800505e <xQueueGenericCreate+0x2e>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	b672      	cpsid	i
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	b662      	cpsie	i
 8005058:	613b      	str	r3, [r7, #16]
}
 800505a:	bf00      	nop
 800505c:	e7fe      	b.n	800505c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	e004      	b.n	8005074 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3350      	adds	r3, #80	; 0x50
 8005078:	4618      	mov	r0, r3
 800507a:	f002 ff43 	bl	8007f04 <pvPortMalloc>
 800507e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d011      	beq.n	80050aa <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	3350      	adds	r3, #80	; 0x50
 800508e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005098:	79fa      	ldrb	r2, [r7, #7]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	4613      	mov	r3, r2
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f805 	bl	80050b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050aa:	69bb      	ldr	r3, [r7, #24]
	}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e002      	b.n	80050d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050e2:	2101      	movs	r1, #1
 80050e4:	69b8      	ldr	r0, [r7, #24]
 80050e6:	f7ff feb7 	bl	8004e58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00e      	beq.n	8005126 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800511a:	2300      	movs	r3, #0
 800511c:	2200      	movs	r2, #0
 800511e:	2100      	movs	r1, #0
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f917 	bl	8005354 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	4603      	mov	r3, r0
 8005136:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005138:	2301      	movs	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	461a      	mov	r2, r3
 8005144:	6939      	ldr	r1, [r7, #16]
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff ff72 	bl	8005030 <xQueueGenericCreate>
 800514c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff ffd3 	bl	80050fa <prvInitialiseMutex>

		return xNewQueue;
 8005154:	68fb      	ldr	r3, [r7, #12]
	}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800515e:	b580      	push	{r7, lr}
 8005160:	b088      	sub	sp, #32
 8005162:	af02      	add	r7, sp, #8
 8005164:	4603      	mov	r3, r0
 8005166:	6039      	str	r1, [r7, #0]
 8005168:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800516a:	2301      	movs	r3, #1
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2200      	movs	r2, #0
 800517a:	6939      	ldr	r1, [r7, #16]
 800517c:	6978      	ldr	r0, [r7, #20]
 800517e:	f7ff fed5 	bl	8004f2c <xQueueGenericCreateStatic>
 8005182:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff ffb8 	bl	80050fa <prvInitialiseMutex>

		return xNewQueue;
 800518a:	68fb      	ldr	r3, [r7, #12]
	}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10c      	bne.n	80051c0 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	b672      	cpsid	i
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	b662      	cpsie	i
 80051ba:	60fb      	str	r3, [r7, #12]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	689c      	ldr	r4, [r3, #8]
 80051c4:	f001 ff16 	bl	8006ff4 <xTaskGetCurrentTaskHandle>
 80051c8:	4603      	mov	r3, r0
 80051ca:	429c      	cmp	r4, r3
 80051cc:	d111      	bne.n	80051f2 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	1e5a      	subs	r2, r3, #1
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d105      	bne.n	80051ec <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80051e0:	2300      	movs	r3, #0
 80051e2:	2200      	movs	r2, #0
 80051e4:	2100      	movs	r1, #0
 80051e6:	6938      	ldr	r0, [r7, #16]
 80051e8:	f000 f8b4 	bl	8005354 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80051ec:	2301      	movs	r3, #1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	e001      	b.n	80051f6 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80051f6:	697b      	ldr	r3, [r7, #20]
	}
 80051f8:	4618      	mov	r0, r3
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd90      	pop	{r4, r7, pc}

08005200 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10c      	bne.n	800522e <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	b672      	cpsid	i
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	b662      	cpsie	i
 8005228:	60fb      	str	r3, [r7, #12]
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	689c      	ldr	r4, [r3, #8]
 8005232:	f001 fedf 	bl	8006ff4 <xTaskGetCurrentTaskHandle>
 8005236:	4603      	mov	r3, r0
 8005238:	429c      	cmp	r4, r3
 800523a:	d107      	bne.n	800524c <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005246:	2301      	movs	r3, #1
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	e00c      	b.n	8005266 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	6938      	ldr	r0, [r7, #16]
 8005250:	f000 fba2 	bl	8005998 <xQueueSemaphoreTake>
 8005254:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005266:	697b      	ldr	r3, [r7, #20]
	}
 8005268:	4618      	mov	r0, r3
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	bd90      	pop	{r4, r7, pc}

08005270 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	; 0x28
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10c      	bne.n	800529c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	b672      	cpsid	i
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	b662      	cpsie	i
 8005296:	61bb      	str	r3, [r7, #24]
}
 8005298:	bf00      	nop
 800529a:	e7fe      	b.n	800529a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d90c      	bls.n	80052be <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	b672      	cpsid	i
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	b662      	cpsie	i
 80052b8:	617b      	str	r3, [r7, #20]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80052be:	2302      	movs	r3, #2
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	2100      	movs	r1, #0
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7ff fe2f 	bl	8004f2c <xQueueGenericCreateStatic>
 80052ce:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80052dc:	69fb      	ldr	r3, [r7, #28]
	}
 80052de:	4618      	mov	r0, r3
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b086      	sub	sp, #24
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10c      	bne.n	8005310 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	b672      	cpsid	i
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	b662      	cpsie	i
 800530a:	613b      	str	r3, [r7, #16]
}
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d90c      	bls.n	8005332 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	b672      	cpsid	i
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	b662      	cpsie	i
 800532c:	60fb      	str	r3, [r7, #12]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005332:	2202      	movs	r2, #2
 8005334:	2100      	movs	r1, #0
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fe7a 	bl	8005030 <xQueueGenericCreate>
 800533c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800534a:	697b      	ldr	r3, [r7, #20]
	}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08e      	sub	sp, #56	; 0x38
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005362:	2300      	movs	r3, #0
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10c      	bne.n	800538a <xQueueGenericSend+0x36>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	b672      	cpsid	i
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	b662      	cpsie	i
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <xQueueGenericSend+0x44>
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <xQueueGenericSend+0x48>
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <xQueueGenericSend+0x4a>
 800539c:	2300      	movs	r3, #0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10c      	bne.n	80053bc <xQueueGenericSend+0x68>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	b672      	cpsid	i
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	b662      	cpsie	i
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d103      	bne.n	80053ca <xQueueGenericSend+0x76>
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <xQueueGenericSend+0x7a>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <xQueueGenericSend+0x7c>
 80053ce:	2300      	movs	r3, #0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10c      	bne.n	80053ee <xQueueGenericSend+0x9a>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	b672      	cpsid	i
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	b662      	cpsie	i
 80053e8:	623b      	str	r3, [r7, #32]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ee:	f001 fe11 	bl	8007014 <xTaskGetSchedulerState>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <xQueueGenericSend+0xaa>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <xQueueGenericSend+0xae>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <xQueueGenericSend+0xb0>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10c      	bne.n	8005422 <xQueueGenericSend+0xce>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	b672      	cpsid	i
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	b662      	cpsie	i
 800541c:	61fb      	str	r3, [r7, #28]
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005422:	f002 fc43 	bl	8007cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <xQueueGenericSend+0xe4>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d129      	bne.n	800548c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800543e:	f000 fc82 	bl	8005d46 <prvCopyDataToQueue>
 8005442:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d010      	beq.n	800546e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	3324      	adds	r3, #36	; 0x24
 8005450:	4618      	mov	r0, r3
 8005452:	f001 fc09 	bl	8006c68 <xTaskRemoveFromEventList>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d013      	beq.n	8005484 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800545c:	4b3f      	ldr	r3, [pc, #252]	; (800555c <xQueueGenericSend+0x208>)
 800545e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	e00a      	b.n	8005484 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005474:	4b39      	ldr	r3, [pc, #228]	; (800555c <xQueueGenericSend+0x208>)
 8005476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005484:	f002 fc46 	bl	8007d14 <vPortExitCritical>
				return pdPASS;
 8005488:	2301      	movs	r3, #1
 800548a:	e063      	b.n	8005554 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005492:	f002 fc3f 	bl	8007d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005496:	2300      	movs	r3, #0
 8005498:	e05c      	b.n	8005554 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054a0:	f107 0314 	add.w	r3, r7, #20
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 fc45 	bl	8006d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054aa:	2301      	movs	r3, #1
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ae:	f002 fc31 	bl	8007d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054b2:	f001 f9ab 	bl	800680c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054b6:	f002 fbf9 	bl	8007cac <vPortEnterCritical>
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054c0:	b25b      	sxtb	r3, r3
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c6:	d103      	bne.n	80054d0 <xQueueGenericSend+0x17c>
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d6:	b25b      	sxtb	r3, r3
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054dc:	d103      	bne.n	80054e6 <xQueueGenericSend+0x192>
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054e6:	f002 fc15 	bl	8007d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ea:	1d3a      	adds	r2, r7, #4
 80054ec:	f107 0314 	add.w	r3, r7, #20
 80054f0:	4611      	mov	r1, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 fc34 	bl	8006d60 <xTaskCheckForTimeOut>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d124      	bne.n	8005548 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005500:	f000 fd19 	bl	8005f36 <prvIsQueueFull>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d018      	beq.n	800553c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	3310      	adds	r3, #16
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4611      	mov	r1, r2
 8005512:	4618      	mov	r0, r3
 8005514:	f001 fb54 	bl	8006bc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551a:	f000 fca4 	bl	8005e66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800551e:	f001 f983 	bl	8006828 <xTaskResumeAll>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	f47f af7c 	bne.w	8005422 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <xQueueGenericSend+0x208>)
 800552c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	e772      	b.n	8005422 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800553c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800553e:	f000 fc92 	bl	8005e66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005542:	f001 f971 	bl	8006828 <xTaskResumeAll>
 8005546:	e76c      	b.n	8005422 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800554a:	f000 fc8c 	bl	8005e66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800554e:	f001 f96b 	bl	8006828 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005554:	4618      	mov	r0, r3
 8005556:	3738      	adds	r7, #56	; 0x38
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	e000ed04 	.word	0xe000ed04

08005560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08e      	sub	sp, #56	; 0x38
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10c      	bne.n	8005592 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	b672      	cpsid	i
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	b662      	cpsie	i
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d103      	bne.n	80055a0 <xQueueGenericSendFromISR+0x40>
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <xQueueGenericSendFromISR+0x44>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <xQueueGenericSendFromISR+0x46>
 80055a4:	2300      	movs	r3, #0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10c      	bne.n	80055c4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	b672      	cpsid	i
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	b662      	cpsie	i
 80055be:	623b      	str	r3, [r7, #32]
}
 80055c0:	bf00      	nop
 80055c2:	e7fe      	b.n	80055c2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d103      	bne.n	80055d2 <xQueueGenericSendFromISR+0x72>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <xQueueGenericSendFromISR+0x76>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <xQueueGenericSendFromISR+0x78>
 80055d6:	2300      	movs	r3, #0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10c      	bne.n	80055f6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	b672      	cpsid	i
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	b662      	cpsie	i
 80055f0:	61fb      	str	r3, [r7, #28]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055f6:	f002 fc41 	bl	8007e7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055fa:	f3ef 8211 	mrs	r2, BASEPRI
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	b672      	cpsid	i
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	b662      	cpsie	i
 8005612:	61ba      	str	r2, [r7, #24]
 8005614:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005616:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	429a      	cmp	r2, r3
 8005624:	d302      	bcc.n	800562c <xQueueGenericSendFromISR+0xcc>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d12c      	bne.n	8005686 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800563c:	f000 fb83 	bl	8005d46 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005640:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005648:	d112      	bne.n	8005670 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	d016      	beq.n	8005680 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	3324      	adds	r3, #36	; 0x24
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fb06 	bl	8006c68 <xTaskRemoveFromEventList>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00e      	beq.n	8005680 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e007      	b.n	8005680 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005670:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005674:	3301      	adds	r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	b25a      	sxtb	r2, r3
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005680:	2301      	movs	r3, #1
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005684:	e001      	b.n	800568a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005686:	2300      	movs	r3, #0
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005694:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005698:	4618      	mov	r0, r3
 800569a:	3738      	adds	r7, #56	; 0x38
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08e      	sub	sp, #56	; 0x38
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10c      	bne.n	80056ce <xQueueGiveFromISR+0x2e>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	b672      	cpsid	i
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	b662      	cpsie	i
 80056c8:	623b      	str	r3, [r7, #32]
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00c      	beq.n	80056f0 <xQueueGiveFromISR+0x50>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	b672      	cpsid	i
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	b662      	cpsie	i
 80056ea:	61fb      	str	r3, [r7, #28]
}
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d103      	bne.n	8005700 <xQueueGiveFromISR+0x60>
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <xQueueGiveFromISR+0x64>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <xQueueGiveFromISR+0x66>
 8005704:	2300      	movs	r3, #0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10c      	bne.n	8005724 <xQueueGiveFromISR+0x84>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	b672      	cpsid	i
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	b662      	cpsie	i
 800571e:	61bb      	str	r3, [r7, #24]
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005724:	f002 fbaa 	bl	8007e7c <vPortValidateInterruptPriority>
	__asm volatile
 8005728:	f3ef 8211 	mrs	r2, BASEPRI
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	b672      	cpsid	i
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	b662      	cpsie	i
 8005740:	617a      	str	r2, [r7, #20]
 8005742:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005744:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005754:	429a      	cmp	r2, r3
 8005756:	d22b      	bcs.n	80057b0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800575e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800576a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005772:	d112      	bne.n	800579a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	d016      	beq.n	80057aa <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	3324      	adds	r3, #36	; 0x24
 8005780:	4618      	mov	r0, r3
 8005782:	f001 fa71 	bl	8006c68 <xTaskRemoveFromEventList>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00e      	beq.n	80057aa <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	e007      	b.n	80057aa <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800579a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800579e:	3301      	adds	r3, #1
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	b25a      	sxtb	r2, r3
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057aa:	2301      	movs	r3, #1
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
 80057ae:	e001      	b.n	80057b4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f383 8811 	msr	BASEPRI, r3
}
 80057be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3738      	adds	r7, #56	; 0x38
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08c      	sub	sp, #48	; 0x30
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057d8:	2300      	movs	r3, #0
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10c      	bne.n	8005800 <xQueueReceive+0x34>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	b672      	cpsid	i
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	b662      	cpsie	i
 80057fa:	623b      	str	r3, [r7, #32]
}
 80057fc:	bf00      	nop
 80057fe:	e7fe      	b.n	80057fe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <xQueueReceive+0x42>
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <xQueueReceive+0x46>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <xQueueReceive+0x48>
 8005812:	2300      	movs	r3, #0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10c      	bne.n	8005832 <xQueueReceive+0x66>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	b672      	cpsid	i
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	b662      	cpsie	i
 800582c:	61fb      	str	r3, [r7, #28]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005832:	f001 fbef 	bl	8007014 <xTaskGetSchedulerState>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <xQueueReceive+0x76>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <xQueueReceive+0x7a>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <xQueueReceive+0x7c>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10c      	bne.n	8005866 <xQueueReceive+0x9a>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	b672      	cpsid	i
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	b662      	cpsie	i
 8005860:	61bb      	str	r3, [r7, #24]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005866:	f002 fa21 	bl	8007cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01f      	beq.n	80058b6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800587a:	f000 face 	bl	8005e1a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	1e5a      	subs	r2, r3, #1
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00f      	beq.n	80058ae <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	3310      	adds	r3, #16
 8005892:	4618      	mov	r0, r3
 8005894:	f001 f9e8 	bl	8006c68 <xTaskRemoveFromEventList>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800589e:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <xQueueReceive+0x1c8>)
 80058a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058ae:	f002 fa31 	bl	8007d14 <vPortExitCritical>
				return pdPASS;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e069      	b.n	800598a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d103      	bne.n	80058c4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058bc:	f002 fa2a 	bl	8007d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e062      	b.n	800598a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058ca:	f107 0310 	add.w	r3, r7, #16
 80058ce:	4618      	mov	r0, r3
 80058d0:	f001 fa30 	bl	8006d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058d8:	f002 fa1c 	bl	8007d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058dc:	f000 ff96 	bl	800680c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058e0:	f002 f9e4 	bl	8007cac <vPortEnterCritical>
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ea:	b25b      	sxtb	r3, r3
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f0:	d103      	bne.n	80058fa <xQueueReceive+0x12e>
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005900:	b25b      	sxtb	r3, r3
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005906:	d103      	bne.n	8005910 <xQueueReceive+0x144>
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005910:	f002 fa00 	bl	8007d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005914:	1d3a      	adds	r2, r7, #4
 8005916:	f107 0310 	add.w	r3, r7, #16
 800591a:	4611      	mov	r1, r2
 800591c:	4618      	mov	r0, r3
 800591e:	f001 fa1f 	bl	8006d60 <xTaskCheckForTimeOut>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d123      	bne.n	8005970 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800592a:	f000 faee 	bl	8005f0a <prvIsQueueEmpty>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d017      	beq.n	8005964 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	3324      	adds	r3, #36	; 0x24
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	4611      	mov	r1, r2
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f93f 	bl	8006bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005944:	f000 fa8f 	bl	8005e66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005948:	f000 ff6e 	bl	8006828 <xTaskResumeAll>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d189      	bne.n	8005866 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <xQueueReceive+0x1c8>)
 8005954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	e780      	b.n	8005866 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005966:	f000 fa7e 	bl	8005e66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800596a:	f000 ff5d 	bl	8006828 <xTaskResumeAll>
 800596e:	e77a      	b.n	8005866 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005972:	f000 fa78 	bl	8005e66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005976:	f000 ff57 	bl	8006828 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800597a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800597c:	f000 fac5 	bl	8005f0a <prvIsQueueEmpty>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	f43f af6f 	beq.w	8005866 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005988:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800598a:	4618      	mov	r0, r3
 800598c:	3730      	adds	r7, #48	; 0x30
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08e      	sub	sp, #56	; 0x38
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10c      	bne.n	80059ce <xQueueSemaphoreTake+0x36>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	b672      	cpsid	i
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	b662      	cpsie	i
 80059c8:	623b      	str	r3, [r7, #32]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00c      	beq.n	80059f0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	b672      	cpsid	i
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	b662      	cpsie	i
 80059ea:	61fb      	str	r3, [r7, #28]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059f0:	f001 fb10 	bl	8007014 <xTaskGetSchedulerState>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <xQueueSemaphoreTake+0x68>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <xQueueSemaphoreTake+0x6c>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <xQueueSemaphoreTake+0x6e>
 8005a04:	2300      	movs	r3, #0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10c      	bne.n	8005a24 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	b672      	cpsid	i
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	b662      	cpsie	i
 8005a1e:	61bb      	str	r3, [r7, #24]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a24:	f002 f942 	bl	8007cac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d024      	beq.n	8005a7e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	1e5a      	subs	r2, r3, #1
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005a44:	f001 fc64 	bl	8007310 <pvTaskIncrementMutexHeldCount>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00f      	beq.n	8005a76 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	3310      	adds	r3, #16
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f904 	bl	8006c68 <xTaskRemoveFromEventList>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a66:	4b55      	ldr	r3, [pc, #340]	; (8005bbc <xQueueSemaphoreTake+0x224>)
 8005a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a76:	f002 f94d 	bl	8007d14 <vPortExitCritical>
				return pdPASS;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e099      	b.n	8005bb2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d113      	bne.n	8005aac <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	b672      	cpsid	i
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	b662      	cpsie	i
 8005a9e:	617b      	str	r3, [r7, #20]
}
 8005aa0:	bf00      	nop
 8005aa2:	e7fe      	b.n	8005aa2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005aa4:	f002 f936 	bl	8007d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e082      	b.n	8005bb2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ab2:	f107 030c 	add.w	r3, r7, #12
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 f93c 	bl	8006d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ac0:	f002 f928 	bl	8007d14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ac4:	f000 fea2 	bl	800680c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ac8:	f002 f8f0 	bl	8007cac <vPortEnterCritical>
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ad2:	b25b      	sxtb	r3, r3
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad8:	d103      	bne.n	8005ae2 <xQueueSemaphoreTake+0x14a>
 8005ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ae8:	b25b      	sxtb	r3, r3
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aee:	d103      	bne.n	8005af8 <xQueueSemaphoreTake+0x160>
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005af8:	f002 f90c 	bl	8007d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005afc:	463a      	mov	r2, r7
 8005afe:	f107 030c 	add.w	r3, r7, #12
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 f92b 	bl	8006d60 <xTaskCheckForTimeOut>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d132      	bne.n	8005b76 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b12:	f000 f9fa 	bl	8005f0a <prvIsQueueEmpty>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d026      	beq.n	8005b6a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d109      	bne.n	8005b38 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8005b24:	f002 f8c2 	bl	8007cac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 fa8f 	bl	8007050 <xTaskPriorityInherit>
 8005b32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b34:	f002 f8ee 	bl	8007d14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	3324      	adds	r3, #36	; 0x24
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 f83d 	bl	8006bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b48:	f000 f98d 	bl	8005e66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b4c:	f000 fe6c 	bl	8006828 <xTaskResumeAll>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f47f af66 	bne.w	8005a24 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8005b58:	4b18      	ldr	r3, [pc, #96]	; (8005bbc <xQueueSemaphoreTake+0x224>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	e75c      	b.n	8005a24 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b6c:	f000 f97b 	bl	8005e66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b70:	f000 fe5a 	bl	8006828 <xTaskResumeAll>
 8005b74:	e756      	b.n	8005a24 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b78:	f000 f975 	bl	8005e66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b7c:	f000 fe54 	bl	8006828 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b82:	f000 f9c2 	bl	8005f0a <prvIsQueueEmpty>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f43f af4b 	beq.w	8005a24 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00d      	beq.n	8005bb0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8005b94:	f002 f88a 	bl	8007cac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b9a:	f000 f8bc 	bl	8005d16 <prvGetDisinheritPriorityAfterTimeout>
 8005b9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fb2c 	bl	8007204 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005bac:	f002 f8b2 	bl	8007d14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3738      	adds	r7, #56	; 0x38
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08e      	sub	sp, #56	; 0x38
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10c      	bne.n	8005bf0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	b672      	cpsid	i
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	b662      	cpsie	i
 8005bea:	623b      	str	r3, [r7, #32]
}
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d103      	bne.n	8005bfe <xQueueReceiveFromISR+0x3e>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <xQueueReceiveFromISR+0x42>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <xQueueReceiveFromISR+0x44>
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10c      	bne.n	8005c22 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	b672      	cpsid	i
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	b662      	cpsie	i
 8005c1c:	61fb      	str	r3, [r7, #28]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c22:	f002 f92b 	bl	8007e7c <vPortValidateInterruptPriority>
	__asm volatile
 8005c26:	f3ef 8211 	mrs	r2, BASEPRI
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	b672      	cpsid	i
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	b662      	cpsie	i
 8005c3e:	61ba      	str	r2, [r7, #24]
 8005c40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d02f      	beq.n	8005cb2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c60:	f000 f8db 	bl	8005e1a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	1e5a      	subs	r2, r3, #1
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005c6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c74:	d112      	bne.n	8005c9c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d016      	beq.n	8005cac <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	3310      	adds	r3, #16
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fff0 	bl	8006c68 <xTaskRemoveFromEventList>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00e      	beq.n	8005cac <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e007      	b.n	8005cac <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	b25a      	sxtb	r2, r3
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005cac:	2301      	movs	r3, #1
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb0:	e001      	b.n	8005cb6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f383 8811 	msr	BASEPRI, r3
}
 8005cc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3738      	adds	r7, #56	; 0x38
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10c      	bne.n	8005cf8 <vQueueDelete+0x2c>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	b672      	cpsid	i
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	b662      	cpsie	i
 8005cf2:	60bb      	str	r3, [r7, #8]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f95f 	bl	8005fbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d102      	bne.n	8005d0e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f002 f9c5 	bl	8008098 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005d0e:	bf00      	nop
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d006      	beq.n	8005d34 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e001      	b.n	8005d38 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d38:	68fb      	ldr	r3, [r7, #12]
	}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10d      	bne.n	8005d80 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d14d      	bne.n	8005e08 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 f9d5 	bl	8007120 <xTaskPriorityDisinherit>
 8005d76:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	609a      	str	r2, [r3, #8]
 8005d7e:	e043      	b.n	8005e08 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d119      	bne.n	8005dba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6858      	ldr	r0, [r3, #4]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	f002 fad5 	bl	8008340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	441a      	add	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d32b      	bcc.n	8005e08 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	605a      	str	r2, [r3, #4]
 8005db8:	e026      	b.n	8005e08 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68d8      	ldr	r0, [r3, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	f002 fabb 	bl	8008340 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	425b      	negs	r3, r3
 8005dd4:	441a      	add	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d207      	bcs.n	8005df6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689a      	ldr	r2, [r3, #8]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	425b      	negs	r3, r3
 8005df0:	441a      	add	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d105      	bne.n	8005e08 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e10:	697b      	ldr	r3, [r7, #20]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d018      	beq.n	8005e5e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	441a      	add	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d303      	bcc.n	8005e4e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68d9      	ldr	r1, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	461a      	mov	r2, r3
 8005e58:	6838      	ldr	r0, [r7, #0]
 8005e5a:	f002 fa71 	bl	8008340 <memcpy>
	}
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e6e:	f001 ff1d 	bl	8007cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e7a:	e011      	b.n	8005ea0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d012      	beq.n	8005eaa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3324      	adds	r3, #36	; 0x24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 feed 	bl	8006c68 <xTaskRemoveFromEventList>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e94:	f000 ffca 	bl	8006e2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	dce9      	bgt.n	8005e7c <prvUnlockQueue+0x16>
 8005ea8:	e000      	b.n	8005eac <prvUnlockQueue+0x46>
					break;
 8005eaa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	22ff      	movs	r2, #255	; 0xff
 8005eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005eb4:	f001 ff2e 	bl	8007d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005eb8:	f001 fef8 	bl	8007cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ec2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ec4:	e011      	b.n	8005eea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d012      	beq.n	8005ef4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3310      	adds	r3, #16
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fec8 	bl	8006c68 <xTaskRemoveFromEventList>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ede:	f000 ffa5 	bl	8006e2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	dce9      	bgt.n	8005ec6 <prvUnlockQueue+0x60>
 8005ef2:	e000      	b.n	8005ef6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ef4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	22ff      	movs	r2, #255	; 0xff
 8005efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005efe:	f001 ff09 	bl	8007d14 <vPortExitCritical>
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f12:	f001 fecb 	bl	8007cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e001      	b.n	8005f28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f28:	f001 fef4 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f3e:	f001 feb5 	bl	8007cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d102      	bne.n	8005f54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e001      	b.n	8005f58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f58:	f001 fedc 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	e014      	b.n	8005fa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f78:	4a0f      	ldr	r2, [pc, #60]	; (8005fb8 <vQueueAddToRegistry+0x50>)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f84:	490c      	ldr	r1, [pc, #48]	; (8005fb8 <vQueueAddToRegistry+0x50>)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f8e:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <vQueueAddToRegistry+0x50>)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f9a:	e006      	b.n	8005faa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b07      	cmp	r3, #7
 8005fa6:	d9e7      	bls.n	8005f78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20004f18 	.word	0x20004f18

08005fbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e016      	b.n	8005ff8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005fca:	4a10      	ldr	r2, [pc, #64]	; (800600c <vQueueUnregisterQueue+0x50>)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d10b      	bne.n	8005ff2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005fda:	4a0c      	ldr	r2, [pc, #48]	; (800600c <vQueueUnregisterQueue+0x50>)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2100      	movs	r1, #0
 8005fe0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005fe4:	4a09      	ldr	r2, [pc, #36]	; (800600c <vQueueUnregisterQueue+0x50>)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	4413      	add	r3, r2
 8005fec:	2200      	movs	r2, #0
 8005fee:	605a      	str	r2, [r3, #4]
				break;
 8005ff0:	e006      	b.n	8006000 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b07      	cmp	r3, #7
 8005ffc:	d9e5      	bls.n	8005fca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	20004f18 	.word	0x20004f18

08006010 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006020:	f001 fe44 	bl	8007cac <vPortEnterCritical>
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800602a:	b25b      	sxtb	r3, r3
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006030:	d103      	bne.n	800603a <vQueueWaitForMessageRestricted+0x2a>
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006040:	b25b      	sxtb	r3, r3
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006046:	d103      	bne.n	8006050 <vQueueWaitForMessageRestricted+0x40>
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006050:	f001 fe60 	bl	8007d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	3324      	adds	r3, #36	; 0x24
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fdd1 	bl	8006c0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800606a:	6978      	ldr	r0, [r7, #20]
 800606c:	f7ff fefb 	bl	8005e66 <prvUnlockQueue>
	}
 8006070:	bf00      	nop
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08e      	sub	sp, #56	; 0x38
 800607c:	af04      	add	r7, sp, #16
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10c      	bne.n	80060a6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	b672      	cpsid	i
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	b662      	cpsie	i
 80060a0:	623b      	str	r3, [r7, #32]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10c      	bne.n	80060c6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	b672      	cpsid	i
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	b662      	cpsie	i
 80060c0:	61fb      	str	r3, [r7, #28]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060c6:	235c      	movs	r3, #92	; 0x5c
 80060c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	2b5c      	cmp	r3, #92	; 0x5c
 80060ce:	d00c      	beq.n	80060ea <xTaskCreateStatic+0x72>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	b672      	cpsid	i
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	b662      	cpsie	i
 80060e4:	61bb      	str	r3, [r7, #24]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01e      	beq.n	8006130 <xTaskCreateStatic+0xb8>
 80060f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01b      	beq.n	8006130 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006100:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	2202      	movs	r2, #2
 8006106:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800610a:	2300      	movs	r3, #0
 800610c:	9303      	str	r3, [sp, #12]
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	9302      	str	r3, [sp, #8]
 8006112:	f107 0314 	add.w	r3, r7, #20
 8006116:	9301      	str	r3, [sp, #4]
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 f850 	bl	80061c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800612a:	f000 f8df 	bl	80062ec <prvAddNewTaskToReadyList>
 800612e:	e001      	b.n	8006134 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006134:	697b      	ldr	r3, [r7, #20]
	}
 8006136:	4618      	mov	r0, r3
 8006138:	3728      	adds	r7, #40	; 0x28
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800613e:	b580      	push	{r7, lr}
 8006140:	b08c      	sub	sp, #48	; 0x30
 8006142:	af04      	add	r7, sp, #16
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4618      	mov	r0, r3
 8006154:	f001 fed6 	bl	8007f04 <pvPortMalloc>
 8006158:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00e      	beq.n	800617e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006160:	205c      	movs	r0, #92	; 0x5c
 8006162:	f001 fecf 	bl	8007f04 <pvPortMalloc>
 8006166:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	631a      	str	r2, [r3, #48]	; 0x30
 8006174:	e005      	b.n	8006182 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006176:	6978      	ldr	r0, [r7, #20]
 8006178:	f001 ff8e 	bl	8008098 <vPortFree>
 800617c:	e001      	b.n	8006182 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d017      	beq.n	80061b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006190:	88fa      	ldrh	r2, [r7, #6]
 8006192:	2300      	movs	r3, #0
 8006194:	9303      	str	r3, [sp, #12]
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	9302      	str	r3, [sp, #8]
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f80e 	bl	80061c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ac:	69f8      	ldr	r0, [r7, #28]
 80061ae:	f000 f89d 	bl	80062ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061b2:	2301      	movs	r3, #1
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	e002      	b.n	80061be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061be:	69bb      	ldr	r3, [r7, #24]
	}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3720      	adds	r7, #32
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	461a      	mov	r2, r3
 80061e0:	21a5      	movs	r1, #165	; 0xa5
 80061e2:	f002 f8bb 	bl	800835c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80061f0:	440b      	add	r3, r1
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f023 0307 	bic.w	r3, r3, #7
 80061fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00c      	beq.n	8006224 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	b672      	cpsid	i
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	b662      	cpsie	i
 800621e:	617b      	str	r3, [r7, #20]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d01f      	beq.n	800626a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800622a:	2300      	movs	r3, #0
 800622c:	61fb      	str	r3, [r7, #28]
 800622e:	e012      	b.n	8006256 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	7819      	ldrb	r1, [r3, #0]
 8006238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	3334      	adds	r3, #52	; 0x34
 8006240:	460a      	mov	r2, r1
 8006242:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	4413      	add	r3, r2
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d006      	beq.n	800625e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	3301      	adds	r3, #1
 8006254:	61fb      	str	r3, [r7, #28]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	2b0f      	cmp	r3, #15
 800625a:	d9e9      	bls.n	8006230 <prvInitialiseNewTask+0x68>
 800625c:	e000      	b.n	8006260 <prvInitialiseNewTask+0x98>
			{
				break;
 800625e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006268:	e003      	b.n	8006272 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	2b37      	cmp	r3, #55	; 0x37
 8006276:	d901      	bls.n	800627c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006278:	2337      	movs	r3, #55	; 0x37
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006280:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006286:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	2200      	movs	r2, #0
 800628c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	3304      	adds	r3, #4
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe fd4c 	bl	8004d30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	3318      	adds	r3, #24
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fd47 	bl	8004d30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	2200      	movs	r2, #0
 80062bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	68f9      	ldr	r1, [r7, #12]
 80062ca:	69b8      	ldr	r0, [r7, #24]
 80062cc:	f001 fbe4 	bl	8007a98 <pxPortInitialiseStack>
 80062d0:	4602      	mov	r2, r0
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062e2:	bf00      	nop
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062f4:	f001 fcda 	bl	8007cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062f8:	4b2d      	ldr	r3, [pc, #180]	; (80063b0 <prvAddNewTaskToReadyList+0xc4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	4a2c      	ldr	r2, [pc, #176]	; (80063b0 <prvAddNewTaskToReadyList+0xc4>)
 8006300:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006302:	4b2c      	ldr	r3, [pc, #176]	; (80063b4 <prvAddNewTaskToReadyList+0xc8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800630a:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <prvAddNewTaskToReadyList+0xc8>)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006310:	4b27      	ldr	r3, [pc, #156]	; (80063b0 <prvAddNewTaskToReadyList+0xc4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d110      	bne.n	800633a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006318:	f000 fdac 	bl	8006e74 <prvInitialiseTaskLists>
 800631c:	e00d      	b.n	800633a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800631e:	4b26      	ldr	r3, [pc, #152]	; (80063b8 <prvAddNewTaskToReadyList+0xcc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006326:	4b23      	ldr	r3, [pc, #140]	; (80063b4 <prvAddNewTaskToReadyList+0xc8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	429a      	cmp	r2, r3
 8006332:	d802      	bhi.n	800633a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006334:	4a1f      	ldr	r2, [pc, #124]	; (80063b4 <prvAddNewTaskToReadyList+0xc8>)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800633a:	4b20      	ldr	r3, [pc, #128]	; (80063bc <prvAddNewTaskToReadyList+0xd0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	4a1e      	ldr	r2, [pc, #120]	; (80063bc <prvAddNewTaskToReadyList+0xd0>)
 8006342:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006344:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <prvAddNewTaskToReadyList+0xd0>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006350:	4b1b      	ldr	r3, [pc, #108]	; (80063c0 <prvAddNewTaskToReadyList+0xd4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d903      	bls.n	8006360 <prvAddNewTaskToReadyList+0x74>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <prvAddNewTaskToReadyList+0xd4>)
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <prvAddNewTaskToReadyList+0xd8>)
 800636e:	441a      	add	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3304      	adds	r3, #4
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f7fe fce7 	bl	8004d4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800637c:	f001 fcca 	bl	8007d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006380:	4b0d      	ldr	r3, [pc, #52]	; (80063b8 <prvAddNewTaskToReadyList+0xcc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00e      	beq.n	80063a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <prvAddNewTaskToReadyList+0xc8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	429a      	cmp	r2, r3
 8006394:	d207      	bcs.n	80063a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <prvAddNewTaskToReadyList+0xdc>)
 8006398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000c30 	.word	0x20000c30
 80063b4:	2000075c 	.word	0x2000075c
 80063b8:	20000c3c 	.word	0x20000c3c
 80063bc:	20000c4c 	.word	0x20000c4c
 80063c0:	20000c38 	.word	0x20000c38
 80063c4:	20000760 	.word	0x20000760
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80063d4:	f001 fc6a 	bl	8007cac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d102      	bne.n	80063e4 <vTaskDelete+0x18>
 80063de:	4b2d      	ldr	r3, [pc, #180]	; (8006494 <vTaskDelete+0xc8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	e000      	b.n	80063e6 <vTaskDelete+0x1a>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe fd09 	bl	8004e04 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3318      	adds	r3, #24
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe fd00 	bl	8004e04 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006404:	4b24      	ldr	r3, [pc, #144]	; (8006498 <vTaskDelete+0xcc>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	4a23      	ldr	r2, [pc, #140]	; (8006498 <vTaskDelete+0xcc>)
 800640c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800640e:	4b21      	ldr	r3, [pc, #132]	; (8006494 <vTaskDelete+0xc8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	429a      	cmp	r2, r3
 8006416:	d10b      	bne.n	8006430 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	481f      	ldr	r0, [pc, #124]	; (800649c <vTaskDelete+0xd0>)
 8006420:	f7fe fc93 	bl	8004d4a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006424:	4b1e      	ldr	r3, [pc, #120]	; (80064a0 <vTaskDelete+0xd4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <vTaskDelete+0xd4>)
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e009      	b.n	8006444 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006430:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <vTaskDelete+0xd8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3b01      	subs	r3, #1
 8006436:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <vTaskDelete+0xd8>)
 8006438:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fd88 	bl	8006f50 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006440:	f000 fdb8 	bl	8006fb4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006444:	f001 fc66 	bl	8007d14 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006448:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <vTaskDelete+0xdc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d01d      	beq.n	800648c <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8006450:	4b10      	ldr	r3, [pc, #64]	; (8006494 <vTaskDelete+0xc8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	429a      	cmp	r2, r3
 8006458:	d118      	bne.n	800648c <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800645a:	4b14      	ldr	r3, [pc, #80]	; (80064ac <vTaskDelete+0xe0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00c      	beq.n	800647c <vTaskDelete+0xb0>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	b672      	cpsid	i
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	b662      	cpsie	i
 8006476:	60bb      	str	r3, [r7, #8]
}
 8006478:	bf00      	nop
 800647a:	e7fe      	b.n	800647a <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800647c:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <vTaskDelete+0xe4>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	2000075c 	.word	0x2000075c
 8006498:	20000c4c 	.word	0x20000c4c
 800649c:	20000c04 	.word	0x20000c04
 80064a0:	20000c18 	.word	0x20000c18
 80064a4:	20000c30 	.word	0x20000c30
 80064a8:	20000c3c 	.word	0x20000c3c
 80064ac:	20000c58 	.word	0x20000c58
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d019      	beq.n	80064fa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064c6:	4b14      	ldr	r3, [pc, #80]	; (8006518 <vTaskDelay+0x64>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <vTaskDelay+0x34>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	b672      	cpsid	i
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	b662      	cpsie	i
 80064e2:	60bb      	str	r3, [r7, #8]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80064e8:	f000 f990 	bl	800680c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064ec:	2100      	movs	r1, #0
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 ff22 	bl	8007338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064f4:	f000 f998 	bl	8006828 <xTaskResumeAll>
 80064f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <vTaskDelay+0x68>)
 8006502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000c58 	.word	0x20000c58
 800651c:	e000ed04 	.word	0xe000ed04

08006520 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006528:	f001 fbc0 	bl	8007cac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <vTaskSuspend+0x18>
 8006532:	4b31      	ldr	r3, [pc, #196]	; (80065f8 <vTaskSuspend+0xd8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	e000      	b.n	800653a <vTaskSuspend+0x1a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3304      	adds	r3, #4
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe fc5f 	bl	8004e04 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3318      	adds	r3, #24
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fc56 	bl	8004e04 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4827      	ldr	r0, [pc, #156]	; (80065fc <vTaskSuspend+0xdc>)
 8006560:	f7fe fbf3 	bl	8004d4a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d103      	bne.n	8006578 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006578:	f001 fbcc 	bl	8007d14 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800657c:	4b20      	ldr	r3, [pc, #128]	; (8006600 <vTaskSuspend+0xe0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006584:	f001 fb92 	bl	8007cac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006588:	f000 fd14 	bl	8006fb4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800658c:	f001 fbc2 	bl	8007d14 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006590:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <vTaskSuspend+0xd8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	429a      	cmp	r2, r3
 8006598:	d129      	bne.n	80065ee <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 800659a:	4b19      	ldr	r3, [pc, #100]	; (8006600 <vTaskSuspend+0xe0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d019      	beq.n	80065d6 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80065a2:	4b18      	ldr	r3, [pc, #96]	; (8006604 <vTaskSuspend+0xe4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00c      	beq.n	80065c4 <vTaskSuspend+0xa4>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	b672      	cpsid	i
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	b662      	cpsie	i
 80065be:	60bb      	str	r3, [r7, #8]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 80065c4:	4b10      	ldr	r3, [pc, #64]	; (8006608 <vTaskSuspend+0xe8>)
 80065c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065d4:	e00b      	b.n	80065ee <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <vTaskSuspend+0xdc>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b0c      	ldr	r3, [pc, #48]	; (800660c <vTaskSuspend+0xec>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d103      	bne.n	80065ea <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <vTaskSuspend+0xd8>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
	}
 80065e8:	e001      	b.n	80065ee <vTaskSuspend+0xce>
					vTaskSwitchContext();
 80065ea:	f000 fa89 	bl	8006b00 <vTaskSwitchContext>
	}
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	2000075c 	.word	0x2000075c
 80065fc:	20000c1c 	.word	0x20000c1c
 8006600:	20000c3c 	.word	0x20000c3c
 8006604:	20000c58 	.word	0x20000c58
 8006608:	e000ed04 	.word	0xe000ed04
 800660c:	20000c30 	.word	0x20000c30

08006610 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10c      	bne.n	8006640 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	b672      	cpsid	i
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	b662      	cpsie	i
 800663a:	60fb      	str	r3, [r7, #12]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <prvTaskIsTaskSuspended+0x60>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d10a      	bne.n	8006660 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	4a09      	ldr	r2, [pc, #36]	; (8006674 <prvTaskIsTaskSuspended+0x64>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d005      	beq.n	8006660 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006660:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006662:	4618      	mov	r0, r3
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	20000c1c 	.word	0x20000c1c
 8006674:	20000bf0 	.word	0x20000bf0

08006678 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10c      	bne.n	80066a4 <vTaskResume+0x2c>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	b672      	cpsid	i
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	b662      	cpsie	i
 800669e:	60bb      	str	r3, [r7, #8]
}
 80066a0:	bf00      	nop
 80066a2:	e7fe      	b.n	80066a2 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80066a4:	4b20      	ldr	r3, [pc, #128]	; (8006728 <vTaskResume+0xb0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d038      	beq.n	8006720 <vTaskResume+0xa8>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d035      	beq.n	8006720 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 80066b4:	f001 fafa 	bl	8007cac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff ffa9 	bl	8006610 <prvTaskIsTaskSuspended>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d02b      	beq.n	800671c <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe fb9b 	bl	8004e04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d2:	4b16      	ldr	r3, [pc, #88]	; (800672c <vTaskResume+0xb4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d903      	bls.n	80066e2 <vTaskResume+0x6a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	4a13      	ldr	r2, [pc, #76]	; (800672c <vTaskResume+0xb4>)
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4a10      	ldr	r2, [pc, #64]	; (8006730 <vTaskResume+0xb8>)
 80066f0:	441a      	add	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f7fe fb26 	bl	8004d4a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006702:	4b09      	ldr	r3, [pc, #36]	; (8006728 <vTaskResume+0xb0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	429a      	cmp	r2, r3
 800670a:	d307      	bcc.n	800671c <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <vTaskResume+0xbc>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800671c:	f001 fafa 	bl	8007d14 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	2000075c 	.word	0x2000075c
 800672c:	20000c38 	.word	0x20000c38
 8006730:	20000760 	.word	0x20000760
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08a      	sub	sp, #40	; 0x28
 800673c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006742:	2300      	movs	r3, #0
 8006744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006746:	463a      	mov	r2, r7
 8006748:	1d39      	adds	r1, r7, #4
 800674a:	f107 0308 	add.w	r3, r7, #8
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fa9a 	bl	8004c88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	9202      	str	r2, [sp, #8]
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	2300      	movs	r3, #0
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	2300      	movs	r3, #0
 8006764:	460a      	mov	r2, r1
 8006766:	4923      	ldr	r1, [pc, #140]	; (80067f4 <vTaskStartScheduler+0xbc>)
 8006768:	4823      	ldr	r0, [pc, #140]	; (80067f8 <vTaskStartScheduler+0xc0>)
 800676a:	f7ff fc85 	bl	8006078 <xTaskCreateStatic>
 800676e:	4603      	mov	r3, r0
 8006770:	4a22      	ldr	r2, [pc, #136]	; (80067fc <vTaskStartScheduler+0xc4>)
 8006772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006774:	4b21      	ldr	r3, [pc, #132]	; (80067fc <vTaskStartScheduler+0xc4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800677c:	2301      	movs	r3, #1
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e001      	b.n	8006786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006782:	2300      	movs	r3, #0
 8006784:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d102      	bne.n	8006792 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800678c:	f000 fe28 	bl	80073e0 <xTimerCreateTimerTask>
 8006790:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d118      	bne.n	80067ca <vTaskStartScheduler+0x92>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	b672      	cpsid	i
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	b662      	cpsie	i
 80067ac:	613b      	str	r3, [r7, #16]
}
 80067ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067b0:	4b13      	ldr	r3, [pc, #76]	; (8006800 <vTaskStartScheduler+0xc8>)
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067b8:	4b12      	ldr	r3, [pc, #72]	; (8006804 <vTaskStartScheduler+0xcc>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067be:	4b12      	ldr	r3, [pc, #72]	; (8006808 <vTaskStartScheduler+0xd0>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067c4:	f001 f9f4 	bl	8007bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067c8:	e010      	b.n	80067ec <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d0:	d10c      	bne.n	80067ec <vTaskStartScheduler+0xb4>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	b672      	cpsid	i
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	b662      	cpsie	i
 80067e6:	60fb      	str	r3, [r7, #12]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <vTaskStartScheduler+0xb2>
}
 80067ec:	bf00      	nop
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	080095e8 	.word	0x080095e8
 80067f8:	08006e45 	.word	0x08006e45
 80067fc:	20000c54 	.word	0x20000c54
 8006800:	20000c50 	.word	0x20000c50
 8006804:	20000c3c 	.word	0x20000c3c
 8006808:	20000c34 	.word	0x20000c34

0800680c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006810:	4b04      	ldr	r3, [pc, #16]	; (8006824 <vTaskSuspendAll+0x18>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3301      	adds	r3, #1
 8006816:	4a03      	ldr	r2, [pc, #12]	; (8006824 <vTaskSuspendAll+0x18>)
 8006818:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800681a:	bf00      	nop
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	20000c58 	.word	0x20000c58

08006828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006832:	2300      	movs	r3, #0
 8006834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006836:	4b43      	ldr	r3, [pc, #268]	; (8006944 <xTaskResumeAll+0x11c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10c      	bne.n	8006858 <xTaskResumeAll+0x30>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	b672      	cpsid	i
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	b662      	cpsie	i
 8006852:	603b      	str	r3, [r7, #0]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006858:	f001 fa28 	bl	8007cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800685c:	4b39      	ldr	r3, [pc, #228]	; (8006944 <xTaskResumeAll+0x11c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3b01      	subs	r3, #1
 8006862:	4a38      	ldr	r2, [pc, #224]	; (8006944 <xTaskResumeAll+0x11c>)
 8006864:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006866:	4b37      	ldr	r3, [pc, #220]	; (8006944 <xTaskResumeAll+0x11c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d162      	bne.n	8006934 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800686e:	4b36      	ldr	r3, [pc, #216]	; (8006948 <xTaskResumeAll+0x120>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d05e      	beq.n	8006934 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006876:	e02f      	b.n	80068d8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006878:	4b34      	ldr	r3, [pc, #208]	; (800694c <xTaskResumeAll+0x124>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3318      	adds	r3, #24
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fabd 	bl	8004e04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3304      	adds	r3, #4
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fab8 	bl	8004e04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	4b2d      	ldr	r3, [pc, #180]	; (8006950 <xTaskResumeAll+0x128>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d903      	bls.n	80068a8 <xTaskResumeAll+0x80>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	4a2a      	ldr	r2, [pc, #168]	; (8006950 <xTaskResumeAll+0x128>)
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4a27      	ldr	r2, [pc, #156]	; (8006954 <xTaskResumeAll+0x12c>)
 80068b6:	441a      	add	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3304      	adds	r3, #4
 80068bc:	4619      	mov	r1, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f7fe fa43 	bl	8004d4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	4b23      	ldr	r3, [pc, #140]	; (8006958 <xTaskResumeAll+0x130>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d302      	bcc.n	80068d8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80068d2:	4b22      	ldr	r3, [pc, #136]	; (800695c <xTaskResumeAll+0x134>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068d8:	4b1c      	ldr	r3, [pc, #112]	; (800694c <xTaskResumeAll+0x124>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1cb      	bne.n	8006878 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068e6:	f000 fb65 	bl	8006fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068ea:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <xTaskResumeAll+0x138>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d010      	beq.n	8006918 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068f6:	f000 f847 	bl	8006988 <xTaskIncrementTick>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006900:	4b16      	ldr	r3, [pc, #88]	; (800695c <xTaskResumeAll+0x134>)
 8006902:	2201      	movs	r2, #1
 8006904:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3b01      	subs	r3, #1
 800690a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f1      	bne.n	80068f6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006912:	4b13      	ldr	r3, [pc, #76]	; (8006960 <xTaskResumeAll+0x138>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006918:	4b10      	ldr	r3, [pc, #64]	; (800695c <xTaskResumeAll+0x134>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d009      	beq.n	8006934 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006924:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <xTaskResumeAll+0x13c>)
 8006926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006934:	f001 f9ee 	bl	8007d14 <vPortExitCritical>

	return xAlreadyYielded;
 8006938:	68bb      	ldr	r3, [r7, #8]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000c58 	.word	0x20000c58
 8006948:	20000c30 	.word	0x20000c30
 800694c:	20000bf0 	.word	0x20000bf0
 8006950:	20000c38 	.word	0x20000c38
 8006954:	20000760 	.word	0x20000760
 8006958:	2000075c 	.word	0x2000075c
 800695c:	20000c44 	.word	0x20000c44
 8006960:	20000c40 	.word	0x20000c40
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800696e:	4b05      	ldr	r3, [pc, #20]	; (8006984 <xTaskGetTickCount+0x1c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006974:	687b      	ldr	r3, [r7, #4]
}
 8006976:	4618      	mov	r0, r3
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20000c34 	.word	0x20000c34

08006988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006992:	4b50      	ldr	r3, [pc, #320]	; (8006ad4 <xTaskIncrementTick+0x14c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f040 808b 	bne.w	8006ab2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800699c:	4b4e      	ldr	r3, [pc, #312]	; (8006ad8 <xTaskIncrementTick+0x150>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3301      	adds	r3, #1
 80069a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069a4:	4a4c      	ldr	r2, [pc, #304]	; (8006ad8 <xTaskIncrementTick+0x150>)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d122      	bne.n	80069f6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80069b0:	4b4a      	ldr	r3, [pc, #296]	; (8006adc <xTaskIncrementTick+0x154>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00c      	beq.n	80069d4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	b672      	cpsid	i
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	b662      	cpsie	i
 80069ce:	603b      	str	r3, [r7, #0]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <xTaskIncrementTick+0x4a>
 80069d4:	4b41      	ldr	r3, [pc, #260]	; (8006adc <xTaskIncrementTick+0x154>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	4b41      	ldr	r3, [pc, #260]	; (8006ae0 <xTaskIncrementTick+0x158>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a3f      	ldr	r2, [pc, #252]	; (8006adc <xTaskIncrementTick+0x154>)
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4a3f      	ldr	r2, [pc, #252]	; (8006ae0 <xTaskIncrementTick+0x158>)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <xTaskIncrementTick+0x15c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	4a3d      	ldr	r2, [pc, #244]	; (8006ae4 <xTaskIncrementTick+0x15c>)
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	f000 fadf 	bl	8006fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069f6:	4b3c      	ldr	r3, [pc, #240]	; (8006ae8 <xTaskIncrementTick+0x160>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d349      	bcc.n	8006a94 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a00:	4b36      	ldr	r3, [pc, #216]	; (8006adc <xTaskIncrementTick+0x154>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a0a:	4b37      	ldr	r3, [pc, #220]	; (8006ae8 <xTaskIncrementTick+0x160>)
 8006a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a10:	601a      	str	r2, [r3, #0]
					break;
 8006a12:	e03f      	b.n	8006a94 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a14:	4b31      	ldr	r3, [pc, #196]	; (8006adc <xTaskIncrementTick+0x154>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d203      	bcs.n	8006a34 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a2c:	4a2e      	ldr	r2, [pc, #184]	; (8006ae8 <xTaskIncrementTick+0x160>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a32:	e02f      	b.n	8006a94 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe f9e3 	bl	8004e04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	3318      	adds	r3, #24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe f9da 	bl	8004e04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	4b25      	ldr	r3, [pc, #148]	; (8006aec <xTaskIncrementTick+0x164>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d903      	bls.n	8006a64 <xTaskIncrementTick+0xdc>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	4a22      	ldr	r2, [pc, #136]	; (8006aec <xTaskIncrementTick+0x164>)
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4a1f      	ldr	r2, [pc, #124]	; (8006af0 <xTaskIncrementTick+0x168>)
 8006a72:	441a      	add	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	f7fe f965 	bl	8004d4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a84:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <xTaskIncrementTick+0x16c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d3b8      	bcc.n	8006a00 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a92:	e7b5      	b.n	8006a00 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a94:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <xTaskIncrementTick+0x16c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9a:	4915      	ldr	r1, [pc, #84]	; (8006af0 <xTaskIncrementTick+0x168>)
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d907      	bls.n	8006abc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	e004      	b.n	8006abc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <xTaskIncrementTick+0x170>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	4a0f      	ldr	r2, [pc, #60]	; (8006af8 <xTaskIncrementTick+0x170>)
 8006aba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <xTaskIncrementTick+0x174>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ac8:	697b      	ldr	r3, [r7, #20]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000c58 	.word	0x20000c58
 8006ad8:	20000c34 	.word	0x20000c34
 8006adc:	20000be8 	.word	0x20000be8
 8006ae0:	20000bec 	.word	0x20000bec
 8006ae4:	20000c48 	.word	0x20000c48
 8006ae8:	20000c50 	.word	0x20000c50
 8006aec:	20000c38 	.word	0x20000c38
 8006af0:	20000760 	.word	0x20000760
 8006af4:	2000075c 	.word	0x2000075c
 8006af8:	20000c40 	.word	0x20000c40
 8006afc:	20000c44 	.word	0x20000c44

08006b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b06:	4b29      	ldr	r3, [pc, #164]	; (8006bac <vTaskSwitchContext+0xac>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b0e:	4b28      	ldr	r3, [pc, #160]	; (8006bb0 <vTaskSwitchContext+0xb0>)
 8006b10:	2201      	movs	r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b14:	e043      	b.n	8006b9e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8006b16:	4b26      	ldr	r3, [pc, #152]	; (8006bb0 <vTaskSwitchContext+0xb0>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b1c:	4b25      	ldr	r3, [pc, #148]	; (8006bb4 <vTaskSwitchContext+0xb4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	e012      	b.n	8006b4a <vTaskSwitchContext+0x4a>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10c      	bne.n	8006b44 <vTaskSwitchContext+0x44>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	b672      	cpsid	i
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	b662      	cpsie	i
 8006b3e:	607b      	str	r3, [r7, #4]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <vTaskSwitchContext+0x42>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	491b      	ldr	r1, [pc, #108]	; (8006bb8 <vTaskSwitchContext+0xb8>)
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0e2      	beq.n	8006b24 <vTaskSwitchContext+0x24>
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <vTaskSwitchContext+0xb8>)
 8006b6a:	4413      	add	r3, r2
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	605a      	str	r2, [r3, #4]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	3308      	adds	r3, #8
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d104      	bne.n	8006b8e <vTaskSwitchContext+0x8e>
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	605a      	str	r2, [r3, #4]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4a09      	ldr	r2, [pc, #36]	; (8006bbc <vTaskSwitchContext+0xbc>)
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	4a06      	ldr	r2, [pc, #24]	; (8006bb4 <vTaskSwitchContext+0xb4>)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6013      	str	r3, [r2, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	20000c58 	.word	0x20000c58
 8006bb0:	20000c44 	.word	0x20000c44
 8006bb4:	20000c38 	.word	0x20000c38
 8006bb8:	20000760 	.word	0x20000760
 8006bbc:	2000075c 	.word	0x2000075c

08006bc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10c      	bne.n	8006bea <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	b672      	cpsid	i
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	b662      	cpsie	i
 8006be4:	60fb      	str	r3, [r7, #12]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bea:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <vTaskPlaceOnEventList+0x48>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3318      	adds	r3, #24
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fe f8cd 	bl	8004d92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	6838      	ldr	r0, [r7, #0]
 8006bfc:	f000 fb9c 	bl	8007338 <prvAddCurrentTaskToDelayedList>
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	2000075c 	.word	0x2000075c

08006c0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10c      	bne.n	8006c38 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	b672      	cpsid	i
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	b662      	cpsie	i
 8006c32:	617b      	str	r3, [r7, #20]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <vTaskPlaceOnEventListRestricted+0x58>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3318      	adds	r3, #24
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7fe f882 	bl	8004d4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	68b8      	ldr	r0, [r7, #8]
 8006c56:	f000 fb6f 	bl	8007338 <prvAddCurrentTaskToDelayedList>
	}
 8006c5a:	bf00      	nop
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	2000075c 	.word	0x2000075c

08006c68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10c      	bne.n	8006c98 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	b672      	cpsid	i
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	b662      	cpsie	i
 8006c92:	60fb      	str	r3, [r7, #12]
}
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	3318      	adds	r3, #24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe f8b1 	bl	8004e04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ca2:	4b1e      	ldr	r3, [pc, #120]	; (8006d1c <xTaskRemoveFromEventList+0xb4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d11d      	bne.n	8006ce6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe f8a8 	bl	8004e04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb8:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <xTaskRemoveFromEventList+0xb8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d903      	bls.n	8006cc8 <xTaskRemoveFromEventList+0x60>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	4a16      	ldr	r2, [pc, #88]	; (8006d20 <xTaskRemoveFromEventList+0xb8>)
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4a13      	ldr	r2, [pc, #76]	; (8006d24 <xTaskRemoveFromEventList+0xbc>)
 8006cd6:	441a      	add	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f7fe f833 	bl	8004d4a <vListInsertEnd>
 8006ce4:	e005      	b.n	8006cf2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3318      	adds	r3, #24
 8006cea:	4619      	mov	r1, r3
 8006cec:	480e      	ldr	r0, [pc, #56]	; (8006d28 <xTaskRemoveFromEventList+0xc0>)
 8006cee:	f7fe f82c 	bl	8004d4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <xTaskRemoveFromEventList+0xc4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d905      	bls.n	8006d0c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d04:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <xTaskRemoveFromEventList+0xc8>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e001      	b.n	8006d10 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d10:	697b      	ldr	r3, [r7, #20]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20000c58 	.word	0x20000c58
 8006d20:	20000c38 	.word	0x20000c38
 8006d24:	20000760 	.word	0x20000760
 8006d28:	20000bf0 	.word	0x20000bf0
 8006d2c:	2000075c 	.word	0x2000075c
 8006d30:	20000c44 	.word	0x20000c44

08006d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <vTaskInternalSetTimeOutState+0x24>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <vTaskInternalSetTimeOutState+0x28>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	605a      	str	r2, [r3, #4]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	20000c48 	.word	0x20000c48
 8006d5c:	20000c34 	.word	0x20000c34

08006d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10c      	bne.n	8006d8a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	b672      	cpsid	i
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	b662      	cpsie	i
 8006d84:	613b      	str	r3, [r7, #16]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10c      	bne.n	8006daa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	b672      	cpsid	i
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	b662      	cpsie	i
 8006da4:	60fb      	str	r3, [r7, #12]
}
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006daa:	f000 ff7f 	bl	8007cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006dae:	4b1d      	ldr	r3, [pc, #116]	; (8006e24 <xTaskCheckForTimeOut+0xc4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc6:	d102      	bne.n	8006dce <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	e023      	b.n	8006e16 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <xTaskCheckForTimeOut+0xc8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d007      	beq.n	8006dea <xTaskCheckForTimeOut+0x8a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d302      	bcc.n	8006dea <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	e015      	b.n	8006e16 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d20b      	bcs.n	8006e0c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	1ad2      	subs	r2, r2, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff ff97 	bl	8006d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	e004      	b.n	8006e16 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e12:	2301      	movs	r3, #1
 8006e14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e16:	f000 ff7d 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3720      	adds	r7, #32
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20000c34 	.word	0x20000c34
 8006e28:	20000c48 	.word	0x20000c48

08006e2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e30:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <vTaskMissedYield+0x14>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
}
 8006e36:	bf00      	nop
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	20000c44 	.word	0x20000c44

08006e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e4c:	f000 f852 	bl	8006ef4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <prvIdleTask+0x28>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d9f9      	bls.n	8006e4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <prvIdleTask+0x2c>)
 8006e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e68:	e7f0      	b.n	8006e4c <prvIdleTask+0x8>
 8006e6a:	bf00      	nop
 8006e6c:	20000760 	.word	0x20000760
 8006e70:	e000ed04 	.word	0xe000ed04

08006e74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	607b      	str	r3, [r7, #4]
 8006e7e:	e00c      	b.n	8006e9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4a12      	ldr	r2, [pc, #72]	; (8006ed4 <prvInitialiseTaskLists+0x60>)
 8006e8c:	4413      	add	r3, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fd ff2e 	bl	8004cf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3301      	adds	r3, #1
 8006e98:	607b      	str	r3, [r7, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b37      	cmp	r3, #55	; 0x37
 8006e9e:	d9ef      	bls.n	8006e80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ea0:	480d      	ldr	r0, [pc, #52]	; (8006ed8 <prvInitialiseTaskLists+0x64>)
 8006ea2:	f7fd ff25 	bl	8004cf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ea6:	480d      	ldr	r0, [pc, #52]	; (8006edc <prvInitialiseTaskLists+0x68>)
 8006ea8:	f7fd ff22 	bl	8004cf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006eac:	480c      	ldr	r0, [pc, #48]	; (8006ee0 <prvInitialiseTaskLists+0x6c>)
 8006eae:	f7fd ff1f 	bl	8004cf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006eb2:	480c      	ldr	r0, [pc, #48]	; (8006ee4 <prvInitialiseTaskLists+0x70>)
 8006eb4:	f7fd ff1c 	bl	8004cf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006eb8:	480b      	ldr	r0, [pc, #44]	; (8006ee8 <prvInitialiseTaskLists+0x74>)
 8006eba:	f7fd ff19 	bl	8004cf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <prvInitialiseTaskLists+0x78>)
 8006ec0:	4a05      	ldr	r2, [pc, #20]	; (8006ed8 <prvInitialiseTaskLists+0x64>)
 8006ec2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <prvInitialiseTaskLists+0x7c>)
 8006ec6:	4a05      	ldr	r2, [pc, #20]	; (8006edc <prvInitialiseTaskLists+0x68>)
 8006ec8:	601a      	str	r2, [r3, #0]
}
 8006eca:	bf00      	nop
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000760 	.word	0x20000760
 8006ed8:	20000bc0 	.word	0x20000bc0
 8006edc:	20000bd4 	.word	0x20000bd4
 8006ee0:	20000bf0 	.word	0x20000bf0
 8006ee4:	20000c04 	.word	0x20000c04
 8006ee8:	20000c1c 	.word	0x20000c1c
 8006eec:	20000be8 	.word	0x20000be8
 8006ef0:	20000bec 	.word	0x20000bec

08006ef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006efa:	e019      	b.n	8006f30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006efc:	f000 fed6 	bl	8007cac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f00:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <prvCheckTasksWaitingTermination+0x50>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fd ff79 	bl	8004e04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f12:	4b0d      	ldr	r3, [pc, #52]	; (8006f48 <prvCheckTasksWaitingTermination+0x54>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	4a0b      	ldr	r2, [pc, #44]	; (8006f48 <prvCheckTasksWaitingTermination+0x54>)
 8006f1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <prvCheckTasksWaitingTermination+0x58>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <prvCheckTasksWaitingTermination+0x58>)
 8006f24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f26:	f000 fef5 	bl	8007d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f810 	bl	8006f50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f30:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <prvCheckTasksWaitingTermination+0x58>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e1      	bne.n	8006efc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f38:	bf00      	nop
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000c04 	.word	0x20000c04
 8006f48:	20000c30 	.word	0x20000c30
 8006f4c:	20000c18 	.word	0x20000c18

08006f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d108      	bne.n	8006f74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 f896 	bl	8008098 <vPortFree>
				vPortFree( pxTCB );
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 f893 	bl	8008098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f72:	e01a      	b.n	8006faa <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d103      	bne.n	8006f86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 f88a 	bl	8008098 <vPortFree>
	}
 8006f84:	e011      	b.n	8006faa <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d00c      	beq.n	8006faa <prvDeleteTCB+0x5a>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	b672      	cpsid	i
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	b662      	cpsie	i
 8006fa4:	60fb      	str	r3, [r7, #12]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <prvDeleteTCB+0x58>
	}
 8006faa:	bf00      	nop
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <prvResetNextTaskUnblockTime+0x38>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8006fc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fcc:	e008      	b.n	8006fe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fce:	4b07      	ldr	r3, [pc, #28]	; (8006fec <prvResetNextTaskUnblockTime+0x38>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	4a04      	ldr	r2, [pc, #16]	; (8006ff0 <prvResetNextTaskUnblockTime+0x3c>)
 8006fde:	6013      	str	r3, [r2, #0]
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	20000be8 	.word	0x20000be8
 8006ff0:	20000c50 	.word	0x20000c50

08006ff4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006ffa:	4b05      	ldr	r3, [pc, #20]	; (8007010 <xTaskGetCurrentTaskHandle+0x1c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007000:	687b      	ldr	r3, [r7, #4]
	}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	2000075c 	.word	0x2000075c

08007014 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800701a:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <xTaskGetSchedulerState+0x34>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007022:	2301      	movs	r3, #1
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	e008      	b.n	800703a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007028:	4b08      	ldr	r3, [pc, #32]	; (800704c <xTaskGetSchedulerState+0x38>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d102      	bne.n	8007036 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007030:	2302      	movs	r3, #2
 8007032:	607b      	str	r3, [r7, #4]
 8007034:	e001      	b.n	800703a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007036:	2300      	movs	r3, #0
 8007038:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800703a:	687b      	ldr	r3, [r7, #4]
	}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	20000c3c 	.word	0x20000c3c
 800704c:	20000c58 	.word	0x20000c58

08007050 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d051      	beq.n	800710a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706a:	4b2a      	ldr	r3, [pc, #168]	; (8007114 <xTaskPriorityInherit+0xc4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	429a      	cmp	r2, r3
 8007072:	d241      	bcs.n	80070f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	db06      	blt.n	800708a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800707c:	4b25      	ldr	r3, [pc, #148]	; (8007114 <xTaskPriorityInherit+0xc4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	6959      	ldr	r1, [r3, #20]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4a1f      	ldr	r2, [pc, #124]	; (8007118 <xTaskPriorityInherit+0xc8>)
 800709c:	4413      	add	r3, r2
 800709e:	4299      	cmp	r1, r3
 80070a0:	d122      	bne.n	80070e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fd feac 	bl	8004e04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070ac:	4b19      	ldr	r3, [pc, #100]	; (8007114 <xTaskPriorityInherit+0xc4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ba:	4b18      	ldr	r3, [pc, #96]	; (800711c <xTaskPriorityInherit+0xcc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d903      	bls.n	80070ca <xTaskPriorityInherit+0x7a>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	4a15      	ldr	r2, [pc, #84]	; (800711c <xTaskPriorityInherit+0xcc>)
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4a10      	ldr	r2, [pc, #64]	; (8007118 <xTaskPriorityInherit+0xc8>)
 80070d8:	441a      	add	r2, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	3304      	adds	r3, #4
 80070de:	4619      	mov	r1, r3
 80070e0:	4610      	mov	r0, r2
 80070e2:	f7fd fe32 	bl	8004d4a <vListInsertEnd>
 80070e6:	e004      	b.n	80070f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070e8:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <xTaskPriorityInherit+0xc4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070f2:	2301      	movs	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	e008      	b.n	800710a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <xTaskPriorityInherit+0xc4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	429a      	cmp	r2, r3
 8007104:	d201      	bcs.n	800710a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007106:	2301      	movs	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800710a:	68fb      	ldr	r3, [r7, #12]
	}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	2000075c 	.word	0x2000075c
 8007118:	20000760 	.word	0x20000760
 800711c:	20000c38 	.word	0x20000c38

08007120 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800712c:	2300      	movs	r3, #0
 800712e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d05a      	beq.n	80071ec <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007136:	4b30      	ldr	r3, [pc, #192]	; (80071f8 <xTaskPriorityDisinherit+0xd8>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	429a      	cmp	r2, r3
 800713e:	d00c      	beq.n	800715a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	b672      	cpsid	i
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	b662      	cpsie	i
 8007154:	60fb      	str	r3, [r7, #12]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10c      	bne.n	800717c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	b672      	cpsid	i
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	b662      	cpsie	i
 8007176:	60bb      	str	r3, [r7, #8]
}
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007180:	1e5a      	subs	r2, r3, #1
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	429a      	cmp	r2, r3
 8007190:	d02c      	beq.n	80071ec <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007196:	2b00      	cmp	r3, #0
 8007198:	d128      	bne.n	80071ec <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3304      	adds	r3, #4
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fd fe30 	bl	8004e04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071bc:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <xTaskPriorityDisinherit+0xdc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d903      	bls.n	80071cc <xTaskPriorityDisinherit+0xac>
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	4a0c      	ldr	r2, [pc, #48]	; (80071fc <xTaskPriorityDisinherit+0xdc>)
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4a09      	ldr	r2, [pc, #36]	; (8007200 <xTaskPriorityDisinherit+0xe0>)
 80071da:	441a      	add	r2, r3
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	3304      	adds	r3, #4
 80071e0:	4619      	mov	r1, r3
 80071e2:	4610      	mov	r0, r2
 80071e4:	f7fd fdb1 	bl	8004d4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071e8:	2301      	movs	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071ec:	697b      	ldr	r3, [r7, #20]
	}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	2000075c 	.word	0x2000075c
 80071fc:	20000c38 	.word	0x20000c38
 8007200:	20000760 	.word	0x20000760

08007204 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007212:	2301      	movs	r3, #1
 8007214:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d06e      	beq.n	80072fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10c      	bne.n	800723e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	b672      	cpsid	i
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	b662      	cpsie	i
 8007238:	60fb      	str	r3, [r7, #12]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d902      	bls.n	800724e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	61fb      	str	r3, [r7, #28]
 800724c:	e002      	b.n	8007254 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007252:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	429a      	cmp	r2, r3
 800725c:	d04d      	beq.n	80072fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	429a      	cmp	r2, r3
 8007266:	d148      	bne.n	80072fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007268:	4b26      	ldr	r3, [pc, #152]	; (8007304 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	429a      	cmp	r2, r3
 8007270:	d10c      	bne.n	800728c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	b672      	cpsid	i
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	b662      	cpsie	i
 8007286:	60bb      	str	r3, [r7, #8]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	2b00      	cmp	r3, #0
 800729e:	db04      	blt.n	80072aa <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	6959      	ldr	r1, [r3, #20]
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4a13      	ldr	r2, [pc, #76]	; (8007308 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80072ba:	4413      	add	r3, r2
 80072bc:	4299      	cmp	r1, r3
 80072be:	d11c      	bne.n	80072fa <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fd fd9d 	bl	8004e04 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ce:	4b0f      	ldr	r3, [pc, #60]	; (800730c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d903      	bls.n	80072de <vTaskPriorityDisinheritAfterTimeout+0xda>
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	4a0c      	ldr	r2, [pc, #48]	; (800730c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4a07      	ldr	r2, [pc, #28]	; (8007308 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80072ec:	441a      	add	r2, r3
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	3304      	adds	r3, #4
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f7fd fd28 	bl	8004d4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072fa:	bf00      	nop
 80072fc:	3720      	adds	r7, #32
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	2000075c 	.word	0x2000075c
 8007308:	20000760 	.word	0x20000760
 800730c:	20000c38 	.word	0x20000c38

08007310 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007314:	4b07      	ldr	r3, [pc, #28]	; (8007334 <pvTaskIncrementMutexHeldCount+0x24>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <pvTaskIncrementMutexHeldCount+0x24>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007322:	3201      	adds	r2, #1
 8007324:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007326:	4b03      	ldr	r3, [pc, #12]	; (8007334 <pvTaskIncrementMutexHeldCount+0x24>)
 8007328:	681b      	ldr	r3, [r3, #0]
	}
 800732a:	4618      	mov	r0, r3
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	2000075c 	.word	0x2000075c

08007338 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007342:	4b21      	ldr	r3, [pc, #132]	; (80073c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007348:	4b20      	ldr	r3, [pc, #128]	; (80073cc <prvAddCurrentTaskToDelayedList+0x94>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3304      	adds	r3, #4
 800734e:	4618      	mov	r0, r3
 8007350:	f7fd fd58 	bl	8004e04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800735a:	d10a      	bne.n	8007372 <prvAddCurrentTaskToDelayedList+0x3a>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007362:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <prvAddCurrentTaskToDelayedList+0x94>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3304      	adds	r3, #4
 8007368:	4619      	mov	r1, r3
 800736a:	4819      	ldr	r0, [pc, #100]	; (80073d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800736c:	f7fd fced 	bl	8004d4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007370:	e026      	b.n	80073c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800737a:	4b14      	ldr	r3, [pc, #80]	; (80073cc <prvAddCurrentTaskToDelayedList+0x94>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	429a      	cmp	r2, r3
 8007388:	d209      	bcs.n	800739e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800738a:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <prvAddCurrentTaskToDelayedList+0x94>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3304      	adds	r3, #4
 8007394:	4619      	mov	r1, r3
 8007396:	4610      	mov	r0, r2
 8007398:	f7fd fcfb 	bl	8004d92 <vListInsert>
}
 800739c:	e010      	b.n	80073c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800739e:	4b0e      	ldr	r3, [pc, #56]	; (80073d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b0a      	ldr	r3, [pc, #40]	; (80073cc <prvAddCurrentTaskToDelayedList+0x94>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f7fd fcf1 	bl	8004d92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d202      	bcs.n	80073c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073ba:	4a08      	ldr	r2, [pc, #32]	; (80073dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6013      	str	r3, [r2, #0]
}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000c34 	.word	0x20000c34
 80073cc:	2000075c 	.word	0x2000075c
 80073d0:	20000c1c 	.word	0x20000c1c
 80073d4:	20000bec 	.word	0x20000bec
 80073d8:	20000be8 	.word	0x20000be8
 80073dc:	20000c50 	.word	0x20000c50

080073e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073ea:	f000 fb15 	bl	8007a18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073ee:	4b1d      	ldr	r3, [pc, #116]	; (8007464 <xTimerCreateTimerTask+0x84>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d021      	beq.n	800743a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073fe:	1d3a      	adds	r2, r7, #4
 8007400:	f107 0108 	add.w	r1, r7, #8
 8007404:	f107 030c 	add.w	r3, r7, #12
 8007408:	4618      	mov	r0, r3
 800740a:	f7fd fc57 	bl	8004cbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	9202      	str	r2, [sp, #8]
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	2302      	movs	r3, #2
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	2300      	movs	r3, #0
 800741e:	460a      	mov	r2, r1
 8007420:	4911      	ldr	r1, [pc, #68]	; (8007468 <xTimerCreateTimerTask+0x88>)
 8007422:	4812      	ldr	r0, [pc, #72]	; (800746c <xTimerCreateTimerTask+0x8c>)
 8007424:	f7fe fe28 	bl	8006078 <xTaskCreateStatic>
 8007428:	4603      	mov	r3, r0
 800742a:	4a11      	ldr	r2, [pc, #68]	; (8007470 <xTimerCreateTimerTask+0x90>)
 800742c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800742e:	4b10      	ldr	r3, [pc, #64]	; (8007470 <xTimerCreateTimerTask+0x90>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007436:	2301      	movs	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10c      	bne.n	800745a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	b672      	cpsid	i
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	b662      	cpsie	i
 8007454:	613b      	str	r3, [r7, #16]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800745a:	697b      	ldr	r3, [r7, #20]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20000c8c 	.word	0x20000c8c
 8007468:	080095f0 	.word	0x080095f0
 800746c:	080075b1 	.word	0x080075b1
 8007470:	20000c90 	.word	0x20000c90

08007474 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	; 0x28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007482:	2300      	movs	r3, #0
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10c      	bne.n	80074a6 <xTimerGenericCommand+0x32>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	b672      	cpsid	i
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	b662      	cpsie	i
 80074a0:	623b      	str	r3, [r7, #32]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074a6:	4b1a      	ldr	r3, [pc, #104]	; (8007510 <xTimerGenericCommand+0x9c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d02a      	beq.n	8007504 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b05      	cmp	r3, #5
 80074be:	dc18      	bgt.n	80074f2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074c0:	f7ff fda8 	bl	8007014 <xTaskGetSchedulerState>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d109      	bne.n	80074de <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074ca:	4b11      	ldr	r3, [pc, #68]	; (8007510 <xTimerGenericCommand+0x9c>)
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	f107 0110 	add.w	r1, r7, #16
 80074d2:	2300      	movs	r3, #0
 80074d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d6:	f7fd ff3d 	bl	8005354 <xQueueGenericSend>
 80074da:	6278      	str	r0, [r7, #36]	; 0x24
 80074dc:	e012      	b.n	8007504 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074de:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <xTimerGenericCommand+0x9c>)
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	f107 0110 	add.w	r1, r7, #16
 80074e6:	2300      	movs	r3, #0
 80074e8:	2200      	movs	r2, #0
 80074ea:	f7fd ff33 	bl	8005354 <xQueueGenericSend>
 80074ee:	6278      	str	r0, [r7, #36]	; 0x24
 80074f0:	e008      	b.n	8007504 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074f2:	4b07      	ldr	r3, [pc, #28]	; (8007510 <xTimerGenericCommand+0x9c>)
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f107 0110 	add.w	r1, r7, #16
 80074fa:	2300      	movs	r3, #0
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	f7fe f82f 	bl	8005560 <xQueueGenericSendFromISR>
 8007502:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007506:	4618      	mov	r0, r3
 8007508:	3728      	adds	r7, #40	; 0x28
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000c8c 	.word	0x20000c8c

08007514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af02      	add	r7, sp, #8
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800751e:	4b23      	ldr	r3, [pc, #140]	; (80075ac <prvProcessExpiredTimer+0x98>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	3304      	adds	r3, #4
 800752c:	4618      	mov	r0, r3
 800752e:	f7fd fc69 	bl	8004e04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b00      	cmp	r3, #0
 800753e:	d024      	beq.n	800758a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	699a      	ldr	r2, [r3, #24]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	18d1      	adds	r1, r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	6978      	ldr	r0, [r7, #20]
 800754e:	f000 f8d3 	bl	80076f8 <prvInsertTimerInActiveList>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d021      	beq.n	800759c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007558:	2300      	movs	r3, #0
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	2300      	movs	r3, #0
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	2100      	movs	r1, #0
 8007562:	6978      	ldr	r0, [r7, #20]
 8007564:	f7ff ff86 	bl	8007474 <xTimerGenericCommand>
 8007568:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d115      	bne.n	800759c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	b672      	cpsid	i
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	b662      	cpsie	i
 8007584:	60fb      	str	r3, [r7, #12]
}
 8007586:	bf00      	nop
 8007588:	e7fe      	b.n	8007588 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007590:	f023 0301 	bic.w	r3, r3, #1
 8007594:	b2da      	uxtb	r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	6978      	ldr	r0, [r7, #20]
 80075a2:	4798      	blx	r3
}
 80075a4:	bf00      	nop
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000c84 	.word	0x20000c84

080075b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075b8:	f107 0308 	add.w	r3, r7, #8
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f857 	bl	8007670 <prvGetNextExpireTime>
 80075c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4619      	mov	r1, r3
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f803 	bl	80075d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075ce:	f000 f8d5 	bl	800777c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075d2:	e7f1      	b.n	80075b8 <prvTimerTask+0x8>

080075d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075de:	f7ff f915 	bl	800680c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075e2:	f107 0308 	add.w	r3, r7, #8
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f866 	bl	80076b8 <prvSampleTimeNow>
 80075ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d130      	bne.n	8007656 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <prvProcessTimerOrBlockTask+0x3c>
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d806      	bhi.n	8007610 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007602:	f7ff f911 	bl	8006828 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff ff83 	bl	8007514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800760e:	e024      	b.n	800765a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007616:	4b13      	ldr	r3, [pc, #76]	; (8007664 <prvProcessTimerOrBlockTask+0x90>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <prvProcessTimerOrBlockTask+0x50>
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <prvProcessTimerOrBlockTask+0x52>
 8007624:	2300      	movs	r3, #0
 8007626:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007628:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <prvProcessTimerOrBlockTask+0x94>)
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	4619      	mov	r1, r3
 8007636:	f7fe fceb 	bl	8006010 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800763a:	f7ff f8f5 	bl	8006828 <xTaskResumeAll>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007644:	4b09      	ldr	r3, [pc, #36]	; (800766c <prvProcessTimerOrBlockTask+0x98>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
}
 8007654:	e001      	b.n	800765a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007656:	f7ff f8e7 	bl	8006828 <xTaskResumeAll>
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000c88 	.word	0x20000c88
 8007668:	20000c8c 	.word	0x20000c8c
 800766c:	e000ed04 	.word	0xe000ed04

08007670 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007678:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <prvGetNextExpireTime+0x44>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <prvGetNextExpireTime+0x16>
 8007682:	2201      	movs	r2, #1
 8007684:	e000      	b.n	8007688 <prvGetNextExpireTime+0x18>
 8007686:	2200      	movs	r2, #0
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d105      	bne.n	80076a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <prvGetNextExpireTime+0x44>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e001      	b.n	80076a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076a4:	68fb      	ldr	r3, [r7, #12]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000c84 	.word	0x20000c84

080076b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076c0:	f7ff f952 	bl	8006968 <xTaskGetTickCount>
 80076c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076c6:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <prvSampleTimeNow+0x3c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d205      	bcs.n	80076dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076d0:	f000 f93c 	bl	800794c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e002      	b.n	80076e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076e2:	4a04      	ldr	r2, [pc, #16]	; (80076f4 <prvSampleTimeNow+0x3c>)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076e8:	68fb      	ldr	r3, [r7, #12]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20000c94 	.word	0x20000c94

080076f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	429a      	cmp	r2, r3
 800771c:	d812      	bhi.n	8007744 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	1ad2      	subs	r2, r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	429a      	cmp	r2, r3
 800772a:	d302      	bcc.n	8007732 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	e01b      	b.n	800776a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007732:	4b10      	ldr	r3, [pc, #64]	; (8007774 <prvInsertTimerInActiveList+0x7c>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3304      	adds	r3, #4
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f7fd fb28 	bl	8004d92 <vListInsert>
 8007742:	e012      	b.n	800776a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d206      	bcs.n	800775a <prvInsertTimerInActiveList+0x62>
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d302      	bcc.n	800775a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007754:	2301      	movs	r3, #1
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e007      	b.n	800776a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800775a:	4b07      	ldr	r3, [pc, #28]	; (8007778 <prvInsertTimerInActiveList+0x80>)
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3304      	adds	r3, #4
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f7fd fb14 	bl	8004d92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800776a:	697b      	ldr	r3, [r7, #20]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20000c88 	.word	0x20000c88
 8007778:	20000c84 	.word	0x20000c84

0800777c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08e      	sub	sp, #56	; 0x38
 8007780:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007782:	e0d0      	b.n	8007926 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	da1a      	bge.n	80077c0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800778a:	1d3b      	adds	r3, r7, #4
 800778c:	3304      	adds	r3, #4
 800778e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10c      	bne.n	80077b0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779a:	b672      	cpsid	i
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	b662      	cpsie	i
 80077aa:	61fb      	str	r3, [r7, #28]
}
 80077ac:	bf00      	nop
 80077ae:	e7fe      	b.n	80077ae <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b6:	6850      	ldr	r0, [r2, #4]
 80077b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ba:	6892      	ldr	r2, [r2, #8]
 80077bc:	4611      	mov	r1, r2
 80077be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f2c0 80ae 	blt.w	8007924 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d004      	beq.n	80077de <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	3304      	adds	r3, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fd fb13 	bl	8004e04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077de:	463b      	mov	r3, r7
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff ff69 	bl	80076b8 <prvSampleTimeNow>
 80077e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b09      	cmp	r3, #9
 80077ec:	f200 809b 	bhi.w	8007926 <prvProcessReceivedCommands+0x1aa>
 80077f0:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <prvProcessReceivedCommands+0x7c>)
 80077f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f6:	bf00      	nop
 80077f8:	08007821 	.word	0x08007821
 80077fc:	08007821 	.word	0x08007821
 8007800:	08007821 	.word	0x08007821
 8007804:	08007899 	.word	0x08007899
 8007808:	080078ad 	.word	0x080078ad
 800780c:	080078fb 	.word	0x080078fb
 8007810:	08007821 	.word	0x08007821
 8007814:	08007821 	.word	0x08007821
 8007818:	08007899 	.word	0x08007899
 800781c:	080078ad 	.word	0x080078ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007826:	f043 0301 	orr.w	r3, r3, #1
 800782a:	b2da      	uxtb	r2, r3
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	18d1      	adds	r1, r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007840:	f7ff ff5a 	bl	80076f8 <prvInsertTimerInActiveList>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d06d      	beq.n	8007926 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007850:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d062      	beq.n	8007926 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	441a      	add	r2, r3
 8007868:	2300      	movs	r3, #0
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	2300      	movs	r3, #0
 800786e:	2100      	movs	r1, #0
 8007870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007872:	f7ff fdff 	bl	8007474 <xTimerGenericCommand>
 8007876:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d153      	bne.n	8007926 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	b672      	cpsid	i
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	b662      	cpsie	i
 8007892:	61bb      	str	r3, [r7, #24]
}
 8007894:	bf00      	nop
 8007896:	e7fe      	b.n	8007896 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800789e:	f023 0301 	bic.w	r3, r3, #1
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80078aa:	e03c      	b.n	8007926 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078b2:	f043 0301 	orr.w	r3, r3, #1
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10c      	bne.n	80078e6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	b672      	cpsid	i
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	b662      	cpsie	i
 80078e0:	617b      	str	r3, [r7, #20]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	699a      	ldr	r2, [r3, #24]
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	18d1      	adds	r1, r2, r3
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f4:	f7ff ff00 	bl	80076f8 <prvInsertTimerInActiveList>
					break;
 80078f8:	e015      	b.n	8007926 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d103      	bne.n	8007910 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800790a:	f000 fbc5 	bl	8008098 <vPortFree>
 800790e:	e00a      	b.n	8007926 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	b2da      	uxtb	r2, r3
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007922:	e000      	b.n	8007926 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007924:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007926:	4b08      	ldr	r3, [pc, #32]	; (8007948 <prvProcessReceivedCommands+0x1cc>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	1d39      	adds	r1, r7, #4
 800792c:	2200      	movs	r2, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f7fd ff4c 	bl	80057cc <xQueueReceive>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	f47f af24 	bne.w	8007784 <prvProcessReceivedCommands+0x8>
	}
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	3730      	adds	r7, #48	; 0x30
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000c8c 	.word	0x20000c8c

0800794c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007952:	e04a      	b.n	80079ea <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007954:	4b2e      	ldr	r3, [pc, #184]	; (8007a10 <prvSwitchTimerLists+0xc4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795e:	4b2c      	ldr	r3, [pc, #176]	; (8007a10 <prvSwitchTimerLists+0xc4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3304      	adds	r3, #4
 800796c:	4618      	mov	r0, r3
 800796e:	f7fd fa49 	bl	8004e04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	d030      	beq.n	80079ea <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4413      	add	r3, r2
 8007990:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	429a      	cmp	r2, r3
 8007998:	d90e      	bls.n	80079b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <prvSwitchTimerLists+0xc4>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7fd f9ee 	bl	8004d92 <vListInsert>
 80079b6:	e018      	b.n	80079ea <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079b8:	2300      	movs	r3, #0
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	2300      	movs	r3, #0
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	2100      	movs	r1, #0
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f7ff fd56 	bl	8007474 <xTimerGenericCommand>
 80079c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10c      	bne.n	80079ea <prvSwitchTimerLists+0x9e>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	b672      	cpsid	i
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	b662      	cpsie	i
 80079e4:	603b      	str	r3, [r7, #0]
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079ea:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <prvSwitchTimerLists+0xc4>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1af      	bne.n	8007954 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079f4:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <prvSwitchTimerLists+0xc4>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079fa:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <prvSwitchTimerLists+0xc8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a04      	ldr	r2, [pc, #16]	; (8007a10 <prvSwitchTimerLists+0xc4>)
 8007a00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a02:	4a04      	ldr	r2, [pc, #16]	; (8007a14 <prvSwitchTimerLists+0xc8>)
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	6013      	str	r3, [r2, #0]
}
 8007a08:	bf00      	nop
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000c84 	.word	0x20000c84
 8007a14:	20000c88 	.word	0x20000c88

08007a18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a1e:	f000 f945 	bl	8007cac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a22:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <prvCheckForValidListAndQueue+0x60>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d120      	bne.n	8007a6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a2a:	4814      	ldr	r0, [pc, #80]	; (8007a7c <prvCheckForValidListAndQueue+0x64>)
 8007a2c:	f7fd f960 	bl	8004cf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a30:	4813      	ldr	r0, [pc, #76]	; (8007a80 <prvCheckForValidListAndQueue+0x68>)
 8007a32:	f7fd f95d 	bl	8004cf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <prvCheckForValidListAndQueue+0x6c>)
 8007a38:	4a10      	ldr	r2, [pc, #64]	; (8007a7c <prvCheckForValidListAndQueue+0x64>)
 8007a3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a3c:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <prvCheckForValidListAndQueue+0x70>)
 8007a3e:	4a10      	ldr	r2, [pc, #64]	; (8007a80 <prvCheckForValidListAndQueue+0x68>)
 8007a40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a42:	2300      	movs	r3, #0
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	4b11      	ldr	r3, [pc, #68]	; (8007a8c <prvCheckForValidListAndQueue+0x74>)
 8007a48:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <prvCheckForValidListAndQueue+0x78>)
 8007a4a:	2110      	movs	r1, #16
 8007a4c:	200a      	movs	r0, #10
 8007a4e:	f7fd fa6d 	bl	8004f2c <xQueueGenericCreateStatic>
 8007a52:	4603      	mov	r3, r0
 8007a54:	4a08      	ldr	r2, [pc, #32]	; (8007a78 <prvCheckForValidListAndQueue+0x60>)
 8007a56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a58:	4b07      	ldr	r3, [pc, #28]	; (8007a78 <prvCheckForValidListAndQueue+0x60>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <prvCheckForValidListAndQueue+0x60>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	490b      	ldr	r1, [pc, #44]	; (8007a94 <prvCheckForValidListAndQueue+0x7c>)
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fa7e 	bl	8005f68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a6c:	f000 f952 	bl	8007d14 <vPortExitCritical>
}
 8007a70:	bf00      	nop
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000c8c 	.word	0x20000c8c
 8007a7c:	20000c5c 	.word	0x20000c5c
 8007a80:	20000c70 	.word	0x20000c70
 8007a84:	20000c84 	.word	0x20000c84
 8007a88:	20000c88 	.word	0x20000c88
 8007a8c:	20000d38 	.word	0x20000d38
 8007a90:	20000c98 	.word	0x20000c98
 8007a94:	080095f8 	.word	0x080095f8

08007a98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3b04      	subs	r3, #4
 8007aa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f023 0201 	bic.w	r2, r3, #1
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3b04      	subs	r3, #4
 8007ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ac8:	4a0c      	ldr	r2, [pc, #48]	; (8007afc <pxPortInitialiseStack+0x64>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3b14      	subs	r3, #20
 8007ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b04      	subs	r3, #4
 8007ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f06f 0202 	mvn.w	r2, #2
 8007ae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3b20      	subs	r3, #32
 8007aec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007aee:	68fb      	ldr	r3, [r7, #12]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	08007b01 	.word	0x08007b01

08007b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b0a:	4b14      	ldr	r3, [pc, #80]	; (8007b5c <prvTaskExitError+0x5c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b12:	d00c      	beq.n	8007b2e <prvTaskExitError+0x2e>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	b672      	cpsid	i
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	b662      	cpsie	i
 8007b28:	60fb      	str	r3, [r7, #12]
}
 8007b2a:	bf00      	nop
 8007b2c:	e7fe      	b.n	8007b2c <prvTaskExitError+0x2c>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	b672      	cpsid	i
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	b662      	cpsie	i
 8007b42:	60bb      	str	r3, [r7, #8]
}
 8007b44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b46:	bf00      	nop
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0fc      	beq.n	8007b48 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b4e:	bf00      	nop
 8007b50:	bf00      	nop
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	20000018 	.word	0x20000018

08007b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <pxCurrentTCBConst2>)
 8007b62:	6819      	ldr	r1, [r3, #0]
 8007b64:	6808      	ldr	r0, [r1, #0]
 8007b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6a:	f380 8809 	msr	PSP, r0
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8811 	msr	BASEPRI, r0
 8007b7a:	4770      	bx	lr
 8007b7c:	f3af 8000 	nop.w

08007b80 <pxCurrentTCBConst2>:
 8007b80:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b88:	4808      	ldr	r0, [pc, #32]	; (8007bac <prvPortStartFirstTask+0x24>)
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	f380 8808 	msr	MSP, r0
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8814 	msr	CONTROL, r0
 8007b9a:	b662      	cpsie	i
 8007b9c:	b661      	cpsie	f
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	df00      	svc	0
 8007ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007baa:	bf00      	nop
 8007bac:	e000ed08 	.word	0xe000ed08

08007bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bb6:	4b37      	ldr	r3, [pc, #220]	; (8007c94 <xPortStartScheduler+0xe4>)
 8007bb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	22ff      	movs	r2, #255	; 0xff
 8007bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	4b2f      	ldr	r3, [pc, #188]	; (8007c98 <xPortStartScheduler+0xe8>)
 8007bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bde:	4b2f      	ldr	r3, [pc, #188]	; (8007c9c <xPortStartScheduler+0xec>)
 8007be0:	2207      	movs	r2, #7
 8007be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007be4:	e009      	b.n	8007bfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007be6:	4b2d      	ldr	r3, [pc, #180]	; (8007c9c <xPortStartScheduler+0xec>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	4a2b      	ldr	r2, [pc, #172]	; (8007c9c <xPortStartScheduler+0xec>)
 8007bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c02:	2b80      	cmp	r3, #128	; 0x80
 8007c04:	d0ef      	beq.n	8007be6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c06:	4b25      	ldr	r3, [pc, #148]	; (8007c9c <xPortStartScheduler+0xec>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f1c3 0307 	rsb	r3, r3, #7
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d00c      	beq.n	8007c2c <xPortStartScheduler+0x7c>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	b672      	cpsid	i
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	b662      	cpsie	i
 8007c26:	60bb      	str	r3, [r7, #8]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c2c:	4b1b      	ldr	r3, [pc, #108]	; (8007c9c <xPortStartScheduler+0xec>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	021b      	lsls	r3, r3, #8
 8007c32:	4a1a      	ldr	r2, [pc, #104]	; (8007c9c <xPortStartScheduler+0xec>)
 8007c34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c36:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <xPortStartScheduler+0xec>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c3e:	4a17      	ldr	r2, [pc, #92]	; (8007c9c <xPortStartScheduler+0xec>)
 8007c40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c4a:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <xPortStartScheduler+0xf0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a14      	ldr	r2, [pc, #80]	; (8007ca0 <xPortStartScheduler+0xf0>)
 8007c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c56:	4b12      	ldr	r3, [pc, #72]	; (8007ca0 <xPortStartScheduler+0xf0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a11      	ldr	r2, [pc, #68]	; (8007ca0 <xPortStartScheduler+0xf0>)
 8007c5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c62:	f000 f8dd 	bl	8007e20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c66:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <xPortStartScheduler+0xf4>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c6c:	f000 f8fc 	bl	8007e68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c70:	4b0d      	ldr	r3, [pc, #52]	; (8007ca8 <xPortStartScheduler+0xf8>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a0c      	ldr	r2, [pc, #48]	; (8007ca8 <xPortStartScheduler+0xf8>)
 8007c76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c7c:	f7ff ff84 	bl	8007b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c80:	f7fe ff3e 	bl	8006b00 <vTaskSwitchContext>
	prvTaskExitError();
 8007c84:	f7ff ff3c 	bl	8007b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	e000e400 	.word	0xe000e400
 8007c98:	20000d88 	.word	0x20000d88
 8007c9c:	20000d8c 	.word	0x20000d8c
 8007ca0:	e000ed20 	.word	0xe000ed20
 8007ca4:	20000018 	.word	0x20000018
 8007ca8:	e000ef34 	.word	0xe000ef34

08007cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	b672      	cpsid	i
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	b662      	cpsie	i
 8007cc6:	607b      	str	r3, [r7, #4]
}
 8007cc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cca:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <vPortEnterCritical+0x60>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	4a0e      	ldr	r2, [pc, #56]	; (8007d0c <vPortEnterCritical+0x60>)
 8007cd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cd4:	4b0d      	ldr	r3, [pc, #52]	; (8007d0c <vPortEnterCritical+0x60>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d111      	bne.n	8007d00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	; (8007d10 <vPortEnterCritical+0x64>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00c      	beq.n	8007d00 <vPortEnterCritical+0x54>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	b672      	cpsid	i
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	b662      	cpsie	i
 8007cfa:	603b      	str	r3, [r7, #0]
}
 8007cfc:	bf00      	nop
 8007cfe:	e7fe      	b.n	8007cfe <vPortEnterCritical+0x52>
	}
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	20000018 	.word	0x20000018
 8007d10:	e000ed04 	.word	0xe000ed04

08007d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d1a:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <vPortExitCritical+0x54>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10c      	bne.n	8007d3c <vPortExitCritical+0x28>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	b672      	cpsid	i
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	b662      	cpsie	i
 8007d36:	607b      	str	r3, [r7, #4]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <vPortExitCritical+0x54>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	4a09      	ldr	r2, [pc, #36]	; (8007d68 <vPortExitCritical+0x54>)
 8007d44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d46:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <vPortExitCritical+0x54>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d105      	bne.n	8007d5a <vPortExitCritical+0x46>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	f383 8811 	msr	BASEPRI, r3
}
 8007d58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	20000018 	.word	0x20000018
 8007d6c:	00000000 	.word	0x00000000

08007d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d70:	f3ef 8009 	mrs	r0, PSP
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <pxCurrentTCBConst>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	f01e 0f10 	tst.w	lr, #16
 8007d80:	bf08      	it	eq
 8007d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8a:	6010      	str	r0, [r2, #0]
 8007d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d94:	b672      	cpsid	i
 8007d96:	f380 8811 	msr	BASEPRI, r0
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	b662      	cpsie	i
 8007da4:	f7fe feac 	bl	8006b00 <vTaskSwitchContext>
 8007da8:	f04f 0000 	mov.w	r0, #0
 8007dac:	f380 8811 	msr	BASEPRI, r0
 8007db0:	bc09      	pop	{r0, r3}
 8007db2:	6819      	ldr	r1, [r3, #0]
 8007db4:	6808      	ldr	r0, [r1, #0]
 8007db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dba:	f01e 0f10 	tst.w	lr, #16
 8007dbe:	bf08      	it	eq
 8007dc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007dc4:	f380 8809 	msr	PSP, r0
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop

08007dd0 <pxCurrentTCBConst>:
 8007dd0:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop

08007dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	b672      	cpsid	i
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	b662      	cpsie	i
 8007df2:	607b      	str	r3, [r7, #4]
}
 8007df4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007df6:	f7fe fdc7 	bl	8006988 <xTaskIncrementTick>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e00:	4b06      	ldr	r3, [pc, #24]	; (8007e1c <SysTick_Handler+0x44>)
 8007e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	f383 8811 	msr	BASEPRI, r3
}
 8007e12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	e000ed04 	.word	0xe000ed04

08007e20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e24:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <vPortSetupTimerInterrupt+0x34>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <vPortSetupTimerInterrupt+0x38>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e30:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <vPortSetupTimerInterrupt+0x3c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a0a      	ldr	r2, [pc, #40]	; (8007e60 <vPortSetupTimerInterrupt+0x40>)
 8007e36:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3a:	099b      	lsrs	r3, r3, #6
 8007e3c:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <vPortSetupTimerInterrupt+0x44>)
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e42:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <vPortSetupTimerInterrupt+0x34>)
 8007e44:	2207      	movs	r2, #7
 8007e46:	601a      	str	r2, [r3, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	e000e010 	.word	0xe000e010
 8007e58:	e000e018 	.word	0xe000e018
 8007e5c:	2000000c 	.word	0x2000000c
 8007e60:	10624dd3 	.word	0x10624dd3
 8007e64:	e000e014 	.word	0xe000e014

08007e68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e78 <vPortEnableVFP+0x10>
 8007e6c:	6801      	ldr	r1, [r0, #0]
 8007e6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e72:	6001      	str	r1, [r0, #0]
 8007e74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e76:	bf00      	nop
 8007e78:	e000ed88 	.word	0xe000ed88

08007e7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e82:	f3ef 8305 	mrs	r3, IPSR
 8007e86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b0f      	cmp	r3, #15
 8007e8c:	d916      	bls.n	8007ebc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e8e:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <vPortValidateInterruptPriority+0x78>)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e98:	4b17      	ldr	r3, [pc, #92]	; (8007ef8 <vPortValidateInterruptPriority+0x7c>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	7afa      	ldrb	r2, [r7, #11]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d20c      	bcs.n	8007ebc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	b672      	cpsid	i
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	b662      	cpsie	i
 8007eb6:	607b      	str	r3, [r7, #4]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ebc:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <vPortValidateInterruptPriority+0x80>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ec4:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <vPortValidateInterruptPriority+0x84>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d90c      	bls.n	8007ee6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	b672      	cpsid	i
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	b662      	cpsie	i
 8007ee0:	603b      	str	r3, [r7, #0]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <vPortValidateInterruptPriority+0x68>
	}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	e000e3f0 	.word	0xe000e3f0
 8007ef8:	20000d88 	.word	0x20000d88
 8007efc:	e000ed0c 	.word	0xe000ed0c
 8007f00:	20000d8c 	.word	0x20000d8c

08007f04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08a      	sub	sp, #40	; 0x28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f10:	f7fe fc7c 	bl	800680c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f14:	4b5b      	ldr	r3, [pc, #364]	; (8008084 <pvPortMalloc+0x180>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f1c:	f000 f91a 	bl	8008154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f20:	4b59      	ldr	r3, [pc, #356]	; (8008088 <pvPortMalloc+0x184>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4013      	ands	r3, r2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f040 8092 	bne.w	8008052 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01f      	beq.n	8007f74 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007f34:	2208      	movs	r2, #8
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4413      	add	r3, r2
 8007f3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d016      	beq.n	8007f74 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f023 0307 	bic.w	r3, r3, #7
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00c      	beq.n	8007f74 <pvPortMalloc+0x70>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	b672      	cpsid	i
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	b662      	cpsie	i
 8007f6e:	617b      	str	r3, [r7, #20]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d06b      	beq.n	8008052 <pvPortMalloc+0x14e>
 8007f7a:	4b44      	ldr	r3, [pc, #272]	; (800808c <pvPortMalloc+0x188>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d866      	bhi.n	8008052 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f84:	4b42      	ldr	r3, [pc, #264]	; (8008090 <pvPortMalloc+0x18c>)
 8007f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f88:	4b41      	ldr	r3, [pc, #260]	; (8008090 <pvPortMalloc+0x18c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f8e:	e004      	b.n	8007f9a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d903      	bls.n	8007fac <pvPortMalloc+0xa8>
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1f1      	bne.n	8007f90 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fac:	4b35      	ldr	r3, [pc, #212]	; (8008084 <pvPortMalloc+0x180>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d04d      	beq.n	8008052 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2208      	movs	r2, #8
 8007fbc:	4413      	add	r3, r2
 8007fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d921      	bls.n	800801c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00c      	beq.n	8008004 <pvPortMalloc+0x100>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	b672      	cpsid	i
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	b662      	cpsie	i
 8007ffe:	613b      	str	r3, [r7, #16]
}
 8008000:	bf00      	nop
 8008002:	e7fe      	b.n	8008002 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	1ad2      	subs	r2, r2, r3
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008016:	69b8      	ldr	r0, [r7, #24]
 8008018:	f000 f8fe 	bl	8008218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800801c:	4b1b      	ldr	r3, [pc, #108]	; (800808c <pvPortMalloc+0x188>)
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	4a19      	ldr	r2, [pc, #100]	; (800808c <pvPortMalloc+0x188>)
 8008028:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800802a:	4b18      	ldr	r3, [pc, #96]	; (800808c <pvPortMalloc+0x188>)
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	4b19      	ldr	r3, [pc, #100]	; (8008094 <pvPortMalloc+0x190>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d203      	bcs.n	800803e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008036:	4b15      	ldr	r3, [pc, #84]	; (800808c <pvPortMalloc+0x188>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a16      	ldr	r2, [pc, #88]	; (8008094 <pvPortMalloc+0x190>)
 800803c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	4b11      	ldr	r3, [pc, #68]	; (8008088 <pvPortMalloc+0x184>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	431a      	orrs	r2, r3
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008052:	f7fe fbe9 	bl	8006828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00c      	beq.n	800807a <pvPortMalloc+0x176>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	b672      	cpsid	i
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	b662      	cpsie	i
 8008074:	60fb      	str	r3, [r7, #12]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <pvPortMalloc+0x174>
	return pvReturn;
 800807a:	69fb      	ldr	r3, [r7, #28]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3728      	adds	r7, #40	; 0x28
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20004998 	.word	0x20004998
 8008088:	200049a4 	.word	0x200049a4
 800808c:	2000499c 	.word	0x2000499c
 8008090:	20004990 	.word	0x20004990
 8008094:	200049a0 	.word	0x200049a0

08008098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d04c      	beq.n	8008144 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080aa:	2308      	movs	r3, #8
 80080ac:	425b      	negs	r3, r3
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4413      	add	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	4b23      	ldr	r3, [pc, #140]	; (800814c <vPortFree+0xb4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4013      	ands	r3, r2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10c      	bne.n	80080e0 <vPortFree+0x48>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ca:	b672      	cpsid	i
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	b662      	cpsie	i
 80080da:	60fb      	str	r3, [r7, #12]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00c      	beq.n	8008102 <vPortFree+0x6a>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	b672      	cpsid	i
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	b662      	cpsie	i
 80080fc:	60bb      	str	r3, [r7, #8]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b11      	ldr	r3, [pc, #68]	; (800814c <vPortFree+0xb4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4013      	ands	r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d019      	beq.n	8008144 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d115      	bne.n	8008144 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	4b0b      	ldr	r3, [pc, #44]	; (800814c <vPortFree+0xb4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	43db      	mvns	r3, r3
 8008122:	401a      	ands	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008128:	f7fe fb70 	bl	800680c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	4b07      	ldr	r3, [pc, #28]	; (8008150 <vPortFree+0xb8>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4413      	add	r3, r2
 8008136:	4a06      	ldr	r2, [pc, #24]	; (8008150 <vPortFree+0xb8>)
 8008138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800813a:	6938      	ldr	r0, [r7, #16]
 800813c:	f000 f86c 	bl	8008218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008140:	f7fe fb72 	bl	8006828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008144:	bf00      	nop
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	200049a4 	.word	0x200049a4
 8008150:	2000499c 	.word	0x2000499c

08008154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800815a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800815e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008160:	4b27      	ldr	r3, [pc, #156]	; (8008200 <prvHeapInit+0xac>)
 8008162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3307      	adds	r3, #7
 8008172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	4a1f      	ldr	r2, [pc, #124]	; (8008200 <prvHeapInit+0xac>)
 8008184:	4413      	add	r3, r2
 8008186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800818c:	4a1d      	ldr	r2, [pc, #116]	; (8008204 <prvHeapInit+0xb0>)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008192:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <prvHeapInit+0xb0>)
 8008194:	2200      	movs	r2, #0
 8008196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081a0:	2208      	movs	r2, #8
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0307 	bic.w	r3, r3, #7
 80081ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a15      	ldr	r2, [pc, #84]	; (8008208 <prvHeapInit+0xb4>)
 80081b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <prvHeapInit+0xb4>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <prvHeapInit+0xb4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081d4:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <prvHeapInit+0xb4>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	; (800820c <prvHeapInit+0xb8>)
 80081e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4a09      	ldr	r2, [pc, #36]	; (8008210 <prvHeapInit+0xbc>)
 80081ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081ec:	4b09      	ldr	r3, [pc, #36]	; (8008214 <prvHeapInit+0xc0>)
 80081ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	20000d90 	.word	0x20000d90
 8008204:	20004990 	.word	0x20004990
 8008208:	20004998 	.word	0x20004998
 800820c:	200049a0 	.word	0x200049a0
 8008210:	2000499c 	.word	0x2000499c
 8008214:	200049a4 	.word	0x200049a4

08008218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008220:	4b28      	ldr	r3, [pc, #160]	; (80082c4 <prvInsertBlockIntoFreeList+0xac>)
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e002      	b.n	800822c <prvInsertBlockIntoFreeList+0x14>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	429a      	cmp	r2, r3
 8008234:	d8f7      	bhi.n	8008226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	d108      	bne.n	800825a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	441a      	add	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	441a      	add	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d118      	bne.n	80082a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d00d      	beq.n	8008296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	441a      	add	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e008      	b.n	80082a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008296:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e003      	b.n	80082a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d002      	beq.n	80082b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20004990 	.word	0x20004990
 80082c8:	20004998 	.word	0x20004998

080082cc <__errno>:
 80082cc:	4b01      	ldr	r3, [pc, #4]	; (80082d4 <__errno+0x8>)
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	2000001c 	.word	0x2000001c

080082d8 <__libc_init_array>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	4d0d      	ldr	r5, [pc, #52]	; (8008310 <__libc_init_array+0x38>)
 80082dc:	4c0d      	ldr	r4, [pc, #52]	; (8008314 <__libc_init_array+0x3c>)
 80082de:	1b64      	subs	r4, r4, r5
 80082e0:	10a4      	asrs	r4, r4, #2
 80082e2:	2600      	movs	r6, #0
 80082e4:	42a6      	cmp	r6, r4
 80082e6:	d109      	bne.n	80082fc <__libc_init_array+0x24>
 80082e8:	4d0b      	ldr	r5, [pc, #44]	; (8008318 <__libc_init_array+0x40>)
 80082ea:	4c0c      	ldr	r4, [pc, #48]	; (800831c <__libc_init_array+0x44>)
 80082ec:	f001 f92a 	bl	8009544 <_init>
 80082f0:	1b64      	subs	r4, r4, r5
 80082f2:	10a4      	asrs	r4, r4, #2
 80082f4:	2600      	movs	r6, #0
 80082f6:	42a6      	cmp	r6, r4
 80082f8:	d105      	bne.n	8008306 <__libc_init_array+0x2e>
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008300:	4798      	blx	r3
 8008302:	3601      	adds	r6, #1
 8008304:	e7ee      	b.n	80082e4 <__libc_init_array+0xc>
 8008306:	f855 3b04 	ldr.w	r3, [r5], #4
 800830a:	4798      	blx	r3
 800830c:	3601      	adds	r6, #1
 800830e:	e7f2      	b.n	80082f6 <__libc_init_array+0x1e>
 8008310:	080097d8 	.word	0x080097d8
 8008314:	080097d8 	.word	0x080097d8
 8008318:	080097d8 	.word	0x080097d8
 800831c:	080097dc 	.word	0x080097dc

08008320 <malloc>:
 8008320:	4b02      	ldr	r3, [pc, #8]	; (800832c <malloc+0xc>)
 8008322:	4601      	mov	r1, r0
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	f000 b871 	b.w	800840c <_malloc_r>
 800832a:	bf00      	nop
 800832c:	2000001c 	.word	0x2000001c

08008330 <free>:
 8008330:	4b02      	ldr	r3, [pc, #8]	; (800833c <free+0xc>)
 8008332:	4601      	mov	r1, r0
 8008334:	6818      	ldr	r0, [r3, #0]
 8008336:	f000 b819 	b.w	800836c <_free_r>
 800833a:	bf00      	nop
 800833c:	2000001c 	.word	0x2000001c

08008340 <memcpy>:
 8008340:	440a      	add	r2, r1
 8008342:	4291      	cmp	r1, r2
 8008344:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008348:	d100      	bne.n	800834c <memcpy+0xc>
 800834a:	4770      	bx	lr
 800834c:	b510      	push	{r4, lr}
 800834e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008356:	4291      	cmp	r1, r2
 8008358:	d1f9      	bne.n	800834e <memcpy+0xe>
 800835a:	bd10      	pop	{r4, pc}

0800835c <memset>:
 800835c:	4402      	add	r2, r0
 800835e:	4603      	mov	r3, r0
 8008360:	4293      	cmp	r3, r2
 8008362:	d100      	bne.n	8008366 <memset+0xa>
 8008364:	4770      	bx	lr
 8008366:	f803 1b01 	strb.w	r1, [r3], #1
 800836a:	e7f9      	b.n	8008360 <memset+0x4>

0800836c <_free_r>:
 800836c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800836e:	2900      	cmp	r1, #0
 8008370:	d048      	beq.n	8008404 <_free_r+0x98>
 8008372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008376:	9001      	str	r0, [sp, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	f1a1 0404 	sub.w	r4, r1, #4
 800837e:	bfb8      	it	lt
 8008380:	18e4      	addlt	r4, r4, r3
 8008382:	f000 fce5 	bl	8008d50 <__malloc_lock>
 8008386:	4a20      	ldr	r2, [pc, #128]	; (8008408 <_free_r+0x9c>)
 8008388:	9801      	ldr	r0, [sp, #4]
 800838a:	6813      	ldr	r3, [r2, #0]
 800838c:	4615      	mov	r5, r2
 800838e:	b933      	cbnz	r3, 800839e <_free_r+0x32>
 8008390:	6063      	str	r3, [r4, #4]
 8008392:	6014      	str	r4, [r2, #0]
 8008394:	b003      	add	sp, #12
 8008396:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800839a:	f000 bcdf 	b.w	8008d5c <__malloc_unlock>
 800839e:	42a3      	cmp	r3, r4
 80083a0:	d90b      	bls.n	80083ba <_free_r+0x4e>
 80083a2:	6821      	ldr	r1, [r4, #0]
 80083a4:	1862      	adds	r2, r4, r1
 80083a6:	4293      	cmp	r3, r2
 80083a8:	bf04      	itt	eq
 80083aa:	681a      	ldreq	r2, [r3, #0]
 80083ac:	685b      	ldreq	r3, [r3, #4]
 80083ae:	6063      	str	r3, [r4, #4]
 80083b0:	bf04      	itt	eq
 80083b2:	1852      	addeq	r2, r2, r1
 80083b4:	6022      	streq	r2, [r4, #0]
 80083b6:	602c      	str	r4, [r5, #0]
 80083b8:	e7ec      	b.n	8008394 <_free_r+0x28>
 80083ba:	461a      	mov	r2, r3
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	b10b      	cbz	r3, 80083c4 <_free_r+0x58>
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d9fa      	bls.n	80083ba <_free_r+0x4e>
 80083c4:	6811      	ldr	r1, [r2, #0]
 80083c6:	1855      	adds	r5, r2, r1
 80083c8:	42a5      	cmp	r5, r4
 80083ca:	d10b      	bne.n	80083e4 <_free_r+0x78>
 80083cc:	6824      	ldr	r4, [r4, #0]
 80083ce:	4421      	add	r1, r4
 80083d0:	1854      	adds	r4, r2, r1
 80083d2:	42a3      	cmp	r3, r4
 80083d4:	6011      	str	r1, [r2, #0]
 80083d6:	d1dd      	bne.n	8008394 <_free_r+0x28>
 80083d8:	681c      	ldr	r4, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	6053      	str	r3, [r2, #4]
 80083de:	4421      	add	r1, r4
 80083e0:	6011      	str	r1, [r2, #0]
 80083e2:	e7d7      	b.n	8008394 <_free_r+0x28>
 80083e4:	d902      	bls.n	80083ec <_free_r+0x80>
 80083e6:	230c      	movs	r3, #12
 80083e8:	6003      	str	r3, [r0, #0]
 80083ea:	e7d3      	b.n	8008394 <_free_r+0x28>
 80083ec:	6825      	ldr	r5, [r4, #0]
 80083ee:	1961      	adds	r1, r4, r5
 80083f0:	428b      	cmp	r3, r1
 80083f2:	bf04      	itt	eq
 80083f4:	6819      	ldreq	r1, [r3, #0]
 80083f6:	685b      	ldreq	r3, [r3, #4]
 80083f8:	6063      	str	r3, [r4, #4]
 80083fa:	bf04      	itt	eq
 80083fc:	1949      	addeq	r1, r1, r5
 80083fe:	6021      	streq	r1, [r4, #0]
 8008400:	6054      	str	r4, [r2, #4]
 8008402:	e7c7      	b.n	8008394 <_free_r+0x28>
 8008404:	b003      	add	sp, #12
 8008406:	bd30      	pop	{r4, r5, pc}
 8008408:	200049a8 	.word	0x200049a8

0800840c <_malloc_r>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	1ccd      	adds	r5, r1, #3
 8008410:	f025 0503 	bic.w	r5, r5, #3
 8008414:	3508      	adds	r5, #8
 8008416:	2d0c      	cmp	r5, #12
 8008418:	bf38      	it	cc
 800841a:	250c      	movcc	r5, #12
 800841c:	2d00      	cmp	r5, #0
 800841e:	4606      	mov	r6, r0
 8008420:	db01      	blt.n	8008426 <_malloc_r+0x1a>
 8008422:	42a9      	cmp	r1, r5
 8008424:	d903      	bls.n	800842e <_malloc_r+0x22>
 8008426:	230c      	movs	r3, #12
 8008428:	6033      	str	r3, [r6, #0]
 800842a:	2000      	movs	r0, #0
 800842c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800842e:	f000 fc8f 	bl	8008d50 <__malloc_lock>
 8008432:	4921      	ldr	r1, [pc, #132]	; (80084b8 <_malloc_r+0xac>)
 8008434:	680a      	ldr	r2, [r1, #0]
 8008436:	4614      	mov	r4, r2
 8008438:	b99c      	cbnz	r4, 8008462 <_malloc_r+0x56>
 800843a:	4f20      	ldr	r7, [pc, #128]	; (80084bc <_malloc_r+0xb0>)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	b923      	cbnz	r3, 800844a <_malloc_r+0x3e>
 8008440:	4621      	mov	r1, r4
 8008442:	4630      	mov	r0, r6
 8008444:	f000 f938 	bl	80086b8 <_sbrk_r>
 8008448:	6038      	str	r0, [r7, #0]
 800844a:	4629      	mov	r1, r5
 800844c:	4630      	mov	r0, r6
 800844e:	f000 f933 	bl	80086b8 <_sbrk_r>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	d123      	bne.n	800849e <_malloc_r+0x92>
 8008456:	230c      	movs	r3, #12
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	4630      	mov	r0, r6
 800845c:	f000 fc7e 	bl	8008d5c <__malloc_unlock>
 8008460:	e7e3      	b.n	800842a <_malloc_r+0x1e>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	1b5b      	subs	r3, r3, r5
 8008466:	d417      	bmi.n	8008498 <_malloc_r+0x8c>
 8008468:	2b0b      	cmp	r3, #11
 800846a:	d903      	bls.n	8008474 <_malloc_r+0x68>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	441c      	add	r4, r3
 8008470:	6025      	str	r5, [r4, #0]
 8008472:	e004      	b.n	800847e <_malloc_r+0x72>
 8008474:	6863      	ldr	r3, [r4, #4]
 8008476:	42a2      	cmp	r2, r4
 8008478:	bf0c      	ite	eq
 800847a:	600b      	streq	r3, [r1, #0]
 800847c:	6053      	strne	r3, [r2, #4]
 800847e:	4630      	mov	r0, r6
 8008480:	f000 fc6c 	bl	8008d5c <__malloc_unlock>
 8008484:	f104 000b 	add.w	r0, r4, #11
 8008488:	1d23      	adds	r3, r4, #4
 800848a:	f020 0007 	bic.w	r0, r0, #7
 800848e:	1ac2      	subs	r2, r0, r3
 8008490:	d0cc      	beq.n	800842c <_malloc_r+0x20>
 8008492:	1a1b      	subs	r3, r3, r0
 8008494:	50a3      	str	r3, [r4, r2]
 8008496:	e7c9      	b.n	800842c <_malloc_r+0x20>
 8008498:	4622      	mov	r2, r4
 800849a:	6864      	ldr	r4, [r4, #4]
 800849c:	e7cc      	b.n	8008438 <_malloc_r+0x2c>
 800849e:	1cc4      	adds	r4, r0, #3
 80084a0:	f024 0403 	bic.w	r4, r4, #3
 80084a4:	42a0      	cmp	r0, r4
 80084a6:	d0e3      	beq.n	8008470 <_malloc_r+0x64>
 80084a8:	1a21      	subs	r1, r4, r0
 80084aa:	4630      	mov	r0, r6
 80084ac:	f000 f904 	bl	80086b8 <_sbrk_r>
 80084b0:	3001      	adds	r0, #1
 80084b2:	d1dd      	bne.n	8008470 <_malloc_r+0x64>
 80084b4:	e7cf      	b.n	8008456 <_malloc_r+0x4a>
 80084b6:	bf00      	nop
 80084b8:	200049a8 	.word	0x200049a8
 80084bc:	200049ac 	.word	0x200049ac

080084c0 <iprintf>:
 80084c0:	b40f      	push	{r0, r1, r2, r3}
 80084c2:	4b0a      	ldr	r3, [pc, #40]	; (80084ec <iprintf+0x2c>)
 80084c4:	b513      	push	{r0, r1, r4, lr}
 80084c6:	681c      	ldr	r4, [r3, #0]
 80084c8:	b124      	cbz	r4, 80084d4 <iprintf+0x14>
 80084ca:	69a3      	ldr	r3, [r4, #24]
 80084cc:	b913      	cbnz	r3, 80084d4 <iprintf+0x14>
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 fb14 	bl	8008afc <__sinit>
 80084d4:	ab05      	add	r3, sp, #20
 80084d6:	9a04      	ldr	r2, [sp, #16]
 80084d8:	68a1      	ldr	r1, [r4, #8]
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 fc6d 	bl	8008dbc <_vfiprintf_r>
 80084e2:	b002      	add	sp, #8
 80084e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e8:	b004      	add	sp, #16
 80084ea:	4770      	bx	lr
 80084ec:	2000001c 	.word	0x2000001c

080084f0 <_puts_r>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	460e      	mov	r6, r1
 80084f4:	4605      	mov	r5, r0
 80084f6:	b118      	cbz	r0, 8008500 <_puts_r+0x10>
 80084f8:	6983      	ldr	r3, [r0, #24]
 80084fa:	b90b      	cbnz	r3, 8008500 <_puts_r+0x10>
 80084fc:	f000 fafe 	bl	8008afc <__sinit>
 8008500:	69ab      	ldr	r3, [r5, #24]
 8008502:	68ac      	ldr	r4, [r5, #8]
 8008504:	b913      	cbnz	r3, 800850c <_puts_r+0x1c>
 8008506:	4628      	mov	r0, r5
 8008508:	f000 faf8 	bl	8008afc <__sinit>
 800850c:	4b2c      	ldr	r3, [pc, #176]	; (80085c0 <_puts_r+0xd0>)
 800850e:	429c      	cmp	r4, r3
 8008510:	d120      	bne.n	8008554 <_puts_r+0x64>
 8008512:	686c      	ldr	r4, [r5, #4]
 8008514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008516:	07db      	lsls	r3, r3, #31
 8008518:	d405      	bmi.n	8008526 <_puts_r+0x36>
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	0598      	lsls	r0, r3, #22
 800851e:	d402      	bmi.n	8008526 <_puts_r+0x36>
 8008520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008522:	f000 fbae 	bl	8008c82 <__retarget_lock_acquire_recursive>
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	0719      	lsls	r1, r3, #28
 800852a:	d51d      	bpl.n	8008568 <_puts_r+0x78>
 800852c:	6923      	ldr	r3, [r4, #16]
 800852e:	b1db      	cbz	r3, 8008568 <_puts_r+0x78>
 8008530:	3e01      	subs	r6, #1
 8008532:	68a3      	ldr	r3, [r4, #8]
 8008534:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008538:	3b01      	subs	r3, #1
 800853a:	60a3      	str	r3, [r4, #8]
 800853c:	bb39      	cbnz	r1, 800858e <_puts_r+0x9e>
 800853e:	2b00      	cmp	r3, #0
 8008540:	da38      	bge.n	80085b4 <_puts_r+0xc4>
 8008542:	4622      	mov	r2, r4
 8008544:	210a      	movs	r1, #10
 8008546:	4628      	mov	r0, r5
 8008548:	f000 f8e0 	bl	800870c <__swbuf_r>
 800854c:	3001      	adds	r0, #1
 800854e:	d011      	beq.n	8008574 <_puts_r+0x84>
 8008550:	250a      	movs	r5, #10
 8008552:	e011      	b.n	8008578 <_puts_r+0x88>
 8008554:	4b1b      	ldr	r3, [pc, #108]	; (80085c4 <_puts_r+0xd4>)
 8008556:	429c      	cmp	r4, r3
 8008558:	d101      	bne.n	800855e <_puts_r+0x6e>
 800855a:	68ac      	ldr	r4, [r5, #8]
 800855c:	e7da      	b.n	8008514 <_puts_r+0x24>
 800855e:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <_puts_r+0xd8>)
 8008560:	429c      	cmp	r4, r3
 8008562:	bf08      	it	eq
 8008564:	68ec      	ldreq	r4, [r5, #12]
 8008566:	e7d5      	b.n	8008514 <_puts_r+0x24>
 8008568:	4621      	mov	r1, r4
 800856a:	4628      	mov	r0, r5
 800856c:	f000 f920 	bl	80087b0 <__swsetup_r>
 8008570:	2800      	cmp	r0, #0
 8008572:	d0dd      	beq.n	8008530 <_puts_r+0x40>
 8008574:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800857a:	07da      	lsls	r2, r3, #31
 800857c:	d405      	bmi.n	800858a <_puts_r+0x9a>
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	059b      	lsls	r3, r3, #22
 8008582:	d402      	bmi.n	800858a <_puts_r+0x9a>
 8008584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008586:	f000 fb7d 	bl	8008c84 <__retarget_lock_release_recursive>
 800858a:	4628      	mov	r0, r5
 800858c:	bd70      	pop	{r4, r5, r6, pc}
 800858e:	2b00      	cmp	r3, #0
 8008590:	da04      	bge.n	800859c <_puts_r+0xac>
 8008592:	69a2      	ldr	r2, [r4, #24]
 8008594:	429a      	cmp	r2, r3
 8008596:	dc06      	bgt.n	80085a6 <_puts_r+0xb6>
 8008598:	290a      	cmp	r1, #10
 800859a:	d004      	beq.n	80085a6 <_puts_r+0xb6>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	6022      	str	r2, [r4, #0]
 80085a2:	7019      	strb	r1, [r3, #0]
 80085a4:	e7c5      	b.n	8008532 <_puts_r+0x42>
 80085a6:	4622      	mov	r2, r4
 80085a8:	4628      	mov	r0, r5
 80085aa:	f000 f8af 	bl	800870c <__swbuf_r>
 80085ae:	3001      	adds	r0, #1
 80085b0:	d1bf      	bne.n	8008532 <_puts_r+0x42>
 80085b2:	e7df      	b.n	8008574 <_puts_r+0x84>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	250a      	movs	r5, #10
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	6022      	str	r2, [r4, #0]
 80085bc:	701d      	strb	r5, [r3, #0]
 80085be:	e7db      	b.n	8008578 <_puts_r+0x88>
 80085c0:	0800975c 	.word	0x0800975c
 80085c4:	0800977c 	.word	0x0800977c
 80085c8:	0800973c 	.word	0x0800973c

080085cc <puts>:
 80085cc:	4b02      	ldr	r3, [pc, #8]	; (80085d8 <puts+0xc>)
 80085ce:	4601      	mov	r1, r0
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	f7ff bf8d 	b.w	80084f0 <_puts_r>
 80085d6:	bf00      	nop
 80085d8:	2000001c 	.word	0x2000001c

080085dc <srand>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4b10      	ldr	r3, [pc, #64]	; (8008620 <srand+0x44>)
 80085e0:	681d      	ldr	r5, [r3, #0]
 80085e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80085e4:	4604      	mov	r4, r0
 80085e6:	b9b3      	cbnz	r3, 8008616 <srand+0x3a>
 80085e8:	2018      	movs	r0, #24
 80085ea:	f7ff fe99 	bl	8008320 <malloc>
 80085ee:	4602      	mov	r2, r0
 80085f0:	63a8      	str	r0, [r5, #56]	; 0x38
 80085f2:	b920      	cbnz	r0, 80085fe <srand+0x22>
 80085f4:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <srand+0x48>)
 80085f6:	480c      	ldr	r0, [pc, #48]	; (8008628 <srand+0x4c>)
 80085f8:	2142      	movs	r1, #66	; 0x42
 80085fa:	f000 f947 	bl	800888c <__assert_func>
 80085fe:	490b      	ldr	r1, [pc, #44]	; (800862c <srand+0x50>)
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <srand+0x54>)
 8008602:	e9c0 1300 	strd	r1, r3, [r0]
 8008606:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <srand+0x58>)
 8008608:	6083      	str	r3, [r0, #8]
 800860a:	230b      	movs	r3, #11
 800860c:	8183      	strh	r3, [r0, #12]
 800860e:	2100      	movs	r1, #0
 8008610:	2001      	movs	r0, #1
 8008612:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008616:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008618:	2200      	movs	r2, #0
 800861a:	611c      	str	r4, [r3, #16]
 800861c:	615a      	str	r2, [r3, #20]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	2000001c 	.word	0x2000001c
 8008624:	08009688 	.word	0x08009688
 8008628:	0800969f 	.word	0x0800969f
 800862c:	abcd330e 	.word	0xabcd330e
 8008630:	e66d1234 	.word	0xe66d1234
 8008634:	0005deec 	.word	0x0005deec

08008638 <rand>:
 8008638:	4b17      	ldr	r3, [pc, #92]	; (8008698 <rand+0x60>)
 800863a:	b510      	push	{r4, lr}
 800863c:	681c      	ldr	r4, [r3, #0]
 800863e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008640:	b9b3      	cbnz	r3, 8008670 <rand+0x38>
 8008642:	2018      	movs	r0, #24
 8008644:	f7ff fe6c 	bl	8008320 <malloc>
 8008648:	63a0      	str	r0, [r4, #56]	; 0x38
 800864a:	b928      	cbnz	r0, 8008658 <rand+0x20>
 800864c:	4602      	mov	r2, r0
 800864e:	4b13      	ldr	r3, [pc, #76]	; (800869c <rand+0x64>)
 8008650:	4813      	ldr	r0, [pc, #76]	; (80086a0 <rand+0x68>)
 8008652:	214e      	movs	r1, #78	; 0x4e
 8008654:	f000 f91a 	bl	800888c <__assert_func>
 8008658:	4a12      	ldr	r2, [pc, #72]	; (80086a4 <rand+0x6c>)
 800865a:	4b13      	ldr	r3, [pc, #76]	; (80086a8 <rand+0x70>)
 800865c:	e9c0 2300 	strd	r2, r3, [r0]
 8008660:	4b12      	ldr	r3, [pc, #72]	; (80086ac <rand+0x74>)
 8008662:	6083      	str	r3, [r0, #8]
 8008664:	230b      	movs	r3, #11
 8008666:	8183      	strh	r3, [r0, #12]
 8008668:	2201      	movs	r2, #1
 800866a:	2300      	movs	r3, #0
 800866c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008670:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008672:	480f      	ldr	r0, [pc, #60]	; (80086b0 <rand+0x78>)
 8008674:	690a      	ldr	r2, [r1, #16]
 8008676:	694b      	ldr	r3, [r1, #20]
 8008678:	4c0e      	ldr	r4, [pc, #56]	; (80086b4 <rand+0x7c>)
 800867a:	4350      	muls	r0, r2
 800867c:	fb04 0003 	mla	r0, r4, r3, r0
 8008680:	fba2 3404 	umull	r3, r4, r2, r4
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	4404      	add	r4, r0
 8008688:	f144 0000 	adc.w	r0, r4, #0
 800868c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8008690:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008694:	bd10      	pop	{r4, pc}
 8008696:	bf00      	nop
 8008698:	2000001c 	.word	0x2000001c
 800869c:	08009688 	.word	0x08009688
 80086a0:	0800969f 	.word	0x0800969f
 80086a4:	abcd330e 	.word	0xabcd330e
 80086a8:	e66d1234 	.word	0xe66d1234
 80086ac:	0005deec 	.word	0x0005deec
 80086b0:	5851f42d 	.word	0x5851f42d
 80086b4:	4c957f2d 	.word	0x4c957f2d

080086b8 <_sbrk_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d06      	ldr	r5, [pc, #24]	; (80086d4 <_sbrk_r+0x1c>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	f7f8 fd5a 	bl	800117c <_sbrk>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_sbrk_r+0x1a>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_sbrk_r+0x1a>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	20004f64 	.word	0x20004f64

080086d8 <time>:
 80086d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086da:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <time+0x30>)
 80086dc:	2200      	movs	r2, #0
 80086de:	4669      	mov	r1, sp
 80086e0:	4604      	mov	r4, r0
 80086e2:	6818      	ldr	r0, [r3, #0]
 80086e4:	f000 faba 	bl	8008c5c <_gettimeofday_r>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	bfbe      	ittt	lt
 80086ec:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80086f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086f4:	e9cd 2300 	strdlt	r2, r3, [sp]
 80086f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086fc:	b10c      	cbz	r4, 8008702 <time+0x2a>
 80086fe:	e9c4 0100 	strd	r0, r1, [r4]
 8008702:	b004      	add	sp, #16
 8008704:	bd10      	pop	{r4, pc}
 8008706:	bf00      	nop
 8008708:	2000001c 	.word	0x2000001c

0800870c <__swbuf_r>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	460e      	mov	r6, r1
 8008710:	4614      	mov	r4, r2
 8008712:	4605      	mov	r5, r0
 8008714:	b118      	cbz	r0, 800871e <__swbuf_r+0x12>
 8008716:	6983      	ldr	r3, [r0, #24]
 8008718:	b90b      	cbnz	r3, 800871e <__swbuf_r+0x12>
 800871a:	f000 f9ef 	bl	8008afc <__sinit>
 800871e:	4b21      	ldr	r3, [pc, #132]	; (80087a4 <__swbuf_r+0x98>)
 8008720:	429c      	cmp	r4, r3
 8008722:	d12b      	bne.n	800877c <__swbuf_r+0x70>
 8008724:	686c      	ldr	r4, [r5, #4]
 8008726:	69a3      	ldr	r3, [r4, #24]
 8008728:	60a3      	str	r3, [r4, #8]
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	071a      	lsls	r2, r3, #28
 800872e:	d52f      	bpl.n	8008790 <__swbuf_r+0x84>
 8008730:	6923      	ldr	r3, [r4, #16]
 8008732:	b36b      	cbz	r3, 8008790 <__swbuf_r+0x84>
 8008734:	6923      	ldr	r3, [r4, #16]
 8008736:	6820      	ldr	r0, [r4, #0]
 8008738:	1ac0      	subs	r0, r0, r3
 800873a:	6963      	ldr	r3, [r4, #20]
 800873c:	b2f6      	uxtb	r6, r6
 800873e:	4283      	cmp	r3, r0
 8008740:	4637      	mov	r7, r6
 8008742:	dc04      	bgt.n	800874e <__swbuf_r+0x42>
 8008744:	4621      	mov	r1, r4
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f944 	bl	80089d4 <_fflush_r>
 800874c:	bb30      	cbnz	r0, 800879c <__swbuf_r+0x90>
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	3b01      	subs	r3, #1
 8008752:	60a3      	str	r3, [r4, #8]
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	6022      	str	r2, [r4, #0]
 800875a:	701e      	strb	r6, [r3, #0]
 800875c:	6963      	ldr	r3, [r4, #20]
 800875e:	3001      	adds	r0, #1
 8008760:	4283      	cmp	r3, r0
 8008762:	d004      	beq.n	800876e <__swbuf_r+0x62>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	07db      	lsls	r3, r3, #31
 8008768:	d506      	bpl.n	8008778 <__swbuf_r+0x6c>
 800876a:	2e0a      	cmp	r6, #10
 800876c:	d104      	bne.n	8008778 <__swbuf_r+0x6c>
 800876e:	4621      	mov	r1, r4
 8008770:	4628      	mov	r0, r5
 8008772:	f000 f92f 	bl	80089d4 <_fflush_r>
 8008776:	b988      	cbnz	r0, 800879c <__swbuf_r+0x90>
 8008778:	4638      	mov	r0, r7
 800877a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <__swbuf_r+0x9c>)
 800877e:	429c      	cmp	r4, r3
 8008780:	d101      	bne.n	8008786 <__swbuf_r+0x7a>
 8008782:	68ac      	ldr	r4, [r5, #8]
 8008784:	e7cf      	b.n	8008726 <__swbuf_r+0x1a>
 8008786:	4b09      	ldr	r3, [pc, #36]	; (80087ac <__swbuf_r+0xa0>)
 8008788:	429c      	cmp	r4, r3
 800878a:	bf08      	it	eq
 800878c:	68ec      	ldreq	r4, [r5, #12]
 800878e:	e7ca      	b.n	8008726 <__swbuf_r+0x1a>
 8008790:	4621      	mov	r1, r4
 8008792:	4628      	mov	r0, r5
 8008794:	f000 f80c 	bl	80087b0 <__swsetup_r>
 8008798:	2800      	cmp	r0, #0
 800879a:	d0cb      	beq.n	8008734 <__swbuf_r+0x28>
 800879c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80087a0:	e7ea      	b.n	8008778 <__swbuf_r+0x6c>
 80087a2:	bf00      	nop
 80087a4:	0800975c 	.word	0x0800975c
 80087a8:	0800977c 	.word	0x0800977c
 80087ac:	0800973c 	.word	0x0800973c

080087b0 <__swsetup_r>:
 80087b0:	4b32      	ldr	r3, [pc, #200]	; (800887c <__swsetup_r+0xcc>)
 80087b2:	b570      	push	{r4, r5, r6, lr}
 80087b4:	681d      	ldr	r5, [r3, #0]
 80087b6:	4606      	mov	r6, r0
 80087b8:	460c      	mov	r4, r1
 80087ba:	b125      	cbz	r5, 80087c6 <__swsetup_r+0x16>
 80087bc:	69ab      	ldr	r3, [r5, #24]
 80087be:	b913      	cbnz	r3, 80087c6 <__swsetup_r+0x16>
 80087c0:	4628      	mov	r0, r5
 80087c2:	f000 f99b 	bl	8008afc <__sinit>
 80087c6:	4b2e      	ldr	r3, [pc, #184]	; (8008880 <__swsetup_r+0xd0>)
 80087c8:	429c      	cmp	r4, r3
 80087ca:	d10f      	bne.n	80087ec <__swsetup_r+0x3c>
 80087cc:	686c      	ldr	r4, [r5, #4]
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087d4:	0719      	lsls	r1, r3, #28
 80087d6:	d42c      	bmi.n	8008832 <__swsetup_r+0x82>
 80087d8:	06dd      	lsls	r5, r3, #27
 80087da:	d411      	bmi.n	8008800 <__swsetup_r+0x50>
 80087dc:	2309      	movs	r3, #9
 80087de:	6033      	str	r3, [r6, #0]
 80087e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087e4:	81a3      	strh	r3, [r4, #12]
 80087e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ea:	e03e      	b.n	800886a <__swsetup_r+0xba>
 80087ec:	4b25      	ldr	r3, [pc, #148]	; (8008884 <__swsetup_r+0xd4>)
 80087ee:	429c      	cmp	r4, r3
 80087f0:	d101      	bne.n	80087f6 <__swsetup_r+0x46>
 80087f2:	68ac      	ldr	r4, [r5, #8]
 80087f4:	e7eb      	b.n	80087ce <__swsetup_r+0x1e>
 80087f6:	4b24      	ldr	r3, [pc, #144]	; (8008888 <__swsetup_r+0xd8>)
 80087f8:	429c      	cmp	r4, r3
 80087fa:	bf08      	it	eq
 80087fc:	68ec      	ldreq	r4, [r5, #12]
 80087fe:	e7e6      	b.n	80087ce <__swsetup_r+0x1e>
 8008800:	0758      	lsls	r0, r3, #29
 8008802:	d512      	bpl.n	800882a <__swsetup_r+0x7a>
 8008804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008806:	b141      	cbz	r1, 800881a <__swsetup_r+0x6a>
 8008808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800880c:	4299      	cmp	r1, r3
 800880e:	d002      	beq.n	8008816 <__swsetup_r+0x66>
 8008810:	4630      	mov	r0, r6
 8008812:	f7ff fdab 	bl	800836c <_free_r>
 8008816:	2300      	movs	r3, #0
 8008818:	6363      	str	r3, [r4, #52]	; 0x34
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008820:	81a3      	strh	r3, [r4, #12]
 8008822:	2300      	movs	r3, #0
 8008824:	6063      	str	r3, [r4, #4]
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	f043 0308 	orr.w	r3, r3, #8
 8008830:	81a3      	strh	r3, [r4, #12]
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	b94b      	cbnz	r3, 800884a <__swsetup_r+0x9a>
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800883c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008840:	d003      	beq.n	800884a <__swsetup_r+0x9a>
 8008842:	4621      	mov	r1, r4
 8008844:	4630      	mov	r0, r6
 8008846:	f000 fa43 	bl	8008cd0 <__smakebuf_r>
 800884a:	89a0      	ldrh	r0, [r4, #12]
 800884c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008850:	f010 0301 	ands.w	r3, r0, #1
 8008854:	d00a      	beq.n	800886c <__swsetup_r+0xbc>
 8008856:	2300      	movs	r3, #0
 8008858:	60a3      	str	r3, [r4, #8]
 800885a:	6963      	ldr	r3, [r4, #20]
 800885c:	425b      	negs	r3, r3
 800885e:	61a3      	str	r3, [r4, #24]
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	b943      	cbnz	r3, 8008876 <__swsetup_r+0xc6>
 8008864:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008868:	d1ba      	bne.n	80087e0 <__swsetup_r+0x30>
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	0781      	lsls	r1, r0, #30
 800886e:	bf58      	it	pl
 8008870:	6963      	ldrpl	r3, [r4, #20]
 8008872:	60a3      	str	r3, [r4, #8]
 8008874:	e7f4      	b.n	8008860 <__swsetup_r+0xb0>
 8008876:	2000      	movs	r0, #0
 8008878:	e7f7      	b.n	800886a <__swsetup_r+0xba>
 800887a:	bf00      	nop
 800887c:	2000001c 	.word	0x2000001c
 8008880:	0800975c 	.word	0x0800975c
 8008884:	0800977c 	.word	0x0800977c
 8008888:	0800973c 	.word	0x0800973c

0800888c <__assert_func>:
 800888c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800888e:	4614      	mov	r4, r2
 8008890:	461a      	mov	r2, r3
 8008892:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <__assert_func+0x2c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4605      	mov	r5, r0
 8008898:	68d8      	ldr	r0, [r3, #12]
 800889a:	b14c      	cbz	r4, 80088b0 <__assert_func+0x24>
 800889c:	4b07      	ldr	r3, [pc, #28]	; (80088bc <__assert_func+0x30>)
 800889e:	9100      	str	r1, [sp, #0]
 80088a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088a4:	4906      	ldr	r1, [pc, #24]	; (80088c0 <__assert_func+0x34>)
 80088a6:	462b      	mov	r3, r5
 80088a8:	f000 f9a6 	bl	8008bf8 <fiprintf>
 80088ac:	f000 fda0 	bl	80093f0 <abort>
 80088b0:	4b04      	ldr	r3, [pc, #16]	; (80088c4 <__assert_func+0x38>)
 80088b2:	461c      	mov	r4, r3
 80088b4:	e7f3      	b.n	800889e <__assert_func+0x12>
 80088b6:	bf00      	nop
 80088b8:	2000001c 	.word	0x2000001c
 80088bc:	080096fe 	.word	0x080096fe
 80088c0:	0800970b 	.word	0x0800970b
 80088c4:	08009739 	.word	0x08009739

080088c8 <__sflush_r>:
 80088c8:	898a      	ldrh	r2, [r1, #12]
 80088ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ce:	4605      	mov	r5, r0
 80088d0:	0710      	lsls	r0, r2, #28
 80088d2:	460c      	mov	r4, r1
 80088d4:	d458      	bmi.n	8008988 <__sflush_r+0xc0>
 80088d6:	684b      	ldr	r3, [r1, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	dc05      	bgt.n	80088e8 <__sflush_r+0x20>
 80088dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088de:	2b00      	cmp	r3, #0
 80088e0:	dc02      	bgt.n	80088e8 <__sflush_r+0x20>
 80088e2:	2000      	movs	r0, #0
 80088e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ea:	2e00      	cmp	r6, #0
 80088ec:	d0f9      	beq.n	80088e2 <__sflush_r+0x1a>
 80088ee:	2300      	movs	r3, #0
 80088f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088f4:	682f      	ldr	r7, [r5, #0]
 80088f6:	602b      	str	r3, [r5, #0]
 80088f8:	d032      	beq.n	8008960 <__sflush_r+0x98>
 80088fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	075a      	lsls	r2, r3, #29
 8008900:	d505      	bpl.n	800890e <__sflush_r+0x46>
 8008902:	6863      	ldr	r3, [r4, #4]
 8008904:	1ac0      	subs	r0, r0, r3
 8008906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008908:	b10b      	cbz	r3, 800890e <__sflush_r+0x46>
 800890a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800890c:	1ac0      	subs	r0, r0, r3
 800890e:	2300      	movs	r3, #0
 8008910:	4602      	mov	r2, r0
 8008912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008914:	6a21      	ldr	r1, [r4, #32]
 8008916:	4628      	mov	r0, r5
 8008918:	47b0      	blx	r6
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	d106      	bne.n	800892e <__sflush_r+0x66>
 8008920:	6829      	ldr	r1, [r5, #0]
 8008922:	291d      	cmp	r1, #29
 8008924:	d82c      	bhi.n	8008980 <__sflush_r+0xb8>
 8008926:	4a2a      	ldr	r2, [pc, #168]	; (80089d0 <__sflush_r+0x108>)
 8008928:	40ca      	lsrs	r2, r1
 800892a:	07d6      	lsls	r6, r2, #31
 800892c:	d528      	bpl.n	8008980 <__sflush_r+0xb8>
 800892e:	2200      	movs	r2, #0
 8008930:	6062      	str	r2, [r4, #4]
 8008932:	04d9      	lsls	r1, r3, #19
 8008934:	6922      	ldr	r2, [r4, #16]
 8008936:	6022      	str	r2, [r4, #0]
 8008938:	d504      	bpl.n	8008944 <__sflush_r+0x7c>
 800893a:	1c42      	adds	r2, r0, #1
 800893c:	d101      	bne.n	8008942 <__sflush_r+0x7a>
 800893e:	682b      	ldr	r3, [r5, #0]
 8008940:	b903      	cbnz	r3, 8008944 <__sflush_r+0x7c>
 8008942:	6560      	str	r0, [r4, #84]	; 0x54
 8008944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008946:	602f      	str	r7, [r5, #0]
 8008948:	2900      	cmp	r1, #0
 800894a:	d0ca      	beq.n	80088e2 <__sflush_r+0x1a>
 800894c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008950:	4299      	cmp	r1, r3
 8008952:	d002      	beq.n	800895a <__sflush_r+0x92>
 8008954:	4628      	mov	r0, r5
 8008956:	f7ff fd09 	bl	800836c <_free_r>
 800895a:	2000      	movs	r0, #0
 800895c:	6360      	str	r0, [r4, #52]	; 0x34
 800895e:	e7c1      	b.n	80088e4 <__sflush_r+0x1c>
 8008960:	6a21      	ldr	r1, [r4, #32]
 8008962:	2301      	movs	r3, #1
 8008964:	4628      	mov	r0, r5
 8008966:	47b0      	blx	r6
 8008968:	1c41      	adds	r1, r0, #1
 800896a:	d1c7      	bne.n	80088fc <__sflush_r+0x34>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d0c4      	beq.n	80088fc <__sflush_r+0x34>
 8008972:	2b1d      	cmp	r3, #29
 8008974:	d001      	beq.n	800897a <__sflush_r+0xb2>
 8008976:	2b16      	cmp	r3, #22
 8008978:	d101      	bne.n	800897e <__sflush_r+0xb6>
 800897a:	602f      	str	r7, [r5, #0]
 800897c:	e7b1      	b.n	80088e2 <__sflush_r+0x1a>
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	e7ad      	b.n	80088e4 <__sflush_r+0x1c>
 8008988:	690f      	ldr	r7, [r1, #16]
 800898a:	2f00      	cmp	r7, #0
 800898c:	d0a9      	beq.n	80088e2 <__sflush_r+0x1a>
 800898e:	0793      	lsls	r3, r2, #30
 8008990:	680e      	ldr	r6, [r1, #0]
 8008992:	bf08      	it	eq
 8008994:	694b      	ldreq	r3, [r1, #20]
 8008996:	600f      	str	r7, [r1, #0]
 8008998:	bf18      	it	ne
 800899a:	2300      	movne	r3, #0
 800899c:	eba6 0807 	sub.w	r8, r6, r7
 80089a0:	608b      	str	r3, [r1, #8]
 80089a2:	f1b8 0f00 	cmp.w	r8, #0
 80089a6:	dd9c      	ble.n	80088e2 <__sflush_r+0x1a>
 80089a8:	6a21      	ldr	r1, [r4, #32]
 80089aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089ac:	4643      	mov	r3, r8
 80089ae:	463a      	mov	r2, r7
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b0      	blx	r6
 80089b4:	2800      	cmp	r0, #0
 80089b6:	dc06      	bgt.n	80089c6 <__sflush_r+0xfe>
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089c4:	e78e      	b.n	80088e4 <__sflush_r+0x1c>
 80089c6:	4407      	add	r7, r0
 80089c8:	eba8 0800 	sub.w	r8, r8, r0
 80089cc:	e7e9      	b.n	80089a2 <__sflush_r+0xda>
 80089ce:	bf00      	nop
 80089d0:	20400001 	.word	0x20400001

080089d4 <_fflush_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	690b      	ldr	r3, [r1, #16]
 80089d8:	4605      	mov	r5, r0
 80089da:	460c      	mov	r4, r1
 80089dc:	b913      	cbnz	r3, 80089e4 <_fflush_r+0x10>
 80089de:	2500      	movs	r5, #0
 80089e0:	4628      	mov	r0, r5
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	b118      	cbz	r0, 80089ee <_fflush_r+0x1a>
 80089e6:	6983      	ldr	r3, [r0, #24]
 80089e8:	b90b      	cbnz	r3, 80089ee <_fflush_r+0x1a>
 80089ea:	f000 f887 	bl	8008afc <__sinit>
 80089ee:	4b14      	ldr	r3, [pc, #80]	; (8008a40 <_fflush_r+0x6c>)
 80089f0:	429c      	cmp	r4, r3
 80089f2:	d11b      	bne.n	8008a2c <_fflush_r+0x58>
 80089f4:	686c      	ldr	r4, [r5, #4]
 80089f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0ef      	beq.n	80089de <_fflush_r+0xa>
 80089fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a00:	07d0      	lsls	r0, r2, #31
 8008a02:	d404      	bmi.n	8008a0e <_fflush_r+0x3a>
 8008a04:	0599      	lsls	r1, r3, #22
 8008a06:	d402      	bmi.n	8008a0e <_fflush_r+0x3a>
 8008a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a0a:	f000 f93a 	bl	8008c82 <__retarget_lock_acquire_recursive>
 8008a0e:	4628      	mov	r0, r5
 8008a10:	4621      	mov	r1, r4
 8008a12:	f7ff ff59 	bl	80088c8 <__sflush_r>
 8008a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a18:	07da      	lsls	r2, r3, #31
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	d4e0      	bmi.n	80089e0 <_fflush_r+0xc>
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	059b      	lsls	r3, r3, #22
 8008a22:	d4dd      	bmi.n	80089e0 <_fflush_r+0xc>
 8008a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a26:	f000 f92d 	bl	8008c84 <__retarget_lock_release_recursive>
 8008a2a:	e7d9      	b.n	80089e0 <_fflush_r+0xc>
 8008a2c:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <_fflush_r+0x70>)
 8008a2e:	429c      	cmp	r4, r3
 8008a30:	d101      	bne.n	8008a36 <_fflush_r+0x62>
 8008a32:	68ac      	ldr	r4, [r5, #8]
 8008a34:	e7df      	b.n	80089f6 <_fflush_r+0x22>
 8008a36:	4b04      	ldr	r3, [pc, #16]	; (8008a48 <_fflush_r+0x74>)
 8008a38:	429c      	cmp	r4, r3
 8008a3a:	bf08      	it	eq
 8008a3c:	68ec      	ldreq	r4, [r5, #12]
 8008a3e:	e7da      	b.n	80089f6 <_fflush_r+0x22>
 8008a40:	0800975c 	.word	0x0800975c
 8008a44:	0800977c 	.word	0x0800977c
 8008a48:	0800973c 	.word	0x0800973c

08008a4c <std>:
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	4604      	mov	r4, r0
 8008a52:	e9c0 3300 	strd	r3, r3, [r0]
 8008a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a5a:	6083      	str	r3, [r0, #8]
 8008a5c:	8181      	strh	r1, [r0, #12]
 8008a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a60:	81c2      	strh	r2, [r0, #14]
 8008a62:	6183      	str	r3, [r0, #24]
 8008a64:	4619      	mov	r1, r3
 8008a66:	2208      	movs	r2, #8
 8008a68:	305c      	adds	r0, #92	; 0x5c
 8008a6a:	f7ff fc77 	bl	800835c <memset>
 8008a6e:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <std+0x38>)
 8008a70:	6263      	str	r3, [r4, #36]	; 0x24
 8008a72:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <std+0x3c>)
 8008a74:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a76:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <std+0x40>)
 8008a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <std+0x44>)
 8008a7c:	6224      	str	r4, [r4, #32]
 8008a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a80:	bd10      	pop	{r4, pc}
 8008a82:	bf00      	nop
 8008a84:	08009345 	.word	0x08009345
 8008a88:	08009367 	.word	0x08009367
 8008a8c:	0800939f 	.word	0x0800939f
 8008a90:	080093c3 	.word	0x080093c3

08008a94 <_cleanup_r>:
 8008a94:	4901      	ldr	r1, [pc, #4]	; (8008a9c <_cleanup_r+0x8>)
 8008a96:	f000 b8c1 	b.w	8008c1c <_fwalk_reent>
 8008a9a:	bf00      	nop
 8008a9c:	080089d5 	.word	0x080089d5

08008aa0 <__sfmoreglue>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	1e4a      	subs	r2, r1, #1
 8008aa4:	2568      	movs	r5, #104	; 0x68
 8008aa6:	4355      	muls	r5, r2
 8008aa8:	460e      	mov	r6, r1
 8008aaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008aae:	f7ff fcad 	bl	800840c <_malloc_r>
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	b140      	cbz	r0, 8008ac8 <__sfmoreglue+0x28>
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	e9c0 1600 	strd	r1, r6, [r0]
 8008abc:	300c      	adds	r0, #12
 8008abe:	60a0      	str	r0, [r4, #8]
 8008ac0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ac4:	f7ff fc4a 	bl	800835c <memset>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	bd70      	pop	{r4, r5, r6, pc}

08008acc <__sfp_lock_acquire>:
 8008acc:	4801      	ldr	r0, [pc, #4]	; (8008ad4 <__sfp_lock_acquire+0x8>)
 8008ace:	f000 b8d8 	b.w	8008c82 <__retarget_lock_acquire_recursive>
 8008ad2:	bf00      	nop
 8008ad4:	20004f60 	.word	0x20004f60

08008ad8 <__sfp_lock_release>:
 8008ad8:	4801      	ldr	r0, [pc, #4]	; (8008ae0 <__sfp_lock_release+0x8>)
 8008ada:	f000 b8d3 	b.w	8008c84 <__retarget_lock_release_recursive>
 8008ade:	bf00      	nop
 8008ae0:	20004f60 	.word	0x20004f60

08008ae4 <__sinit_lock_acquire>:
 8008ae4:	4801      	ldr	r0, [pc, #4]	; (8008aec <__sinit_lock_acquire+0x8>)
 8008ae6:	f000 b8cc 	b.w	8008c82 <__retarget_lock_acquire_recursive>
 8008aea:	bf00      	nop
 8008aec:	20004f5b 	.word	0x20004f5b

08008af0 <__sinit_lock_release>:
 8008af0:	4801      	ldr	r0, [pc, #4]	; (8008af8 <__sinit_lock_release+0x8>)
 8008af2:	f000 b8c7 	b.w	8008c84 <__retarget_lock_release_recursive>
 8008af6:	bf00      	nop
 8008af8:	20004f5b 	.word	0x20004f5b

08008afc <__sinit>:
 8008afc:	b510      	push	{r4, lr}
 8008afe:	4604      	mov	r4, r0
 8008b00:	f7ff fff0 	bl	8008ae4 <__sinit_lock_acquire>
 8008b04:	69a3      	ldr	r3, [r4, #24]
 8008b06:	b11b      	cbz	r3, 8008b10 <__sinit+0x14>
 8008b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b0c:	f7ff bff0 	b.w	8008af0 <__sinit_lock_release>
 8008b10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b14:	6523      	str	r3, [r4, #80]	; 0x50
 8008b16:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <__sinit+0x68>)
 8008b18:	4a13      	ldr	r2, [pc, #76]	; (8008b68 <__sinit+0x6c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b1e:	42a3      	cmp	r3, r4
 8008b20:	bf04      	itt	eq
 8008b22:	2301      	moveq	r3, #1
 8008b24:	61a3      	streq	r3, [r4, #24]
 8008b26:	4620      	mov	r0, r4
 8008b28:	f000 f820 	bl	8008b6c <__sfp>
 8008b2c:	6060      	str	r0, [r4, #4]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f81c 	bl	8008b6c <__sfp>
 8008b34:	60a0      	str	r0, [r4, #8]
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 f818 	bl	8008b6c <__sfp>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	60e0      	str	r0, [r4, #12]
 8008b40:	2104      	movs	r1, #4
 8008b42:	6860      	ldr	r0, [r4, #4]
 8008b44:	f7ff ff82 	bl	8008a4c <std>
 8008b48:	68a0      	ldr	r0, [r4, #8]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	2109      	movs	r1, #9
 8008b4e:	f7ff ff7d 	bl	8008a4c <std>
 8008b52:	68e0      	ldr	r0, [r4, #12]
 8008b54:	2202      	movs	r2, #2
 8008b56:	2112      	movs	r1, #18
 8008b58:	f7ff ff78 	bl	8008a4c <std>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	61a3      	str	r3, [r4, #24]
 8008b60:	e7d2      	b.n	8008b08 <__sinit+0xc>
 8008b62:	bf00      	nop
 8008b64:	08009684 	.word	0x08009684
 8008b68:	08008a95 	.word	0x08008a95

08008b6c <__sfp>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	4607      	mov	r7, r0
 8008b70:	f7ff ffac 	bl	8008acc <__sfp_lock_acquire>
 8008b74:	4b1e      	ldr	r3, [pc, #120]	; (8008bf0 <__sfp+0x84>)
 8008b76:	681e      	ldr	r6, [r3, #0]
 8008b78:	69b3      	ldr	r3, [r6, #24]
 8008b7a:	b913      	cbnz	r3, 8008b82 <__sfp+0x16>
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f7ff ffbd 	bl	8008afc <__sinit>
 8008b82:	3648      	adds	r6, #72	; 0x48
 8008b84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	d503      	bpl.n	8008b94 <__sfp+0x28>
 8008b8c:	6833      	ldr	r3, [r6, #0]
 8008b8e:	b30b      	cbz	r3, 8008bd4 <__sfp+0x68>
 8008b90:	6836      	ldr	r6, [r6, #0]
 8008b92:	e7f7      	b.n	8008b84 <__sfp+0x18>
 8008b94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b98:	b9d5      	cbnz	r5, 8008bd0 <__sfp+0x64>
 8008b9a:	4b16      	ldr	r3, [pc, #88]	; (8008bf4 <__sfp+0x88>)
 8008b9c:	60e3      	str	r3, [r4, #12]
 8008b9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ba2:	6665      	str	r5, [r4, #100]	; 0x64
 8008ba4:	f000 f86c 	bl	8008c80 <__retarget_lock_init_recursive>
 8008ba8:	f7ff ff96 	bl	8008ad8 <__sfp_lock_release>
 8008bac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bb4:	6025      	str	r5, [r4, #0]
 8008bb6:	61a5      	str	r5, [r4, #24]
 8008bb8:	2208      	movs	r2, #8
 8008bba:	4629      	mov	r1, r5
 8008bbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bc0:	f7ff fbcc 	bl	800835c <memset>
 8008bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bcc:	4620      	mov	r0, r4
 8008bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd0:	3468      	adds	r4, #104	; 0x68
 8008bd2:	e7d9      	b.n	8008b88 <__sfp+0x1c>
 8008bd4:	2104      	movs	r1, #4
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f7ff ff62 	bl	8008aa0 <__sfmoreglue>
 8008bdc:	4604      	mov	r4, r0
 8008bde:	6030      	str	r0, [r6, #0]
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d1d5      	bne.n	8008b90 <__sfp+0x24>
 8008be4:	f7ff ff78 	bl	8008ad8 <__sfp_lock_release>
 8008be8:	230c      	movs	r3, #12
 8008bea:	603b      	str	r3, [r7, #0]
 8008bec:	e7ee      	b.n	8008bcc <__sfp+0x60>
 8008bee:	bf00      	nop
 8008bf0:	08009684 	.word	0x08009684
 8008bf4:	ffff0001 	.word	0xffff0001

08008bf8 <fiprintf>:
 8008bf8:	b40e      	push	{r1, r2, r3}
 8008bfa:	b503      	push	{r0, r1, lr}
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	ab03      	add	r3, sp, #12
 8008c00:	4805      	ldr	r0, [pc, #20]	; (8008c18 <fiprintf+0x20>)
 8008c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c06:	6800      	ldr	r0, [r0, #0]
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	f000 f8d7 	bl	8008dbc <_vfiprintf_r>
 8008c0e:	b002      	add	sp, #8
 8008c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c14:	b003      	add	sp, #12
 8008c16:	4770      	bx	lr
 8008c18:	2000001c 	.word	0x2000001c

08008c1c <_fwalk_reent>:
 8008c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c20:	4606      	mov	r6, r0
 8008c22:	4688      	mov	r8, r1
 8008c24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c28:	2700      	movs	r7, #0
 8008c2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c2e:	f1b9 0901 	subs.w	r9, r9, #1
 8008c32:	d505      	bpl.n	8008c40 <_fwalk_reent+0x24>
 8008c34:	6824      	ldr	r4, [r4, #0]
 8008c36:	2c00      	cmp	r4, #0
 8008c38:	d1f7      	bne.n	8008c2a <_fwalk_reent+0xe>
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c40:	89ab      	ldrh	r3, [r5, #12]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d907      	bls.n	8008c56 <_fwalk_reent+0x3a>
 8008c46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	d003      	beq.n	8008c56 <_fwalk_reent+0x3a>
 8008c4e:	4629      	mov	r1, r5
 8008c50:	4630      	mov	r0, r6
 8008c52:	47c0      	blx	r8
 8008c54:	4307      	orrs	r7, r0
 8008c56:	3568      	adds	r5, #104	; 0x68
 8008c58:	e7e9      	b.n	8008c2e <_fwalk_reent+0x12>
	...

08008c5c <_gettimeofday_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4d07      	ldr	r5, [pc, #28]	; (8008c7c <_gettimeofday_r+0x20>)
 8008c60:	2300      	movs	r3, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	4611      	mov	r1, r2
 8008c68:	602b      	str	r3, [r5, #0]
 8008c6a:	f000 fc63 	bl	8009534 <_gettimeofday>
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	d102      	bne.n	8008c78 <_gettimeofday_r+0x1c>
 8008c72:	682b      	ldr	r3, [r5, #0]
 8008c74:	b103      	cbz	r3, 8008c78 <_gettimeofday_r+0x1c>
 8008c76:	6023      	str	r3, [r4, #0]
 8008c78:	bd38      	pop	{r3, r4, r5, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20004f64 	.word	0x20004f64

08008c80 <__retarget_lock_init_recursive>:
 8008c80:	4770      	bx	lr

08008c82 <__retarget_lock_acquire_recursive>:
 8008c82:	4770      	bx	lr

08008c84 <__retarget_lock_release_recursive>:
 8008c84:	4770      	bx	lr

08008c86 <__swhatbuf_r>:
 8008c86:	b570      	push	{r4, r5, r6, lr}
 8008c88:	460e      	mov	r6, r1
 8008c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	b096      	sub	sp, #88	; 0x58
 8008c92:	4614      	mov	r4, r2
 8008c94:	461d      	mov	r5, r3
 8008c96:	da07      	bge.n	8008ca8 <__swhatbuf_r+0x22>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	602b      	str	r3, [r5, #0]
 8008c9c:	89b3      	ldrh	r3, [r6, #12]
 8008c9e:	061a      	lsls	r2, r3, #24
 8008ca0:	d410      	bmi.n	8008cc4 <__swhatbuf_r+0x3e>
 8008ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca6:	e00e      	b.n	8008cc6 <__swhatbuf_r+0x40>
 8008ca8:	466a      	mov	r2, sp
 8008caa:	f000 fbb9 	bl	8009420 <_fstat_r>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	dbf2      	blt.n	8008c98 <__swhatbuf_r+0x12>
 8008cb2:	9a01      	ldr	r2, [sp, #4]
 8008cb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cbc:	425a      	negs	r2, r3
 8008cbe:	415a      	adcs	r2, r3
 8008cc0:	602a      	str	r2, [r5, #0]
 8008cc2:	e7ee      	b.n	8008ca2 <__swhatbuf_r+0x1c>
 8008cc4:	2340      	movs	r3, #64	; 0x40
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	b016      	add	sp, #88	; 0x58
 8008ccc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cd0 <__smakebuf_r>:
 8008cd0:	898b      	ldrh	r3, [r1, #12]
 8008cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cd4:	079d      	lsls	r5, r3, #30
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	460c      	mov	r4, r1
 8008cda:	d507      	bpl.n	8008cec <__smakebuf_r+0x1c>
 8008cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	b002      	add	sp, #8
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	ab01      	add	r3, sp, #4
 8008cee:	466a      	mov	r2, sp
 8008cf0:	f7ff ffc9 	bl	8008c86 <__swhatbuf_r>
 8008cf4:	9900      	ldr	r1, [sp, #0]
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f7ff fb87 	bl	800840c <_malloc_r>
 8008cfe:	b948      	cbnz	r0, 8008d14 <__smakebuf_r+0x44>
 8008d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d04:	059a      	lsls	r2, r3, #22
 8008d06:	d4ef      	bmi.n	8008ce8 <__smakebuf_r+0x18>
 8008d08:	f023 0303 	bic.w	r3, r3, #3
 8008d0c:	f043 0302 	orr.w	r3, r3, #2
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	e7e3      	b.n	8008cdc <__smakebuf_r+0xc>
 8008d14:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <__smakebuf_r+0x7c>)
 8008d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	6020      	str	r0, [r4, #0]
 8008d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d20:	81a3      	strh	r3, [r4, #12]
 8008d22:	9b00      	ldr	r3, [sp, #0]
 8008d24:	6163      	str	r3, [r4, #20]
 8008d26:	9b01      	ldr	r3, [sp, #4]
 8008d28:	6120      	str	r0, [r4, #16]
 8008d2a:	b15b      	cbz	r3, 8008d44 <__smakebuf_r+0x74>
 8008d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 fb87 	bl	8009444 <_isatty_r>
 8008d36:	b128      	cbz	r0, 8008d44 <__smakebuf_r+0x74>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	89a0      	ldrh	r0, [r4, #12]
 8008d46:	4305      	orrs	r5, r0
 8008d48:	81a5      	strh	r5, [r4, #12]
 8008d4a:	e7cd      	b.n	8008ce8 <__smakebuf_r+0x18>
 8008d4c:	08008a95 	.word	0x08008a95

08008d50 <__malloc_lock>:
 8008d50:	4801      	ldr	r0, [pc, #4]	; (8008d58 <__malloc_lock+0x8>)
 8008d52:	f7ff bf96 	b.w	8008c82 <__retarget_lock_acquire_recursive>
 8008d56:	bf00      	nop
 8008d58:	20004f5c 	.word	0x20004f5c

08008d5c <__malloc_unlock>:
 8008d5c:	4801      	ldr	r0, [pc, #4]	; (8008d64 <__malloc_unlock+0x8>)
 8008d5e:	f7ff bf91 	b.w	8008c84 <__retarget_lock_release_recursive>
 8008d62:	bf00      	nop
 8008d64:	20004f5c 	.word	0x20004f5c

08008d68 <__sfputc_r>:
 8008d68:	6893      	ldr	r3, [r2, #8]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	b410      	push	{r4}
 8008d70:	6093      	str	r3, [r2, #8]
 8008d72:	da08      	bge.n	8008d86 <__sfputc_r+0x1e>
 8008d74:	6994      	ldr	r4, [r2, #24]
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	db01      	blt.n	8008d7e <__sfputc_r+0x16>
 8008d7a:	290a      	cmp	r1, #10
 8008d7c:	d103      	bne.n	8008d86 <__sfputc_r+0x1e>
 8008d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d82:	f7ff bcc3 	b.w	800870c <__swbuf_r>
 8008d86:	6813      	ldr	r3, [r2, #0]
 8008d88:	1c58      	adds	r0, r3, #1
 8008d8a:	6010      	str	r0, [r2, #0]
 8008d8c:	7019      	strb	r1, [r3, #0]
 8008d8e:	4608      	mov	r0, r1
 8008d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <__sfputs_r>:
 8008d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d98:	4606      	mov	r6, r0
 8008d9a:	460f      	mov	r7, r1
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	18d5      	adds	r5, r2, r3
 8008da0:	42ac      	cmp	r4, r5
 8008da2:	d101      	bne.n	8008da8 <__sfputs_r+0x12>
 8008da4:	2000      	movs	r0, #0
 8008da6:	e007      	b.n	8008db8 <__sfputs_r+0x22>
 8008da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dac:	463a      	mov	r2, r7
 8008dae:	4630      	mov	r0, r6
 8008db0:	f7ff ffda 	bl	8008d68 <__sfputc_r>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d1f3      	bne.n	8008da0 <__sfputs_r+0xa>
 8008db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dbc <_vfiprintf_r>:
 8008dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	b09d      	sub	sp, #116	; 0x74
 8008dc4:	4614      	mov	r4, r2
 8008dc6:	4698      	mov	r8, r3
 8008dc8:	4606      	mov	r6, r0
 8008dca:	b118      	cbz	r0, 8008dd4 <_vfiprintf_r+0x18>
 8008dcc:	6983      	ldr	r3, [r0, #24]
 8008dce:	b90b      	cbnz	r3, 8008dd4 <_vfiprintf_r+0x18>
 8008dd0:	f7ff fe94 	bl	8008afc <__sinit>
 8008dd4:	4b89      	ldr	r3, [pc, #548]	; (8008ffc <_vfiprintf_r+0x240>)
 8008dd6:	429d      	cmp	r5, r3
 8008dd8:	d11b      	bne.n	8008e12 <_vfiprintf_r+0x56>
 8008dda:	6875      	ldr	r5, [r6, #4]
 8008ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dde:	07d9      	lsls	r1, r3, #31
 8008de0:	d405      	bmi.n	8008dee <_vfiprintf_r+0x32>
 8008de2:	89ab      	ldrh	r3, [r5, #12]
 8008de4:	059a      	lsls	r2, r3, #22
 8008de6:	d402      	bmi.n	8008dee <_vfiprintf_r+0x32>
 8008de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dea:	f7ff ff4a 	bl	8008c82 <__retarget_lock_acquire_recursive>
 8008dee:	89ab      	ldrh	r3, [r5, #12]
 8008df0:	071b      	lsls	r3, r3, #28
 8008df2:	d501      	bpl.n	8008df8 <_vfiprintf_r+0x3c>
 8008df4:	692b      	ldr	r3, [r5, #16]
 8008df6:	b9eb      	cbnz	r3, 8008e34 <_vfiprintf_r+0x78>
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7ff fcd8 	bl	80087b0 <__swsetup_r>
 8008e00:	b1c0      	cbz	r0, 8008e34 <_vfiprintf_r+0x78>
 8008e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e04:	07dc      	lsls	r4, r3, #31
 8008e06:	d50e      	bpl.n	8008e26 <_vfiprintf_r+0x6a>
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e0c:	b01d      	add	sp, #116	; 0x74
 8008e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e12:	4b7b      	ldr	r3, [pc, #492]	; (8009000 <_vfiprintf_r+0x244>)
 8008e14:	429d      	cmp	r5, r3
 8008e16:	d101      	bne.n	8008e1c <_vfiprintf_r+0x60>
 8008e18:	68b5      	ldr	r5, [r6, #8]
 8008e1a:	e7df      	b.n	8008ddc <_vfiprintf_r+0x20>
 8008e1c:	4b79      	ldr	r3, [pc, #484]	; (8009004 <_vfiprintf_r+0x248>)
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	bf08      	it	eq
 8008e22:	68f5      	ldreq	r5, [r6, #12]
 8008e24:	e7da      	b.n	8008ddc <_vfiprintf_r+0x20>
 8008e26:	89ab      	ldrh	r3, [r5, #12]
 8008e28:	0598      	lsls	r0, r3, #22
 8008e2a:	d4ed      	bmi.n	8008e08 <_vfiprintf_r+0x4c>
 8008e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e2e:	f7ff ff29 	bl	8008c84 <__retarget_lock_release_recursive>
 8008e32:	e7e9      	b.n	8008e08 <_vfiprintf_r+0x4c>
 8008e34:	2300      	movs	r3, #0
 8008e36:	9309      	str	r3, [sp, #36]	; 0x24
 8008e38:	2320      	movs	r3, #32
 8008e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e42:	2330      	movs	r3, #48	; 0x30
 8008e44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009008 <_vfiprintf_r+0x24c>
 8008e48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e4c:	f04f 0901 	mov.w	r9, #1
 8008e50:	4623      	mov	r3, r4
 8008e52:	469a      	mov	sl, r3
 8008e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e58:	b10a      	cbz	r2, 8008e5e <_vfiprintf_r+0xa2>
 8008e5a:	2a25      	cmp	r2, #37	; 0x25
 8008e5c:	d1f9      	bne.n	8008e52 <_vfiprintf_r+0x96>
 8008e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e62:	d00b      	beq.n	8008e7c <_vfiprintf_r+0xc0>
 8008e64:	465b      	mov	r3, fp
 8008e66:	4622      	mov	r2, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7ff ff93 	bl	8008d96 <__sfputs_r>
 8008e70:	3001      	adds	r0, #1
 8008e72:	f000 80aa 	beq.w	8008fca <_vfiprintf_r+0x20e>
 8008e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e78:	445a      	add	r2, fp
 8008e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 80a2 	beq.w	8008fca <_vfiprintf_r+0x20e>
 8008e86:	2300      	movs	r3, #0
 8008e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e90:	f10a 0a01 	add.w	sl, sl, #1
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	9307      	str	r3, [sp, #28]
 8008e98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e9e:	4654      	mov	r4, sl
 8008ea0:	2205      	movs	r2, #5
 8008ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea6:	4858      	ldr	r0, [pc, #352]	; (8009008 <_vfiprintf_r+0x24c>)
 8008ea8:	f7f7 f9b2 	bl	8000210 <memchr>
 8008eac:	9a04      	ldr	r2, [sp, #16]
 8008eae:	b9d8      	cbnz	r0, 8008ee8 <_vfiprintf_r+0x12c>
 8008eb0:	06d1      	lsls	r1, r2, #27
 8008eb2:	bf44      	itt	mi
 8008eb4:	2320      	movmi	r3, #32
 8008eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eba:	0713      	lsls	r3, r2, #28
 8008ebc:	bf44      	itt	mi
 8008ebe:	232b      	movmi	r3, #43	; 0x2b
 8008ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eca:	d015      	beq.n	8008ef8 <_vfiprintf_r+0x13c>
 8008ecc:	9a07      	ldr	r2, [sp, #28]
 8008ece:	4654      	mov	r4, sl
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	f04f 0c0a 	mov.w	ip, #10
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008edc:	3b30      	subs	r3, #48	; 0x30
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d94e      	bls.n	8008f80 <_vfiprintf_r+0x1c4>
 8008ee2:	b1b0      	cbz	r0, 8008f12 <_vfiprintf_r+0x156>
 8008ee4:	9207      	str	r2, [sp, #28]
 8008ee6:	e014      	b.n	8008f12 <_vfiprintf_r+0x156>
 8008ee8:	eba0 0308 	sub.w	r3, r0, r8
 8008eec:	fa09 f303 	lsl.w	r3, r9, r3
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	46a2      	mov	sl, r4
 8008ef6:	e7d2      	b.n	8008e9e <_vfiprintf_r+0xe2>
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	1d19      	adds	r1, r3, #4
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	9103      	str	r1, [sp, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	bfbb      	ittet	lt
 8008f04:	425b      	neglt	r3, r3
 8008f06:	f042 0202 	orrlt.w	r2, r2, #2
 8008f0a:	9307      	strge	r3, [sp, #28]
 8008f0c:	9307      	strlt	r3, [sp, #28]
 8008f0e:	bfb8      	it	lt
 8008f10:	9204      	strlt	r2, [sp, #16]
 8008f12:	7823      	ldrb	r3, [r4, #0]
 8008f14:	2b2e      	cmp	r3, #46	; 0x2e
 8008f16:	d10c      	bne.n	8008f32 <_vfiprintf_r+0x176>
 8008f18:	7863      	ldrb	r3, [r4, #1]
 8008f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f1c:	d135      	bne.n	8008f8a <_vfiprintf_r+0x1ce>
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	1d1a      	adds	r2, r3, #4
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	9203      	str	r2, [sp, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bfb8      	it	lt
 8008f2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f2e:	3402      	adds	r4, #2
 8008f30:	9305      	str	r3, [sp, #20]
 8008f32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009018 <_vfiprintf_r+0x25c>
 8008f36:	7821      	ldrb	r1, [r4, #0]
 8008f38:	2203      	movs	r2, #3
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	f7f7 f968 	bl	8000210 <memchr>
 8008f40:	b140      	cbz	r0, 8008f54 <_vfiprintf_r+0x198>
 8008f42:	2340      	movs	r3, #64	; 0x40
 8008f44:	eba0 000a 	sub.w	r0, r0, sl
 8008f48:	fa03 f000 	lsl.w	r0, r3, r0
 8008f4c:	9b04      	ldr	r3, [sp, #16]
 8008f4e:	4303      	orrs	r3, r0
 8008f50:	3401      	adds	r4, #1
 8008f52:	9304      	str	r3, [sp, #16]
 8008f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f58:	482c      	ldr	r0, [pc, #176]	; (800900c <_vfiprintf_r+0x250>)
 8008f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f5e:	2206      	movs	r2, #6
 8008f60:	f7f7 f956 	bl	8000210 <memchr>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d03f      	beq.n	8008fe8 <_vfiprintf_r+0x22c>
 8008f68:	4b29      	ldr	r3, [pc, #164]	; (8009010 <_vfiprintf_r+0x254>)
 8008f6a:	bb1b      	cbnz	r3, 8008fb4 <_vfiprintf_r+0x1f8>
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	3307      	adds	r3, #7
 8008f70:	f023 0307 	bic.w	r3, r3, #7
 8008f74:	3308      	adds	r3, #8
 8008f76:	9303      	str	r3, [sp, #12]
 8008f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7a:	443b      	add	r3, r7
 8008f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7e:	e767      	b.n	8008e50 <_vfiprintf_r+0x94>
 8008f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f84:	460c      	mov	r4, r1
 8008f86:	2001      	movs	r0, #1
 8008f88:	e7a5      	b.n	8008ed6 <_vfiprintf_r+0x11a>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	3401      	adds	r4, #1
 8008f8e:	9305      	str	r3, [sp, #20]
 8008f90:	4619      	mov	r1, r3
 8008f92:	f04f 0c0a 	mov.w	ip, #10
 8008f96:	4620      	mov	r0, r4
 8008f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f9c:	3a30      	subs	r2, #48	; 0x30
 8008f9e:	2a09      	cmp	r2, #9
 8008fa0:	d903      	bls.n	8008faa <_vfiprintf_r+0x1ee>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0c5      	beq.n	8008f32 <_vfiprintf_r+0x176>
 8008fa6:	9105      	str	r1, [sp, #20]
 8008fa8:	e7c3      	b.n	8008f32 <_vfiprintf_r+0x176>
 8008faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fae:	4604      	mov	r4, r0
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e7f0      	b.n	8008f96 <_vfiprintf_r+0x1da>
 8008fb4:	ab03      	add	r3, sp, #12
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	462a      	mov	r2, r5
 8008fba:	4b16      	ldr	r3, [pc, #88]	; (8009014 <_vfiprintf_r+0x258>)
 8008fbc:	a904      	add	r1, sp, #16
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f3af 8000 	nop.w
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	1c78      	adds	r0, r7, #1
 8008fc8:	d1d6      	bne.n	8008f78 <_vfiprintf_r+0x1bc>
 8008fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fcc:	07d9      	lsls	r1, r3, #31
 8008fce:	d405      	bmi.n	8008fdc <_vfiprintf_r+0x220>
 8008fd0:	89ab      	ldrh	r3, [r5, #12]
 8008fd2:	059a      	lsls	r2, r3, #22
 8008fd4:	d402      	bmi.n	8008fdc <_vfiprintf_r+0x220>
 8008fd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fd8:	f7ff fe54 	bl	8008c84 <__retarget_lock_release_recursive>
 8008fdc:	89ab      	ldrh	r3, [r5, #12]
 8008fde:	065b      	lsls	r3, r3, #25
 8008fe0:	f53f af12 	bmi.w	8008e08 <_vfiprintf_r+0x4c>
 8008fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fe6:	e711      	b.n	8008e0c <_vfiprintf_r+0x50>
 8008fe8:	ab03      	add	r3, sp, #12
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	462a      	mov	r2, r5
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <_vfiprintf_r+0x258>)
 8008ff0:	a904      	add	r1, sp, #16
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f000 f880 	bl	80090f8 <_printf_i>
 8008ff8:	e7e4      	b.n	8008fc4 <_vfiprintf_r+0x208>
 8008ffa:	bf00      	nop
 8008ffc:	0800975c 	.word	0x0800975c
 8009000:	0800977c 	.word	0x0800977c
 8009004:	0800973c 	.word	0x0800973c
 8009008:	0800979c 	.word	0x0800979c
 800900c:	080097a6 	.word	0x080097a6
 8009010:	00000000 	.word	0x00000000
 8009014:	08008d97 	.word	0x08008d97
 8009018:	080097a2 	.word	0x080097a2

0800901c <_printf_common>:
 800901c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009020:	4616      	mov	r6, r2
 8009022:	4699      	mov	r9, r3
 8009024:	688a      	ldr	r2, [r1, #8]
 8009026:	690b      	ldr	r3, [r1, #16]
 8009028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800902c:	4293      	cmp	r3, r2
 800902e:	bfb8      	it	lt
 8009030:	4613      	movlt	r3, r2
 8009032:	6033      	str	r3, [r6, #0]
 8009034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009038:	4607      	mov	r7, r0
 800903a:	460c      	mov	r4, r1
 800903c:	b10a      	cbz	r2, 8009042 <_printf_common+0x26>
 800903e:	3301      	adds	r3, #1
 8009040:	6033      	str	r3, [r6, #0]
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	0699      	lsls	r1, r3, #26
 8009046:	bf42      	ittt	mi
 8009048:	6833      	ldrmi	r3, [r6, #0]
 800904a:	3302      	addmi	r3, #2
 800904c:	6033      	strmi	r3, [r6, #0]
 800904e:	6825      	ldr	r5, [r4, #0]
 8009050:	f015 0506 	ands.w	r5, r5, #6
 8009054:	d106      	bne.n	8009064 <_printf_common+0x48>
 8009056:	f104 0a19 	add.w	sl, r4, #25
 800905a:	68e3      	ldr	r3, [r4, #12]
 800905c:	6832      	ldr	r2, [r6, #0]
 800905e:	1a9b      	subs	r3, r3, r2
 8009060:	42ab      	cmp	r3, r5
 8009062:	dc26      	bgt.n	80090b2 <_printf_common+0x96>
 8009064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009068:	1e13      	subs	r3, r2, #0
 800906a:	6822      	ldr	r2, [r4, #0]
 800906c:	bf18      	it	ne
 800906e:	2301      	movne	r3, #1
 8009070:	0692      	lsls	r2, r2, #26
 8009072:	d42b      	bmi.n	80090cc <_printf_common+0xb0>
 8009074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009078:	4649      	mov	r1, r9
 800907a:	4638      	mov	r0, r7
 800907c:	47c0      	blx	r8
 800907e:	3001      	adds	r0, #1
 8009080:	d01e      	beq.n	80090c0 <_printf_common+0xa4>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	68e5      	ldr	r5, [r4, #12]
 8009086:	6832      	ldr	r2, [r6, #0]
 8009088:	f003 0306 	and.w	r3, r3, #6
 800908c:	2b04      	cmp	r3, #4
 800908e:	bf08      	it	eq
 8009090:	1aad      	subeq	r5, r5, r2
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	6922      	ldr	r2, [r4, #16]
 8009096:	bf0c      	ite	eq
 8009098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800909c:	2500      	movne	r5, #0
 800909e:	4293      	cmp	r3, r2
 80090a0:	bfc4      	itt	gt
 80090a2:	1a9b      	subgt	r3, r3, r2
 80090a4:	18ed      	addgt	r5, r5, r3
 80090a6:	2600      	movs	r6, #0
 80090a8:	341a      	adds	r4, #26
 80090aa:	42b5      	cmp	r5, r6
 80090ac:	d11a      	bne.n	80090e4 <_printf_common+0xc8>
 80090ae:	2000      	movs	r0, #0
 80090b0:	e008      	b.n	80090c4 <_printf_common+0xa8>
 80090b2:	2301      	movs	r3, #1
 80090b4:	4652      	mov	r2, sl
 80090b6:	4649      	mov	r1, r9
 80090b8:	4638      	mov	r0, r7
 80090ba:	47c0      	blx	r8
 80090bc:	3001      	adds	r0, #1
 80090be:	d103      	bne.n	80090c8 <_printf_common+0xac>
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c8:	3501      	adds	r5, #1
 80090ca:	e7c6      	b.n	800905a <_printf_common+0x3e>
 80090cc:	18e1      	adds	r1, r4, r3
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	2030      	movs	r0, #48	; 0x30
 80090d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090d6:	4422      	add	r2, r4
 80090d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090e0:	3302      	adds	r3, #2
 80090e2:	e7c7      	b.n	8009074 <_printf_common+0x58>
 80090e4:	2301      	movs	r3, #1
 80090e6:	4622      	mov	r2, r4
 80090e8:	4649      	mov	r1, r9
 80090ea:	4638      	mov	r0, r7
 80090ec:	47c0      	blx	r8
 80090ee:	3001      	adds	r0, #1
 80090f0:	d0e6      	beq.n	80090c0 <_printf_common+0xa4>
 80090f2:	3601      	adds	r6, #1
 80090f4:	e7d9      	b.n	80090aa <_printf_common+0x8e>
	...

080090f8 <_printf_i>:
 80090f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090fc:	460c      	mov	r4, r1
 80090fe:	4691      	mov	r9, r2
 8009100:	7e27      	ldrb	r7, [r4, #24]
 8009102:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009104:	2f78      	cmp	r7, #120	; 0x78
 8009106:	4680      	mov	r8, r0
 8009108:	469a      	mov	sl, r3
 800910a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800910e:	d807      	bhi.n	8009120 <_printf_i+0x28>
 8009110:	2f62      	cmp	r7, #98	; 0x62
 8009112:	d80a      	bhi.n	800912a <_printf_i+0x32>
 8009114:	2f00      	cmp	r7, #0
 8009116:	f000 80d8 	beq.w	80092ca <_printf_i+0x1d2>
 800911a:	2f58      	cmp	r7, #88	; 0x58
 800911c:	f000 80a3 	beq.w	8009266 <_printf_i+0x16e>
 8009120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009128:	e03a      	b.n	80091a0 <_printf_i+0xa8>
 800912a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800912e:	2b15      	cmp	r3, #21
 8009130:	d8f6      	bhi.n	8009120 <_printf_i+0x28>
 8009132:	a001      	add	r0, pc, #4	; (adr r0, 8009138 <_printf_i+0x40>)
 8009134:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009138:	08009191 	.word	0x08009191
 800913c:	080091a5 	.word	0x080091a5
 8009140:	08009121 	.word	0x08009121
 8009144:	08009121 	.word	0x08009121
 8009148:	08009121 	.word	0x08009121
 800914c:	08009121 	.word	0x08009121
 8009150:	080091a5 	.word	0x080091a5
 8009154:	08009121 	.word	0x08009121
 8009158:	08009121 	.word	0x08009121
 800915c:	08009121 	.word	0x08009121
 8009160:	08009121 	.word	0x08009121
 8009164:	080092b1 	.word	0x080092b1
 8009168:	080091d5 	.word	0x080091d5
 800916c:	08009293 	.word	0x08009293
 8009170:	08009121 	.word	0x08009121
 8009174:	08009121 	.word	0x08009121
 8009178:	080092d3 	.word	0x080092d3
 800917c:	08009121 	.word	0x08009121
 8009180:	080091d5 	.word	0x080091d5
 8009184:	08009121 	.word	0x08009121
 8009188:	08009121 	.word	0x08009121
 800918c:	0800929b 	.word	0x0800929b
 8009190:	680b      	ldr	r3, [r1, #0]
 8009192:	1d1a      	adds	r2, r3, #4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	600a      	str	r2, [r1, #0]
 8009198:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800919c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091a0:	2301      	movs	r3, #1
 80091a2:	e0a3      	b.n	80092ec <_printf_i+0x1f4>
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	6808      	ldr	r0, [r1, #0]
 80091a8:	062e      	lsls	r6, r5, #24
 80091aa:	f100 0304 	add.w	r3, r0, #4
 80091ae:	d50a      	bpl.n	80091c6 <_printf_i+0xce>
 80091b0:	6805      	ldr	r5, [r0, #0]
 80091b2:	600b      	str	r3, [r1, #0]
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	da03      	bge.n	80091c0 <_printf_i+0xc8>
 80091b8:	232d      	movs	r3, #45	; 0x2d
 80091ba:	426d      	negs	r5, r5
 80091bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091c0:	485e      	ldr	r0, [pc, #376]	; (800933c <_printf_i+0x244>)
 80091c2:	230a      	movs	r3, #10
 80091c4:	e019      	b.n	80091fa <_printf_i+0x102>
 80091c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80091ca:	6805      	ldr	r5, [r0, #0]
 80091cc:	600b      	str	r3, [r1, #0]
 80091ce:	bf18      	it	ne
 80091d0:	b22d      	sxthne	r5, r5
 80091d2:	e7ef      	b.n	80091b4 <_printf_i+0xbc>
 80091d4:	680b      	ldr	r3, [r1, #0]
 80091d6:	6825      	ldr	r5, [r4, #0]
 80091d8:	1d18      	adds	r0, r3, #4
 80091da:	6008      	str	r0, [r1, #0]
 80091dc:	0628      	lsls	r0, r5, #24
 80091de:	d501      	bpl.n	80091e4 <_printf_i+0xec>
 80091e0:	681d      	ldr	r5, [r3, #0]
 80091e2:	e002      	b.n	80091ea <_printf_i+0xf2>
 80091e4:	0669      	lsls	r1, r5, #25
 80091e6:	d5fb      	bpl.n	80091e0 <_printf_i+0xe8>
 80091e8:	881d      	ldrh	r5, [r3, #0]
 80091ea:	4854      	ldr	r0, [pc, #336]	; (800933c <_printf_i+0x244>)
 80091ec:	2f6f      	cmp	r7, #111	; 0x6f
 80091ee:	bf0c      	ite	eq
 80091f0:	2308      	moveq	r3, #8
 80091f2:	230a      	movne	r3, #10
 80091f4:	2100      	movs	r1, #0
 80091f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091fa:	6866      	ldr	r6, [r4, #4]
 80091fc:	60a6      	str	r6, [r4, #8]
 80091fe:	2e00      	cmp	r6, #0
 8009200:	bfa2      	ittt	ge
 8009202:	6821      	ldrge	r1, [r4, #0]
 8009204:	f021 0104 	bicge.w	r1, r1, #4
 8009208:	6021      	strge	r1, [r4, #0]
 800920a:	b90d      	cbnz	r5, 8009210 <_printf_i+0x118>
 800920c:	2e00      	cmp	r6, #0
 800920e:	d04d      	beq.n	80092ac <_printf_i+0x1b4>
 8009210:	4616      	mov	r6, r2
 8009212:	fbb5 f1f3 	udiv	r1, r5, r3
 8009216:	fb03 5711 	mls	r7, r3, r1, r5
 800921a:	5dc7      	ldrb	r7, [r0, r7]
 800921c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009220:	462f      	mov	r7, r5
 8009222:	42bb      	cmp	r3, r7
 8009224:	460d      	mov	r5, r1
 8009226:	d9f4      	bls.n	8009212 <_printf_i+0x11a>
 8009228:	2b08      	cmp	r3, #8
 800922a:	d10b      	bne.n	8009244 <_printf_i+0x14c>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	07df      	lsls	r7, r3, #31
 8009230:	d508      	bpl.n	8009244 <_printf_i+0x14c>
 8009232:	6923      	ldr	r3, [r4, #16]
 8009234:	6861      	ldr	r1, [r4, #4]
 8009236:	4299      	cmp	r1, r3
 8009238:	bfde      	ittt	le
 800923a:	2330      	movle	r3, #48	; 0x30
 800923c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009240:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009244:	1b92      	subs	r2, r2, r6
 8009246:	6122      	str	r2, [r4, #16]
 8009248:	f8cd a000 	str.w	sl, [sp]
 800924c:	464b      	mov	r3, r9
 800924e:	aa03      	add	r2, sp, #12
 8009250:	4621      	mov	r1, r4
 8009252:	4640      	mov	r0, r8
 8009254:	f7ff fee2 	bl	800901c <_printf_common>
 8009258:	3001      	adds	r0, #1
 800925a:	d14c      	bne.n	80092f6 <_printf_i+0x1fe>
 800925c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009260:	b004      	add	sp, #16
 8009262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009266:	4835      	ldr	r0, [pc, #212]	; (800933c <_printf_i+0x244>)
 8009268:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	680e      	ldr	r6, [r1, #0]
 8009270:	061f      	lsls	r7, r3, #24
 8009272:	f856 5b04 	ldr.w	r5, [r6], #4
 8009276:	600e      	str	r6, [r1, #0]
 8009278:	d514      	bpl.n	80092a4 <_printf_i+0x1ac>
 800927a:	07d9      	lsls	r1, r3, #31
 800927c:	bf44      	itt	mi
 800927e:	f043 0320 	orrmi.w	r3, r3, #32
 8009282:	6023      	strmi	r3, [r4, #0]
 8009284:	b91d      	cbnz	r5, 800928e <_printf_i+0x196>
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	f023 0320 	bic.w	r3, r3, #32
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	2310      	movs	r3, #16
 8009290:	e7b0      	b.n	80091f4 <_printf_i+0xfc>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	f043 0320 	orr.w	r3, r3, #32
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	2378      	movs	r3, #120	; 0x78
 800929c:	4828      	ldr	r0, [pc, #160]	; (8009340 <_printf_i+0x248>)
 800929e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092a2:	e7e3      	b.n	800926c <_printf_i+0x174>
 80092a4:	065e      	lsls	r6, r3, #25
 80092a6:	bf48      	it	mi
 80092a8:	b2ad      	uxthmi	r5, r5
 80092aa:	e7e6      	b.n	800927a <_printf_i+0x182>
 80092ac:	4616      	mov	r6, r2
 80092ae:	e7bb      	b.n	8009228 <_printf_i+0x130>
 80092b0:	680b      	ldr	r3, [r1, #0]
 80092b2:	6826      	ldr	r6, [r4, #0]
 80092b4:	6960      	ldr	r0, [r4, #20]
 80092b6:	1d1d      	adds	r5, r3, #4
 80092b8:	600d      	str	r5, [r1, #0]
 80092ba:	0635      	lsls	r5, r6, #24
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	d501      	bpl.n	80092c4 <_printf_i+0x1cc>
 80092c0:	6018      	str	r0, [r3, #0]
 80092c2:	e002      	b.n	80092ca <_printf_i+0x1d2>
 80092c4:	0671      	lsls	r1, r6, #25
 80092c6:	d5fb      	bpl.n	80092c0 <_printf_i+0x1c8>
 80092c8:	8018      	strh	r0, [r3, #0]
 80092ca:	2300      	movs	r3, #0
 80092cc:	6123      	str	r3, [r4, #16]
 80092ce:	4616      	mov	r6, r2
 80092d0:	e7ba      	b.n	8009248 <_printf_i+0x150>
 80092d2:	680b      	ldr	r3, [r1, #0]
 80092d4:	1d1a      	adds	r2, r3, #4
 80092d6:	600a      	str	r2, [r1, #0]
 80092d8:	681e      	ldr	r6, [r3, #0]
 80092da:	6862      	ldr	r2, [r4, #4]
 80092dc:	2100      	movs	r1, #0
 80092de:	4630      	mov	r0, r6
 80092e0:	f7f6 ff96 	bl	8000210 <memchr>
 80092e4:	b108      	cbz	r0, 80092ea <_printf_i+0x1f2>
 80092e6:	1b80      	subs	r0, r0, r6
 80092e8:	6060      	str	r0, [r4, #4]
 80092ea:	6863      	ldr	r3, [r4, #4]
 80092ec:	6123      	str	r3, [r4, #16]
 80092ee:	2300      	movs	r3, #0
 80092f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092f4:	e7a8      	b.n	8009248 <_printf_i+0x150>
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	4632      	mov	r2, r6
 80092fa:	4649      	mov	r1, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	47d0      	blx	sl
 8009300:	3001      	adds	r0, #1
 8009302:	d0ab      	beq.n	800925c <_printf_i+0x164>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	079b      	lsls	r3, r3, #30
 8009308:	d413      	bmi.n	8009332 <_printf_i+0x23a>
 800930a:	68e0      	ldr	r0, [r4, #12]
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	4298      	cmp	r0, r3
 8009310:	bfb8      	it	lt
 8009312:	4618      	movlt	r0, r3
 8009314:	e7a4      	b.n	8009260 <_printf_i+0x168>
 8009316:	2301      	movs	r3, #1
 8009318:	4632      	mov	r2, r6
 800931a:	4649      	mov	r1, r9
 800931c:	4640      	mov	r0, r8
 800931e:	47d0      	blx	sl
 8009320:	3001      	adds	r0, #1
 8009322:	d09b      	beq.n	800925c <_printf_i+0x164>
 8009324:	3501      	adds	r5, #1
 8009326:	68e3      	ldr	r3, [r4, #12]
 8009328:	9903      	ldr	r1, [sp, #12]
 800932a:	1a5b      	subs	r3, r3, r1
 800932c:	42ab      	cmp	r3, r5
 800932e:	dcf2      	bgt.n	8009316 <_printf_i+0x21e>
 8009330:	e7eb      	b.n	800930a <_printf_i+0x212>
 8009332:	2500      	movs	r5, #0
 8009334:	f104 0619 	add.w	r6, r4, #25
 8009338:	e7f5      	b.n	8009326 <_printf_i+0x22e>
 800933a:	bf00      	nop
 800933c:	080097ad 	.word	0x080097ad
 8009340:	080097be 	.word	0x080097be

08009344 <__sread>:
 8009344:	b510      	push	{r4, lr}
 8009346:	460c      	mov	r4, r1
 8009348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934c:	f000 f89c 	bl	8009488 <_read_r>
 8009350:	2800      	cmp	r0, #0
 8009352:	bfab      	itete	ge
 8009354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009356:	89a3      	ldrhlt	r3, [r4, #12]
 8009358:	181b      	addge	r3, r3, r0
 800935a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800935e:	bfac      	ite	ge
 8009360:	6563      	strge	r3, [r4, #84]	; 0x54
 8009362:	81a3      	strhlt	r3, [r4, #12]
 8009364:	bd10      	pop	{r4, pc}

08009366 <__swrite>:
 8009366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800936a:	461f      	mov	r7, r3
 800936c:	898b      	ldrh	r3, [r1, #12]
 800936e:	05db      	lsls	r3, r3, #23
 8009370:	4605      	mov	r5, r0
 8009372:	460c      	mov	r4, r1
 8009374:	4616      	mov	r6, r2
 8009376:	d505      	bpl.n	8009384 <__swrite+0x1e>
 8009378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800937c:	2302      	movs	r3, #2
 800937e:	2200      	movs	r2, #0
 8009380:	f000 f870 	bl	8009464 <_lseek_r>
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800938a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	4632      	mov	r2, r6
 8009392:	463b      	mov	r3, r7
 8009394:	4628      	mov	r0, r5
 8009396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800939a:	f000 b817 	b.w	80093cc <_write_r>

0800939e <__sseek>:
 800939e:	b510      	push	{r4, lr}
 80093a0:	460c      	mov	r4, r1
 80093a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a6:	f000 f85d 	bl	8009464 <_lseek_r>
 80093aa:	1c43      	adds	r3, r0, #1
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	bf15      	itete	ne
 80093b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80093b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093ba:	81a3      	strheq	r3, [r4, #12]
 80093bc:	bf18      	it	ne
 80093be:	81a3      	strhne	r3, [r4, #12]
 80093c0:	bd10      	pop	{r4, pc}

080093c2 <__sclose>:
 80093c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c6:	f000 b81b 	b.w	8009400 <_close_r>
	...

080093cc <_write_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	4d07      	ldr	r5, [pc, #28]	; (80093ec <_write_r+0x20>)
 80093d0:	4604      	mov	r4, r0
 80093d2:	4608      	mov	r0, r1
 80093d4:	4611      	mov	r1, r2
 80093d6:	2200      	movs	r2, #0
 80093d8:	602a      	str	r2, [r5, #0]
 80093da:	461a      	mov	r2, r3
 80093dc:	f7f7 fe7d 	bl	80010da <_write>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_write_r+0x1e>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_write_r+0x1e>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	20004f64 	.word	0x20004f64

080093f0 <abort>:
 80093f0:	b508      	push	{r3, lr}
 80093f2:	2006      	movs	r0, #6
 80093f4:	f000 f882 	bl	80094fc <raise>
 80093f8:	2001      	movs	r0, #1
 80093fa:	f7f7 fe47 	bl	800108c <_exit>
	...

08009400 <_close_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d06      	ldr	r5, [pc, #24]	; (800941c <_close_r+0x1c>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	f7f7 fe81 	bl	8001112 <_close>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d102      	bne.n	800941a <_close_r+0x1a>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	b103      	cbz	r3, 800941a <_close_r+0x1a>
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	20004f64 	.word	0x20004f64

08009420 <_fstat_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d07      	ldr	r5, [pc, #28]	; (8009440 <_fstat_r+0x20>)
 8009424:	2300      	movs	r3, #0
 8009426:	4604      	mov	r4, r0
 8009428:	4608      	mov	r0, r1
 800942a:	4611      	mov	r1, r2
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	f7f7 fe7c 	bl	800112a <_fstat>
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	d102      	bne.n	800943c <_fstat_r+0x1c>
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	b103      	cbz	r3, 800943c <_fstat_r+0x1c>
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	bd38      	pop	{r3, r4, r5, pc}
 800943e:	bf00      	nop
 8009440:	20004f64 	.word	0x20004f64

08009444 <_isatty_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d06      	ldr	r5, [pc, #24]	; (8009460 <_isatty_r+0x1c>)
 8009448:	2300      	movs	r3, #0
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	602b      	str	r3, [r5, #0]
 8009450:	f7f7 fe7b 	bl	800114a <_isatty>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d102      	bne.n	800945e <_isatty_r+0x1a>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	b103      	cbz	r3, 800945e <_isatty_r+0x1a>
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	20004f64 	.word	0x20004f64

08009464 <_lseek_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d07      	ldr	r5, [pc, #28]	; (8009484 <_lseek_r+0x20>)
 8009468:	4604      	mov	r4, r0
 800946a:	4608      	mov	r0, r1
 800946c:	4611      	mov	r1, r2
 800946e:	2200      	movs	r2, #0
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f7f7 fe74 	bl	8001160 <_lseek>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_lseek_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_lseek_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	20004f64 	.word	0x20004f64

08009488 <_read_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4d07      	ldr	r5, [pc, #28]	; (80094a8 <_read_r+0x20>)
 800948c:	4604      	mov	r4, r0
 800948e:	4608      	mov	r0, r1
 8009490:	4611      	mov	r1, r2
 8009492:	2200      	movs	r2, #0
 8009494:	602a      	str	r2, [r5, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	f7f7 fe02 	bl	80010a0 <_read>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_read_r+0x1e>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_read_r+0x1e>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20004f64 	.word	0x20004f64

080094ac <_raise_r>:
 80094ac:	291f      	cmp	r1, #31
 80094ae:	b538      	push	{r3, r4, r5, lr}
 80094b0:	4604      	mov	r4, r0
 80094b2:	460d      	mov	r5, r1
 80094b4:	d904      	bls.n	80094c0 <_raise_r+0x14>
 80094b6:	2316      	movs	r3, #22
 80094b8:	6003      	str	r3, [r0, #0]
 80094ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094be:	bd38      	pop	{r3, r4, r5, pc}
 80094c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80094c2:	b112      	cbz	r2, 80094ca <_raise_r+0x1e>
 80094c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094c8:	b94b      	cbnz	r3, 80094de <_raise_r+0x32>
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 f830 	bl	8009530 <_getpid_r>
 80094d0:	462a      	mov	r2, r5
 80094d2:	4601      	mov	r1, r0
 80094d4:	4620      	mov	r0, r4
 80094d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094da:	f000 b817 	b.w	800950c <_kill_r>
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d00a      	beq.n	80094f8 <_raise_r+0x4c>
 80094e2:	1c59      	adds	r1, r3, #1
 80094e4:	d103      	bne.n	80094ee <_raise_r+0x42>
 80094e6:	2316      	movs	r3, #22
 80094e8:	6003      	str	r3, [r0, #0]
 80094ea:	2001      	movs	r0, #1
 80094ec:	e7e7      	b.n	80094be <_raise_r+0x12>
 80094ee:	2400      	movs	r4, #0
 80094f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094f4:	4628      	mov	r0, r5
 80094f6:	4798      	blx	r3
 80094f8:	2000      	movs	r0, #0
 80094fa:	e7e0      	b.n	80094be <_raise_r+0x12>

080094fc <raise>:
 80094fc:	4b02      	ldr	r3, [pc, #8]	; (8009508 <raise+0xc>)
 80094fe:	4601      	mov	r1, r0
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	f7ff bfd3 	b.w	80094ac <_raise_r>
 8009506:	bf00      	nop
 8009508:	2000001c 	.word	0x2000001c

0800950c <_kill_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d07      	ldr	r5, [pc, #28]	; (800952c <_kill_r+0x20>)
 8009510:	2300      	movs	r3, #0
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	4611      	mov	r1, r2
 8009518:	602b      	str	r3, [r5, #0]
 800951a:	f7f7 fda7 	bl	800106c <_kill>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	d102      	bne.n	8009528 <_kill_r+0x1c>
 8009522:	682b      	ldr	r3, [r5, #0]
 8009524:	b103      	cbz	r3, 8009528 <_kill_r+0x1c>
 8009526:	6023      	str	r3, [r4, #0]
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	bf00      	nop
 800952c:	20004f64 	.word	0x20004f64

08009530 <_getpid_r>:
 8009530:	f7f7 bd94 	b.w	800105c <_getpid>

08009534 <_gettimeofday>:
 8009534:	4b02      	ldr	r3, [pc, #8]	; (8009540 <_gettimeofday+0xc>)
 8009536:	2258      	movs	r2, #88	; 0x58
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800953e:	4770      	bx	lr
 8009540:	20004f64 	.word	0x20004f64

08009544 <_init>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	bf00      	nop
 8009548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954a:	bc08      	pop	{r3}
 800954c:	469e      	mov	lr, r3
 800954e:	4770      	bx	lr

08009550 <_fini>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	bf00      	nop
 8009554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009556:	bc08      	pop	{r3}
 8009558:	469e      	mov	lr, r3
 800955a:	4770      	bx	lr
